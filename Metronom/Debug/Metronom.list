
Metronom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007514  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  080076e8  080076e8  000176e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ae0  08007ae0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007ae0  08007ae0  00017ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ae8  08007ae8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ae8  08007ae8  00017ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007aec  08007aec  00017aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007af0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bbc  200001e0  08007cd0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d9c  08007cd0  00020d9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c54  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a9e  00000000  00000000  00030e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ef8  00000000  00000000  00033908  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db0  00000000  00000000  00034800  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023106  00000000  00000000  000355b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d60a  00000000  00000000  000586b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d20cb  00000000  00000000  00065cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00137d8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a50  00000000  00000000  00137e08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080076cc 	.word	0x080076cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	080076cc 	.word	0x080076cc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800041e:	f1a4 0401 	sub.w	r4, r4, #1
 8000422:	d1e9      	bne.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2uiz>:
 8000bdc:	004a      	lsls	r2, r1, #1
 8000bde:	d211      	bcs.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be4:	d211      	bcs.n	8000c0a <__aeabi_d2uiz+0x2e>
 8000be6:	d50d      	bpl.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf0:	d40e      	bmi.n	8000c10 <__aeabi_d2uiz+0x34>
 8000bf2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000c02:	4770      	bx	lr
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0e:	d102      	bne.n	8000c16 <__aeabi_d2uiz+0x3a>
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	4770      	bx	lr
 8000c16:	f04f 0000 	mov.w	r0, #0
 8000c1a:	4770      	bx	lr

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c30:	f000 b972 	b.w	8000f18 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9e08      	ldr	r6, [sp, #32]
 8000c52:	4604      	mov	r4, r0
 8000c54:	4688      	mov	r8, r1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d14b      	bne.n	8000cf2 <__udivmoddi4+0xa6>
 8000c5a:	428a      	cmp	r2, r1
 8000c5c:	4615      	mov	r5, r2
 8000c5e:	d967      	bls.n	8000d30 <__udivmoddi4+0xe4>
 8000c60:	fab2 f282 	clz	r2, r2
 8000c64:	b14a      	cbz	r2, 8000c7a <__udivmoddi4+0x2e>
 8000c66:	f1c2 0720 	rsb	r7, r2, #32
 8000c6a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c6e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c72:	4095      	lsls	r5, r2
 8000c74:	ea47 0803 	orr.w	r8, r7, r3
 8000c78:	4094      	lsls	r4, r2
 8000c7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c7e:	0c23      	lsrs	r3, r4, #16
 8000c80:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c84:	fa1f fc85 	uxth.w	ip, r5
 8000c88:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c8c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c90:	fb07 f10c 	mul.w	r1, r7, ip
 8000c94:	4299      	cmp	r1, r3
 8000c96:	d909      	bls.n	8000cac <__udivmoddi4+0x60>
 8000c98:	18eb      	adds	r3, r5, r3
 8000c9a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c9e:	f080 811b 	bcs.w	8000ed8 <__udivmoddi4+0x28c>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 8118 	bls.w	8000ed8 <__udivmoddi4+0x28c>
 8000ca8:	3f02      	subs	r7, #2
 8000caa:	442b      	add	r3, r5
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cb4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cc0:	45a4      	cmp	ip, r4
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x8c>
 8000cc4:	192c      	adds	r4, r5, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	f080 8107 	bcs.w	8000edc <__udivmoddi4+0x290>
 8000cce:	45a4      	cmp	ip, r4
 8000cd0:	f240 8104 	bls.w	8000edc <__udivmoddi4+0x290>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	442c      	add	r4, r5
 8000cd8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cdc:	eba4 040c 	sub.w	r4, r4, ip
 8000ce0:	2700      	movs	r7, #0
 8000ce2:	b11e      	cbz	r6, 8000cec <__udivmoddi4+0xa0>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c6 4300 	strd	r4, r3, [r6]
 8000cec:	4639      	mov	r1, r7
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0xbe>
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	f000 80eb 	beq.w	8000ed2 <__udivmoddi4+0x286>
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	e9c6 0100 	strd	r0, r1, [r6]
 8000d02:	4638      	mov	r0, r7
 8000d04:	4639      	mov	r1, r7
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f783 	clz	r7, r3
 8000d0e:	2f00      	cmp	r7, #0
 8000d10:	d147      	bne.n	8000da2 <__udivmoddi4+0x156>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xd0>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80fa 	bhi.w	8000f10 <__udivmoddi4+0x2c4>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	4698      	mov	r8, r3
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	d0e0      	beq.n	8000cec <__udivmoddi4+0xa0>
 8000d2a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d2e:	e7dd      	b.n	8000cec <__udivmoddi4+0xa0>
 8000d30:	b902      	cbnz	r2, 8000d34 <__udivmoddi4+0xe8>
 8000d32:	deff      	udf	#255	; 0xff
 8000d34:	fab2 f282 	clz	r2, r2
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	f040 808f 	bne.w	8000e5c <__udivmoddi4+0x210>
 8000d3e:	1b49      	subs	r1, r1, r5
 8000d40:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d44:	fa1f f885 	uxth.w	r8, r5
 8000d48:	2701      	movs	r7, #1
 8000d4a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d4e:	0c23      	lsrs	r3, r4, #16
 8000d50:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d58:	fb08 f10c 	mul.w	r1, r8, ip
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	d907      	bls.n	8000d70 <__udivmoddi4+0x124>
 8000d60:	18eb      	adds	r3, r5, r3
 8000d62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x122>
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	f200 80cd 	bhi.w	8000f08 <__udivmoddi4+0x2bc>
 8000d6e:	4684      	mov	ip, r0
 8000d70:	1a59      	subs	r1, r3, r1
 8000d72:	b2a3      	uxth	r3, r4
 8000d74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d78:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d7c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d80:	fb08 f800 	mul.w	r8, r8, r0
 8000d84:	45a0      	cmp	r8, r4
 8000d86:	d907      	bls.n	8000d98 <__udivmoddi4+0x14c>
 8000d88:	192c      	adds	r4, r5, r4
 8000d8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x14a>
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	f200 80b6 	bhi.w	8000f02 <__udivmoddi4+0x2b6>
 8000d96:	4618      	mov	r0, r3
 8000d98:	eba4 0408 	sub.w	r4, r4, r8
 8000d9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000da0:	e79f      	b.n	8000ce2 <__udivmoddi4+0x96>
 8000da2:	f1c7 0c20 	rsb	ip, r7, #32
 8000da6:	40bb      	lsls	r3, r7
 8000da8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dac:	ea4e 0e03 	orr.w	lr, lr, r3
 8000db0:	fa01 f407 	lsl.w	r4, r1, r7
 8000db4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000db8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dbc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dc0:	4325      	orrs	r5, r4
 8000dc2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dc6:	0c2c      	lsrs	r4, r5, #16
 8000dc8:	fb08 3319 	mls	r3, r8, r9, r3
 8000dcc:	fa1f fa8e 	uxth.w	sl, lr
 8000dd0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000dd4:	fb09 f40a 	mul.w	r4, r9, sl
 8000dd8:	429c      	cmp	r4, r3
 8000dda:	fa02 f207 	lsl.w	r2, r2, r7
 8000dde:	fa00 f107 	lsl.w	r1, r0, r7
 8000de2:	d90b      	bls.n	8000dfc <__udivmoddi4+0x1b0>
 8000de4:	eb1e 0303 	adds.w	r3, lr, r3
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	f080 8087 	bcs.w	8000efe <__udivmoddi4+0x2b2>
 8000df0:	429c      	cmp	r4, r3
 8000df2:	f240 8084 	bls.w	8000efe <__udivmoddi4+0x2b2>
 8000df6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dfa:	4473      	add	r3, lr
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	b2ad      	uxth	r5, r5
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3310 	mls	r3, r8, r0, r3
 8000e08:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e0c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e10:	45a2      	cmp	sl, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x1da>
 8000e14:	eb1e 0404 	adds.w	r4, lr, r4
 8000e18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1c:	d26b      	bcs.n	8000ef6 <__udivmoddi4+0x2aa>
 8000e1e:	45a2      	cmp	sl, r4
 8000e20:	d969      	bls.n	8000ef6 <__udivmoddi4+0x2aa>
 8000e22:	3802      	subs	r0, #2
 8000e24:	4474      	add	r4, lr
 8000e26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	eba4 040a 	sub.w	r4, r4, sl
 8000e32:	454c      	cmp	r4, r9
 8000e34:	46c2      	mov	sl, r8
 8000e36:	464b      	mov	r3, r9
 8000e38:	d354      	bcc.n	8000ee4 <__udivmoddi4+0x298>
 8000e3a:	d051      	beq.n	8000ee0 <__udivmoddi4+0x294>
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d069      	beq.n	8000f14 <__udivmoddi4+0x2c8>
 8000e40:	ebb1 050a 	subs.w	r5, r1, sl
 8000e44:	eb64 0403 	sbc.w	r4, r4, r3
 8000e48:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e4c:	40fd      	lsrs	r5, r7
 8000e4e:	40fc      	lsrs	r4, r7
 8000e50:	ea4c 0505 	orr.w	r5, ip, r5
 8000e54:	e9c6 5400 	strd	r5, r4, [r6]
 8000e58:	2700      	movs	r7, #0
 8000e5a:	e747      	b.n	8000cec <__udivmoddi4+0xa0>
 8000e5c:	f1c2 0320 	rsb	r3, r2, #32
 8000e60:	fa20 f703 	lsr.w	r7, r0, r3
 8000e64:	4095      	lsls	r5, r2
 8000e66:	fa01 f002 	lsl.w	r0, r1, r2
 8000e6a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e72:	4338      	orrs	r0, r7
 8000e74:	0c01      	lsrs	r1, r0, #16
 8000e76:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e7a:	fa1f f885 	uxth.w	r8, r5
 8000e7e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e86:	fb07 f308 	mul.w	r3, r7, r8
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x256>
 8000e92:	1869      	adds	r1, r5, r1
 8000e94:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e98:	d22f      	bcs.n	8000efa <__udivmoddi4+0x2ae>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d92d      	bls.n	8000efa <__udivmoddi4+0x2ae>
 8000e9e:	3f02      	subs	r7, #2
 8000ea0:	4429      	add	r1, r5
 8000ea2:	1acb      	subs	r3, r1, r3
 8000ea4:	b281      	uxth	r1, r0
 8000ea6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eaa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb00 f308 	mul.w	r3, r0, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x27e>
 8000eba:	1869      	adds	r1, r5, r1
 8000ebc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ec0:	d217      	bcs.n	8000ef2 <__udivmoddi4+0x2a6>
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d915      	bls.n	8000ef2 <__udivmoddi4+0x2a6>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4429      	add	r1, r5
 8000eca:	1ac9      	subs	r1, r1, r3
 8000ecc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ed0:	e73b      	b.n	8000d4a <__udivmoddi4+0xfe>
 8000ed2:	4637      	mov	r7, r6
 8000ed4:	4630      	mov	r0, r6
 8000ed6:	e709      	b.n	8000cec <__udivmoddi4+0xa0>
 8000ed8:	4607      	mov	r7, r0
 8000eda:	e6e7      	b.n	8000cac <__udivmoddi4+0x60>
 8000edc:	4618      	mov	r0, r3
 8000ede:	e6fb      	b.n	8000cd8 <__udivmoddi4+0x8c>
 8000ee0:	4541      	cmp	r1, r8
 8000ee2:	d2ab      	bcs.n	8000e3c <__udivmoddi4+0x1f0>
 8000ee4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ee8:	eb69 020e 	sbc.w	r2, r9, lr
 8000eec:	3801      	subs	r0, #1
 8000eee:	4613      	mov	r3, r2
 8000ef0:	e7a4      	b.n	8000e3c <__udivmoddi4+0x1f0>
 8000ef2:	4660      	mov	r0, ip
 8000ef4:	e7e9      	b.n	8000eca <__udivmoddi4+0x27e>
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	e795      	b.n	8000e26 <__udivmoddi4+0x1da>
 8000efa:	4667      	mov	r7, ip
 8000efc:	e7d1      	b.n	8000ea2 <__udivmoddi4+0x256>
 8000efe:	4681      	mov	r9, r0
 8000f00:	e77c      	b.n	8000dfc <__udivmoddi4+0x1b0>
 8000f02:	3802      	subs	r0, #2
 8000f04:	442c      	add	r4, r5
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0x14c>
 8000f08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f0c:	442b      	add	r3, r5
 8000f0e:	e72f      	b.n	8000d70 <__udivmoddi4+0x124>
 8000f10:	4638      	mov	r0, r7
 8000f12:	e708      	b.n	8000d26 <__udivmoddi4+0xda>
 8000f14:	4637      	mov	r7, r6
 8000f16:	e6e9      	b.n	8000cec <__udivmoddi4+0xa0>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <LCD_writeHalf>:


//HAL_GIPO_WritePin - ustawianie stanów logicznych na określonych pinach
//Ustawienie stanów sygnalizujemy zboczem opadającym na linii E

void LCD_writeHalf(uint8_t data) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
	LCD_E_HIGH;
 8000f26:	2201      	movs	r2, #1
 8000f28:	2104      	movs	r1, #4
 8000f2a:	4818      	ldr	r0, [pc, #96]	; (8000f8c <LCD_writeHalf+0x70>)
 8000f2c:	f002 fbd2 	bl	80036d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx, D4, (data & 0x01));
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	461a      	mov	r2, r3
 8000f3a:	2110      	movs	r1, #16
 8000f3c:	4814      	ldr	r0, [pc, #80]	; (8000f90 <LCD_writeHalf+0x74>)
 8000f3e:	f002 fbc9 	bl	80036d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx, D5, (data & 0x02));
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	2120      	movs	r1, #32
 8000f4e:	4810      	ldr	r0, [pc, #64]	; (8000f90 <LCD_writeHalf+0x74>)
 8000f50:	f002 fbc0 	bl	80036d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx, D6, (data & 0x04));
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f003 0304 	and.w	r3, r3, #4
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	2140      	movs	r1, #64	; 0x40
 8000f60:	480b      	ldr	r0, [pc, #44]	; (8000f90 <LCD_writeHalf+0x74>)
 8000f62:	f002 fbb7 	bl	80036d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx, D7, (data & 0x08));
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	f003 0308 	and.w	r3, r3, #8
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	461a      	mov	r2, r3
 8000f70:	2180      	movs	r1, #128	; 0x80
 8000f72:	4807      	ldr	r0, [pc, #28]	; (8000f90 <LCD_writeHalf+0x74>)
 8000f74:	f002 fbae 	bl	80036d4 <HAL_GPIO_WritePin>
	LCD_E_LOW;
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2104      	movs	r1, #4
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <LCD_writeHalf+0x70>)
 8000f7e:	f002 fba9 	bl	80036d4 <HAL_GPIO_WritePin>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40020400 	.word	0x40020400
 8000f90:	40020800 	.word	0x40020800

08000f94 <LCD_writeByte>:

//Funkcja pozwalająca na zapisanie całego bajta
void LCD_writeByte(uint8_t data) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
	LCD_pinsOutput();
 8000f9e:	f000 f8d7 	bl	8001150 <LCD_pinsOutput>

	LCD_writeHalf(data >> 4);
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	091b      	lsrs	r3, r3, #4
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ffb7 	bl	8000f1c <LCD_writeHalf>
	LCD_writeHalf(data);
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ffb3 	bl	8000f1c <LCD_writeHalf>

	while(LCD_busyFlag() & 0x80);
 8000fb6:	bf00      	nop
 8000fb8:	f000 f948 	bl	800124c <LCD_busyFlag>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	b25b      	sxtb	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	dbf9      	blt.n	8000fb8 <LCD_writeByte+0x24>

}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <LCD_writeCmd>:


void LCD_writeCmd(uint8_t cmd) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
	LCD_RS_LOW;
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2101      	movs	r1, #1
 8000fda:	4808      	ldr	r0, [pc, #32]	; (8000ffc <LCD_writeCmd+0x30>)
 8000fdc:	f002 fb7a 	bl	80036d4 <HAL_GPIO_WritePin>
	LCD_RW_LOW;
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <LCD_writeCmd+0x30>)
 8000fe6:	f002 fb75 	bl	80036d4 <HAL_GPIO_WritePin>
	LCD_writeByte(cmd);
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ffd1 	bl	8000f94 <LCD_writeByte>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40020400 	.word	0x40020400

08001000 <LCD_writeData>:


void LCD_writeData(uint8_t data) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
	LCD_RS_HIGH;
 800100a:	2201      	movs	r2, #1
 800100c:	2101      	movs	r1, #1
 800100e:	4808      	ldr	r0, [pc, #32]	; (8001030 <LCD_writeData+0x30>)
 8001010:	f002 fb60 	bl	80036d4 <HAL_GPIO_WritePin>
	LCD_RW_LOW;
 8001014:	2200      	movs	r2, #0
 8001016:	2102      	movs	r1, #2
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <LCD_writeData+0x30>)
 800101a:	f002 fb5b 	bl	80036d4 <HAL_GPIO_WritePin>
	LCD_writeByte(data);
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ffb7 	bl	8000f94 <LCD_writeByte>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40020400 	.word	0x40020400

08001034 <LCD_init>:

void LCD_init() {
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	LCD_writeCmd(LCD_FUNC | LCD_4_BIT | LCDC_TWO_LINE | LCDC_FONT_5x7);
 8001038:	2028      	movs	r0, #40	; 0x28
 800103a:	f7ff ffc7 	bl	8000fcc <LCD_writeCmd>
	LCD_writeCmd(LCD_ONOFF | LCD_DISP_ON);
 800103e:	200c      	movs	r0, #12
 8001040:	f7ff ffc4 	bl	8000fcc <LCD_writeCmd>
	LCD_writeCmd(LCD_CLEAR);
 8001044:	2001      	movs	r0, #1
 8001046:	f7ff ffc1 	bl	8000fcc <LCD_writeCmd>
	LCD_writeCmd(LCDC_ENTRY_MODE | LCD_EM_SHIFT_CURSOR | LCD_EM_LEFT);
 800104a:	2004      	movs	r0, #4
 800104c:	f7ff ffbe 	bl	8000fcc <LCD_writeCmd>
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}

08001054 <LCD_display>:

void LCD_display(uint8_t x, uint8_t y, char *string, ...) {
 8001054:	b40c      	push	{r2, r3}
 8001056:	b580      	push	{r7, lr}
 8001058:	b0c4      	sub	sp, #272	; 0x110
 800105a:	af00      	add	r7, sp, #0
 800105c:	4602      	mov	r2, r0
 800105e:	1dfb      	adds	r3, r7, #7
 8001060:	701a      	strb	r2, [r3, #0]
 8001062:	1dbb      	adds	r3, r7, #6
 8001064:	460a      	mov	r2, r1
 8001066:	701a      	strb	r2, [r3, #0]
	char BUFF_TMP[255];

	va_list valist;
	va_start(valist, string);
 8001068:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 800106c:	f107 0308 	add.w	r3, r7, #8
 8001070:	601a      	str	r2, [r3, #0]
	vsprintf(BUFF_TMP, string, valist);
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	f107 000c 	add.w	r0, r7, #12
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8001080:	f004 f9e6 	bl	8005450 <vsiprintf>
	va_end(valist);

	LCD_cursorPosition(x, y);
 8001084:	1dbb      	adds	r3, r7, #6
 8001086:	781a      	ldrb	r2, [r3, #0]
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4611      	mov	r1, r2
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f822 	bl	80010d8 <LCD_cursorPosition>
	for(int i = 0; BUFF_TMP[i] != '\0'; i++)
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800109a:	e00d      	b.n	80010b8 <LCD_display+0x64>
		LCD_writeData(BUFF_TMP[i]);
 800109c:	f107 020c 	add.w	r2, r7, #12
 80010a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80010a4:	4413      	add	r3, r2
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ffa9 	bl	8001000 <LCD_writeData>
	for(int i = 0; BUFF_TMP[i] != '\0'; i++)
 80010ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80010b2:	3301      	adds	r3, #1
 80010b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80010b8:	f107 020c 	add.w	r2, r7, #12
 80010bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80010c0:	4413      	add	r3, r2
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1e9      	bne.n	800109c <LCD_display+0x48>
}
 80010c8:	bf00      	nop
 80010ca:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80010ce:	46bd      	mov	sp, r7
 80010d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010d4:	b002      	add	sp, #8
 80010d6:	4770      	bx	lr

080010d8 <LCD_cursorPosition>:


void LCD_cursorPosition(uint8_t x, uint8_t y) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	460a      	mov	r2, r1
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	4613      	mov	r3, r2
 80010e6:	71bb      	strb	r3, [r7, #6]
	switch(y) {
 80010e8:	79bb      	ldrb	r3, [r7, #6]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d002      	beq.n	80010f4 <LCD_cursorPosition+0x1c>
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d008      	beq.n	8001104 <LCD_cursorPosition+0x2c>

		case 1:
			LCD_writeCmd(LCDC_SET_DDRAM | (LCD_LINE2 + x));
			break;
	}
}
 80010f2:	e013      	b.n	800111c <LCD_cursorPosition+0x44>
			LCD_writeCmd(LCDC_SET_DDRAM | (LCD_LINE1 + x));
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff65 	bl	8000fcc <LCD_writeCmd>
			break;
 8001102:	e00b      	b.n	800111c <LCD_cursorPosition+0x44>
			LCD_writeCmd(LCDC_SET_DDRAM | (LCD_LINE2 + x));
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	3340      	adds	r3, #64	; 0x40
 8001108:	b2db      	uxtb	r3, r3
 800110a:	b25b      	sxtb	r3, r3
 800110c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001110:	b25b      	sxtb	r3, r3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff59 	bl	8000fcc <LCD_writeCmd>
			break;
 800111a:	bf00      	nop
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <LCD_pinsInput>:

void LCD_pinsInput() {
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct;
	  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800112a:	23f0      	movs	r3, #240	; 0xf0
 800112c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4619      	mov	r1, r3
 800113e:	4803      	ldr	r0, [pc, #12]	; (800114c <LCD_pinsInput+0x28>)
 8001140:	f002 f91e 	bl	8003380 <HAL_GPIO_Init>
}
 8001144:	bf00      	nop
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40020800 	.word	0x40020800

08001150 <LCD_pinsOutput>:

void LCD_pinsOutput() {
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct;
	  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001156:	23f0      	movs	r3, #240	; 0xf0
 8001158:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115a:	2301      	movs	r3, #1
 800115c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	4619      	mov	r1, r3
 800116a:	4803      	ldr	r0, [pc, #12]	; (8001178 <LCD_pinsOutput+0x28>)
 800116c:	f002 f908 	bl	8003380 <HAL_GPIO_Init>
}
 8001170:	bf00      	nop
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40020800 	.word	0x40020800

0800117c <LCD_readHalf>:

uint8_t LCD_readHalf() {
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
	  uint8_t tmp = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	71fb      	strb	r3, [r7, #7]

	  LCD_E_HIGH;
 8001186:	2201      	movs	r2, #1
 8001188:	2104      	movs	r1, #4
 800118a:	481e      	ldr	r0, [pc, #120]	; (8001204 <LCD_readHalf+0x88>)
 800118c:	f002 faa2 	bl	80036d4 <HAL_GPIO_WritePin>
	  tmp |= (HAL_GPIO_ReadPin(GPIOx, D4) << 0);
 8001190:	2110      	movs	r1, #16
 8001192:	481d      	ldr	r0, [pc, #116]	; (8001208 <LCD_readHalf+0x8c>)
 8001194:	f002 fa86 	bl	80036a4 <HAL_GPIO_ReadPin>
 8001198:	4603      	mov	r3, r0
 800119a:	b25a      	sxtb	r2, r3
 800119c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	b25b      	sxtb	r3, r3
 80011a4:	71fb      	strb	r3, [r7, #7]
	  tmp |= (HAL_GPIO_ReadPin(GPIOx, D5) << 1);
 80011a6:	2120      	movs	r1, #32
 80011a8:	4817      	ldr	r0, [pc, #92]	; (8001208 <LCD_readHalf+0x8c>)
 80011aa:	f002 fa7b 	bl	80036a4 <HAL_GPIO_ReadPin>
 80011ae:	4603      	mov	r3, r0
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	b25a      	sxtb	r2, r3
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b25b      	sxtb	r3, r3
 80011bc:	71fb      	strb	r3, [r7, #7]
	  tmp |= (HAL_GPIO_ReadPin(GPIOx, D6) << 2);
 80011be:	2140      	movs	r1, #64	; 0x40
 80011c0:	4811      	ldr	r0, [pc, #68]	; (8001208 <LCD_readHalf+0x8c>)
 80011c2:	f002 fa6f 	bl	80036a4 <HAL_GPIO_ReadPin>
 80011c6:	4603      	mov	r3, r0
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	b25a      	sxtb	r2, r3
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b25b      	sxtb	r3, r3
 80011d4:	71fb      	strb	r3, [r7, #7]
	  tmp |= (HAL_GPIO_ReadPin(GPIOx, D7) << 3);
 80011d6:	2180      	movs	r1, #128	; 0x80
 80011d8:	480b      	ldr	r0, [pc, #44]	; (8001208 <LCD_readHalf+0x8c>)
 80011da:	f002 fa63 	bl	80036a4 <HAL_GPIO_ReadPin>
 80011de:	4603      	mov	r3, r0
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	b25a      	sxtb	r2, r3
 80011e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	71fb      	strb	r3, [r7, #7]
	  LCD_E_LOW;
 80011ee:	2200      	movs	r2, #0
 80011f0:	2104      	movs	r1, #4
 80011f2:	4804      	ldr	r0, [pc, #16]	; (8001204 <LCD_readHalf+0x88>)
 80011f4:	f002 fa6e 	bl	80036d4 <HAL_GPIO_WritePin>

	  return tmp;
 80011f8:	79fb      	ldrb	r3, [r7, #7]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40020400 	.word	0x40020400
 8001208:	40020800 	.word	0x40020800

0800120c <LCD_readByte>:

uint8_t LCD_readByte() {
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
	uint8_t result = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	71fb      	strb	r3, [r7, #7]

	LCD_pinsInput();
 8001216:	f7ff ff85 	bl	8001124 <LCD_pinsInput>
	LCD_RW_HIGH;
 800121a:	2201      	movs	r2, #1
 800121c:	2102      	movs	r1, #2
 800121e:	480a      	ldr	r0, [pc, #40]	; (8001248 <LCD_readByte+0x3c>)
 8001220:	f002 fa58 	bl	80036d4 <HAL_GPIO_WritePin>

	result = (LCD_readHalf() << 4);
 8001224:	f7ff ffaa 	bl	800117c <LCD_readHalf>
 8001228:	4603      	mov	r3, r0
 800122a:	011b      	lsls	r3, r3, #4
 800122c:	71fb      	strb	r3, [r7, #7]
	result |= LCD_readHalf();
 800122e:	f7ff ffa5 	bl	800117c <LCD_readHalf>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	4313      	orrs	r3, r2
 800123a:	71fb      	strb	r3, [r7, #7]

	return result;
 800123c:	79fb      	ldrb	r3, [r7, #7]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40020400 	.word	0x40020400

0800124c <LCD_busyFlag>:




uint8_t LCD_busyFlag() {
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	LCD_RS_LOW;
 8001250:	2200      	movs	r2, #0
 8001252:	2101      	movs	r1, #1
 8001254:	4803      	ldr	r0, [pc, #12]	; (8001264 <LCD_busyFlag+0x18>)
 8001256:	f002 fa3d 	bl	80036d4 <HAL_GPIO_WritePin>
	return LCD_readByte();
 800125a:	f7ff ffd7 	bl	800120c <LCD_readByte>
 800125e:	4603      	mov	r3, r0
}
 8001260:	4618      	mov	r0, r3
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40020400 	.word	0x40020400

08001268 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800126e:	463b      	mov	r3, r7
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_DAC_Init+0x4c>)
 8001278:	4a0f      	ldr	r2, [pc, #60]	; (80012b8 <MX_DAC_Init+0x50>)
 800127a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800127c:	480d      	ldr	r0, [pc, #52]	; (80012b4 <MX_DAC_Init+0x4c>)
 800127e:	f001 fade 	bl	800283e <HAL_DAC_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001288:	f000 fc6e 	bl	8001b68 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800128c:	2304      	movs	r3, #4
 800128e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001294:	463b      	mov	r3, r7
 8001296:	2200      	movs	r2, #0
 8001298:	4619      	mov	r1, r3
 800129a:	4806      	ldr	r0, [pc, #24]	; (80012b4 <MX_DAC_Init+0x4c>)
 800129c:	f001 fbfe 	bl	8002a9c <HAL_DAC_ConfigChannel>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80012a6:	f000 fc5f 	bl	8001b68 <Error_Handler>
  }

}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000041c 	.word	0x2000041c
 80012b8:	40007400 	.word	0x40007400

080012bc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a32      	ldr	r2, [pc, #200]	; (80013a4 <HAL_DAC_MspInit+0xe8>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d15e      	bne.n	800139c <HAL_DAC_MspInit+0xe0>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <HAL_DAC_MspInit+0xec>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	4a30      	ldr	r2, [pc, #192]	; (80013a8 <HAL_DAC_MspInit+0xec>)
 80012e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012ec:	6413      	str	r3, [r2, #64]	; 0x40
 80012ee:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <HAL_DAC_MspInit+0xec>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <HAL_DAC_MspInit+0xec>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a29      	ldr	r2, [pc, #164]	; (80013a8 <HAL_DAC_MspInit+0xec>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b27      	ldr	r3, [pc, #156]	; (80013a8 <HAL_DAC_MspInit+0xec>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001316:	2310      	movs	r3, #16
 8001318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131a:	2303      	movs	r3, #3
 800131c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	4820      	ldr	r0, [pc, #128]	; (80013ac <HAL_DAC_MspInit+0xf0>)
 800132a:	f002 f829 	bl	8003380 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800132e:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <HAL_DAC_MspInit+0xf4>)
 8001330:	4a20      	ldr	r2, [pc, #128]	; (80013b4 <HAL_DAC_MspInit+0xf8>)
 8001332:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <HAL_DAC_MspInit+0xf4>)
 8001336:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800133a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800133c:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <HAL_DAC_MspInit+0xf4>)
 800133e:	2240      	movs	r2, #64	; 0x40
 8001340:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001342:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_DAC_MspInit+0xf4>)
 8001344:	2200      	movs	r2, #0
 8001346:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <HAL_DAC_MspInit+0xf4>)
 800134a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800134e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001350:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <HAL_DAC_MspInit+0xf4>)
 8001352:	2200      	movs	r2, #0
 8001354:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001356:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <HAL_DAC_MspInit+0xf4>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <HAL_DAC_MspInit+0xf4>)
 800135e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001362:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_DAC_MspInit+0xf4>)
 8001366:	2200      	movs	r2, #0
 8001368:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_DAC_MspInit+0xf4>)
 800136c:	2200      	movs	r2, #0
 800136e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001370:	480f      	ldr	r0, [pc, #60]	; (80013b0 <HAL_DAC_MspInit+0xf4>)
 8001372:	f001 fc75 	bl	8002c60 <HAL_DMA_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <HAL_DAC_MspInit+0xc4>
    {
      Error_Handler();
 800137c:	f000 fbf4 	bl	8001b68 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <HAL_DAC_MspInit+0xf4>)
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <HAL_DAC_MspInit+0xf4>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800138c:	2200      	movs	r2, #0
 800138e:	2100      	movs	r1, #0
 8001390:	2036      	movs	r0, #54	; 0x36
 8001392:	f001 fa1e 	bl	80027d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001396:	2036      	movs	r0, #54	; 0x36
 8001398:	f001 fa37 	bl	800280a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800139c:	bf00      	nop
 800139e:	3728      	adds	r7, #40	; 0x28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40007400 	.word	0x40007400
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020000 	.word	0x40020000
 80013b0:	200003bc 	.word	0x200003bc
 80013b4:	40026088 	.word	0x40026088

080013b8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_DMA_Init+0x3c>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <MX_DMA_Init+0x3c>)
 80013c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <MX_DMA_Init+0x3c>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	2100      	movs	r1, #0
 80013de:	2010      	movs	r0, #16
 80013e0:	f001 f9f7 	bl	80027d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013e4:	2010      	movs	r0, #16
 80013e6:	f001 fa10 	bl	800280a <HAL_NVIC_EnableIRQ>

}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800

080013f8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	4b39      	ldr	r3, [pc, #228]	; (80014f8 <MX_GPIO_Init+0x100>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a38      	ldr	r2, [pc, #224]	; (80014f8 <MX_GPIO_Init+0x100>)
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b36      	ldr	r3, [pc, #216]	; (80014f8 <MX_GPIO_Init+0x100>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b32      	ldr	r3, [pc, #200]	; (80014f8 <MX_GPIO_Init+0x100>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a31      	ldr	r2, [pc, #196]	; (80014f8 <MX_GPIO_Init+0x100>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b2f      	ldr	r3, [pc, #188]	; (80014f8 <MX_GPIO_Init+0x100>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	603b      	str	r3, [r7, #0]
 800144a:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <MX_GPIO_Init+0x100>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a2a      	ldr	r2, [pc, #168]	; (80014f8 <MX_GPIO_Init+0x100>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <MX_GPIO_Init+0x100>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	2120      	movs	r1, #32
 8001466:	4825      	ldr	r0, [pc, #148]	; (80014fc <MX_GPIO_Init+0x104>)
 8001468:	f002 f934 	bl	80036d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	21f0      	movs	r1, #240	; 0xf0
 8001470:	4823      	ldr	r0, [pc, #140]	; (8001500 <MX_GPIO_Init+0x108>)
 8001472:	f002 f92f 	bl	80036d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	2107      	movs	r1, #7
 800147a:	4822      	ldr	r0, [pc, #136]	; (8001504 <MX_GPIO_Init+0x10c>)
 800147c:	f002 f92a 	bl	80036d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001484:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	4619      	mov	r1, r3
 8001494:	481a      	ldr	r0, [pc, #104]	; (8001500 <MX_GPIO_Init+0x108>)
 8001496:	f001 ff73 	bl	8003380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800149a:	2320      	movs	r3, #32
 800149c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149e:	2301      	movs	r3, #1
 80014a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014aa:	f107 030c 	add.w	r3, r7, #12
 80014ae:	4619      	mov	r1, r3
 80014b0:	4812      	ldr	r0, [pc, #72]	; (80014fc <MX_GPIO_Init+0x104>)
 80014b2:	f001 ff65 	bl	8003380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014b6:	23f0      	movs	r3, #240	; 0xf0
 80014b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	4619      	mov	r1, r3
 80014cc:	480c      	ldr	r0, [pc, #48]	; (8001500 <MX_GPIO_Init+0x108>)
 80014ce:	f001 ff57 	bl	8003380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80014d2:	2307      	movs	r3, #7
 80014d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e2:	f107 030c 	add.w	r3, r7, #12
 80014e6:	4619      	mov	r1, r3
 80014e8:	4806      	ldr	r0, [pc, #24]	; (8001504 <MX_GPIO_Init+0x10c>)
 80014ea:	f001 ff49 	bl	8003380 <HAL_GPIO_Init>

}
 80014ee:	bf00      	nop
 80014f0:	3720      	adds	r7, #32
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020000 	.word	0x40020000
 8001500:	40020800 	.word	0x40020800
 8001504:	40020400 	.word	0x40020400

08001508 <HAL_DAC_ConvCpltCallbackCh1>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac){
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	0000      	movs	r0, r0
	...

08001520 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac){
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b089      	sub	sp, #36	; 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

	dac_callback_cnt++;
 8001528:	4b9d      	ldr	r3, [pc, #628]	; (80017a0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x280>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	3301      	adds	r3, #1
 800152e:	b2da      	uxtb	r2, r3
 8001530:	4b9b      	ldr	r3, [pc, #620]	; (80017a0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x280>)
 8001532:	701a      	strb	r2, [r3, #0]

		switch (dma_state) {
 8001534:	4b9b      	ldr	r3, [pc, #620]	; (80017a4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x284>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d006      	beq.n	800154a <HAL_DAC_ConvHalfCpltCallbackCh1+0x2a>
 800153c:	2b02      	cmp	r3, #2
 800153e:	f000 80ac 	beq.w	800169a <HAL_DAC_ConvHalfCpltCallbackCh1+0x17a>
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 811f 	beq.w	8001786 <HAL_DAC_ConvHalfCpltCallbackCh1+0x266>
						tab_dac[i] = ((sin(i*2*PI/100) + 1)*(4096/2));
					dma_state = 1;
					dac_callback_cnt = 0;
				}
			default:
				break;
 8001548:	e11f      	b.n	800178a <HAL_DAC_ConvHalfCpltCallbackCh1+0x26a>
				for(int i = 0; i > 1024; i++)
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
 800154e:	e03b      	b.n	80015c8 <HAL_DAC_ConvHalfCpltCallbackCh1+0xa8>
					tab_dac[i] = ((sin(i*2*PI/100) + 1)*(4096/2));
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff f815 	bl	8000584 <__aeabi_i2d>
 800155a:	a38f      	add	r3, pc, #572	; (adr r3, 8001798 <HAL_DAC_ConvHalfCpltCallbackCh1+0x278>)
 800155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001560:	f7ff f87a 	bl	8000658 <__aeabi_dmul>
 8001564:	4603      	mov	r3, r0
 8001566:	460c      	mov	r4, r1
 8001568:	4618      	mov	r0, r3
 800156a:	4621      	mov	r1, r4
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	4b8d      	ldr	r3, [pc, #564]	; (80017a8 <HAL_DAC_ConvHalfCpltCallbackCh1+0x288>)
 8001572:	f7ff f99b 	bl	80008ac <__aeabi_ddiv>
 8001576:	4603      	mov	r3, r0
 8001578:	460c      	mov	r4, r1
 800157a:	ec44 3b17 	vmov	d7, r3, r4
 800157e:	eeb0 0a47 	vmov.f32	s0, s14
 8001582:	eef0 0a67 	vmov.f32	s1, s15
 8001586:	f005 f88f 	bl	80066a8 <sin>
 800158a:	ec51 0b10 	vmov	r0, r1, d0
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	4b86      	ldr	r3, [pc, #536]	; (80017ac <HAL_DAC_ConvHalfCpltCallbackCh1+0x28c>)
 8001594:	f7fe feaa 	bl	80002ec <__adddf3>
 8001598:	4603      	mov	r3, r0
 800159a:	460c      	mov	r4, r1
 800159c:	4618      	mov	r0, r3
 800159e:	4621      	mov	r1, r4
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	4b82      	ldr	r3, [pc, #520]	; (80017b0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x290>)
 80015a6:	f7ff f857 	bl	8000658 <__aeabi_dmul>
 80015aa:	4603      	mov	r3, r0
 80015ac:	460c      	mov	r4, r1
 80015ae:	4618      	mov	r0, r3
 80015b0:	4621      	mov	r1, r4
 80015b2:	f7ff fb13 	bl	8000bdc <__aeabi_d2uiz>
 80015b6:	4603      	mov	r3, r0
 80015b8:	b299      	uxth	r1, r3
 80015ba:	4a7e      	ldr	r2, [pc, #504]	; (80017b4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x294>)
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(int i = 0; i > 1024; i++)
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3301      	adds	r3, #1
 80015c6:	61fb      	str	r3, [r7, #28]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ce:	dcbf      	bgt.n	8001550 <HAL_DAC_ConvHalfCpltCallbackCh1+0x30>
				if(dac_callback_cnt > dma_irq_counter){
 80015d0:	4b73      	ldr	r3, [pc, #460]	; (80017a0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x280>)
 80015d2:	781a      	ldrb	r2, [r3, #0]
 80015d4:	4b78      	ldr	r3, [pc, #480]	; (80017b8 <HAL_DAC_ConvHalfCpltCallbackCh1+0x298>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d95e      	bls.n	800169a <HAL_DAC_ConvHalfCpltCallbackCh1+0x17a>
					for(int i = 0; i > (512+ dma_irq_tab_idx); i++){
 80015dc:	2300      	movs	r3, #0
 80015de:	61bb      	str	r3, [r7, #24]
 80015e0:	e03b      	b.n	800165a <HAL_DAC_ConvHalfCpltCallbackCh1+0x13a>
						tab_dac[i] = ((sin(i*2*PI/100) + 1)*(4096/2));
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7fe ffcc 	bl	8000584 <__aeabi_i2d>
 80015ec:	a36a      	add	r3, pc, #424	; (adr r3, 8001798 <HAL_DAC_ConvHalfCpltCallbackCh1+0x278>)
 80015ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f2:	f7ff f831 	bl	8000658 <__aeabi_dmul>
 80015f6:	4603      	mov	r3, r0
 80015f8:	460c      	mov	r4, r1
 80015fa:	4618      	mov	r0, r3
 80015fc:	4621      	mov	r1, r4
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	4b69      	ldr	r3, [pc, #420]	; (80017a8 <HAL_DAC_ConvHalfCpltCallbackCh1+0x288>)
 8001604:	f7ff f952 	bl	80008ac <__aeabi_ddiv>
 8001608:	4603      	mov	r3, r0
 800160a:	460c      	mov	r4, r1
 800160c:	ec44 3b17 	vmov	d7, r3, r4
 8001610:	eeb0 0a47 	vmov.f32	s0, s14
 8001614:	eef0 0a67 	vmov.f32	s1, s15
 8001618:	f005 f846 	bl	80066a8 <sin>
 800161c:	ec51 0b10 	vmov	r0, r1, d0
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	4b61      	ldr	r3, [pc, #388]	; (80017ac <HAL_DAC_ConvHalfCpltCallbackCh1+0x28c>)
 8001626:	f7fe fe61 	bl	80002ec <__adddf3>
 800162a:	4603      	mov	r3, r0
 800162c:	460c      	mov	r4, r1
 800162e:	4618      	mov	r0, r3
 8001630:	4621      	mov	r1, r4
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	4b5e      	ldr	r3, [pc, #376]	; (80017b0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x290>)
 8001638:	f7ff f80e 	bl	8000658 <__aeabi_dmul>
 800163c:	4603      	mov	r3, r0
 800163e:	460c      	mov	r4, r1
 8001640:	4618      	mov	r0, r3
 8001642:	4621      	mov	r1, r4
 8001644:	f7ff faca 	bl	8000bdc <__aeabi_d2uiz>
 8001648:	4603      	mov	r3, r0
 800164a:	b299      	uxth	r1, r3
 800164c:	4a59      	ldr	r2, [pc, #356]	; (80017b4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x294>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					for(int i = 0; i > (512+ dma_irq_tab_idx); i++){
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	3301      	adds	r3, #1
 8001658:	61bb      	str	r3, [r7, #24]
 800165a:	4b58      	ldr	r3, [pc, #352]	; (80017bc <HAL_DAC_ConvHalfCpltCallbackCh1+0x29c>)
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	429a      	cmp	r2, r3
 8001666:	dcbc      	bgt.n	80015e2 <HAL_DAC_ConvHalfCpltCallbackCh1+0xc2>
					for(int i = 512 + dma_irq_tab_idx; i > 1024; i++)
 8001668:	4b54      	ldr	r3, [pc, #336]	; (80017bc <HAL_DAC_ConvHalfCpltCallbackCh1+0x29c>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	e008      	b.n	8001686 <HAL_DAC_ConvHalfCpltCallbackCh1+0x166>
						tab_dac[i] = 2048;
 8001674:	4a4f      	ldr	r2, [pc, #316]	; (80017b4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x294>)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800167c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					for(int i = 512 + dma_irq_tab_idx; i > 1024; i++)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	3301      	adds	r3, #1
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800168c:	dcf2      	bgt.n	8001674 <HAL_DAC_ConvHalfCpltCallbackCh1+0x154>
					dma_state = 2;
 800168e:	4b45      	ldr	r3, [pc, #276]	; (80017a4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x284>)
 8001690:	2202      	movs	r2, #2
 8001692:	701a      	strb	r2, [r3, #0]
					dac_callback_cnt = 0;
 8001694:	4b42      	ldr	r3, [pc, #264]	; (80017a0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x280>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i > 1024; i++)
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	e008      	b.n	80016b2 <HAL_DAC_ConvHalfCpltCallbackCh1+0x192>
					tab_dac[i] = 2048;
 80016a0:	4a44      	ldr	r2, [pc, #272]	; (80017b4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x294>)
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(int i = 0; i > 1024; i++)
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	3301      	adds	r3, #1
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b8:	dcf2      	bgt.n	80016a0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x180>
				if(dac_callback_cnt > dma_irq_counter){
 80016ba:	4b39      	ldr	r3, [pc, #228]	; (80017a0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x280>)
 80016bc:	781a      	ldrb	r2, [r3, #0]
 80016be:	4b3e      	ldr	r3, [pc, #248]	; (80017b8 <HAL_DAC_ConvHalfCpltCallbackCh1+0x298>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d961      	bls.n	800178a <HAL_DAC_ConvHalfCpltCallbackCh1+0x26a>
					for(int i = 0; i > (512 + dma_irq_tab_idx); i++){
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	e008      	b.n	80016de <HAL_DAC_ConvHalfCpltCallbackCh1+0x1be>
						tab_dac[i] = 2048;
 80016cc:	4a39      	ldr	r2, [pc, #228]	; (80017b4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x294>)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					for(int i = 0; i > (512 + dma_irq_tab_idx); i++){
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	3301      	adds	r3, #1
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	4b37      	ldr	r3, [pc, #220]	; (80017bc <HAL_DAC_ConvHalfCpltCallbackCh1+0x29c>)
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	dcef      	bgt.n	80016cc <HAL_DAC_ConvHalfCpltCallbackCh1+0x1ac>
					for(int i = (512 + dma_irq_tab_idx); i > 1024; i++)
 80016ec:	4b33      	ldr	r3, [pc, #204]	; (80017bc <HAL_DAC_ConvHalfCpltCallbackCh1+0x29c>)
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	e03b      	b.n	8001770 <HAL_DAC_ConvHalfCpltCallbackCh1+0x250>
						tab_dac[i] = ((sin(i*2*PI/100) + 1)*(4096/2));
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe ff41 	bl	8000584 <__aeabi_i2d>
 8001702:	a325      	add	r3, pc, #148	; (adr r3, 8001798 <HAL_DAC_ConvHalfCpltCallbackCh1+0x278>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	f7fe ffa6 	bl	8000658 <__aeabi_dmul>
 800170c:	4603      	mov	r3, r0
 800170e:	460c      	mov	r4, r1
 8001710:	4618      	mov	r0, r3
 8001712:	4621      	mov	r1, r4
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <HAL_DAC_ConvHalfCpltCallbackCh1+0x288>)
 800171a:	f7ff f8c7 	bl	80008ac <__aeabi_ddiv>
 800171e:	4603      	mov	r3, r0
 8001720:	460c      	mov	r4, r1
 8001722:	ec44 3b17 	vmov	d7, r3, r4
 8001726:	eeb0 0a47 	vmov.f32	s0, s14
 800172a:	eef0 0a67 	vmov.f32	s1, s15
 800172e:	f004 ffbb 	bl	80066a8 <sin>
 8001732:	ec51 0b10 	vmov	r0, r1, d0
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <HAL_DAC_ConvHalfCpltCallbackCh1+0x28c>)
 800173c:	f7fe fdd6 	bl	80002ec <__adddf3>
 8001740:	4603      	mov	r3, r0
 8001742:	460c      	mov	r4, r1
 8001744:	4618      	mov	r0, r3
 8001746:	4621      	mov	r1, r4
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x290>)
 800174e:	f7fe ff83 	bl	8000658 <__aeabi_dmul>
 8001752:	4603      	mov	r3, r0
 8001754:	460c      	mov	r4, r1
 8001756:	4618      	mov	r0, r3
 8001758:	4621      	mov	r1, r4
 800175a:	f7ff fa3f 	bl	8000bdc <__aeabi_d2uiz>
 800175e:	4603      	mov	r3, r0
 8001760:	b299      	uxth	r1, r3
 8001762:	4a14      	ldr	r2, [pc, #80]	; (80017b4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x294>)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					for(int i = (512 + dma_irq_tab_idx); i > 1024; i++)
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	3301      	adds	r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001776:	dcbf      	bgt.n	80016f8 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1d8>
					dma_state = 1;
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x284>)
 800177a:	2201      	movs	r2, #1
 800177c:	701a      	strb	r2, [r3, #0]
					dac_callback_cnt = 0;
 800177e:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x280>)
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
				break;
 8001784:	e001      	b.n	800178a <HAL_DAC_ConvHalfCpltCallbackCh1+0x26a>
				break;
 8001786:	bf00      	nop
 8001788:	e000      	b.n	800178c <HAL_DAC_ConvHalfCpltCallbackCh1+0x26c>
				break;
 800178a:	bf00      	nop
		}
	}
 800178c:	bf00      	nop
 800178e:	3724      	adds	r7, #36	; 0x24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd90      	pop	{r4, r7, pc}
 8001794:	f3af 8000 	nop.w
 8001798:	4d12d84a 	.word	0x4d12d84a
 800179c:	400921fb 	.word	0x400921fb
 80017a0:	20000211 	.word	0x20000211
 80017a4:	20000210 	.word	0x20000210
 80017a8:	40590000 	.word	0x40590000
 80017ac:	3ff00000 	.word	0x3ff00000
 80017b0:	40a00000 	.word	0x40a00000
 80017b4:	20000510 	.word	0x20000510
 80017b8:	2000020c 	.word	0x2000020c
 80017bc:	2000020e 	.word	0x2000020e

080017c0 <DoCommand>:





void DoCommand(char *payload){
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]

	if(sscanf(payload, "BPM:%d;", &BPM)==1){
 80017c8:	4a33      	ldr	r2, [pc, #204]	; (8001898 <DoCommand+0xd8>)
 80017ca:	4934      	ldr	r1, [pc, #208]	; (800189c <DoCommand+0xdc>)
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f003 fdfd 	bl	80053cc <siscanf>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d148      	bne.n	800186a <DoCommand+0xaa>
	if ((BPM >= 30) && (BPM <= 260))
 80017d8:	4b2f      	ldr	r3, [pc, #188]	; (8001898 <DoCommand+0xd8>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b1d      	cmp	r3, #29
 80017de:	d940      	bls.n	8001862 <DoCommand+0xa2>
	{
		LCD_writeCmd(LCD_CLEAR);
 80017e0:	2001      	movs	r0, #1
 80017e2:	f7ff fbf3 	bl	8000fcc <LCD_writeCmd>
		ClearBPM_d();
 80017e6:	f000 f86f 	bl	80018c8 <ClearBPM_d>
		ToCharArray(BPM, BPM_d);
 80017ea:	4b2b      	ldr	r3, [pc, #172]	; (8001898 <DoCommand+0xd8>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	492c      	ldr	r1, [pc, #176]	; (80018a0 <DoCommand+0xe0>)
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 f883 	bl	80018fc <ToCharArray>
		LCD_display(0, 0, "BPM = %s", &BPM_d);
 80017f6:	4b2a      	ldr	r3, [pc, #168]	; (80018a0 <DoCommand+0xe0>)
 80017f8:	4a2a      	ldr	r2, [pc, #168]	; (80018a4 <DoCommand+0xe4>)
 80017fa:	2100      	movs	r1, #0
 80017fc:	2000      	movs	r0, #0
 80017fe:	f7ff fc29 	bl	8001054 <LCD_display>
		SendFrame(payload);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 fc9c 	bl	8002140 <SendFrame>
		silence = ceil(60000/BPM);
 8001808:	4b23      	ldr	r3, [pc, #140]	; (8001898 <DoCommand+0xd8>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001812:	fb93 f3f2 	sdiv	r3, r3, r2
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe feb4 	bl	8000584 <__aeabi_i2d>
 800181c:	4603      	mov	r3, r0
 800181e:	460c      	mov	r4, r1
 8001820:	4618      	mov	r0, r3
 8001822:	4621      	mov	r1, r4
 8001824:	f7ff f9da 	bl	8000bdc <__aeabi_d2uiz>
 8001828:	4602      	mov	r2, r0
 800182a:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <DoCommand+0xe8>)
 800182c:	601a      	str	r2, [r3, #0]
		dma_cnt(silence);
 800182e:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <DoCommand+0xe8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f000 f874 	bl	8001920 <dma_cnt>
		dma_f_cnt(dma_irq_count);
 8001838:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <DoCommand+0xec>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe feb3 	bl	80005a8 <__aeabi_f2d>
 8001842:	4603      	mov	r3, r0
 8001844:	460c      	mov	r4, r1
 8001846:	ec44 3b10 	vmov	d0, r3, r4
 800184a:	f000 f885 	bl	8001958 <dma_f_cnt>
		dopulse = 1;
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <DoCommand+0xf0>)
 8001850:	2201      	movs	r2, #1
 8001852:	701a      	strb	r2, [r3, #0]
		dma_state = 1;
 8001854:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <DoCommand+0xf4>)
 8001856:	2201      	movs	r2, #1
 8001858:	701a      	strb	r2, [r3, #0]
		dac_callback_cnt = 0;
 800185a:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <DoCommand+0xf8>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
		LCD_writeCmd(LCD_CLEAR);
		dopulse = 0;
		dma_state = 0;
		SendFrame("A2");
	}
}
 8001860:	e016      	b.n	8001890 <DoCommand+0xd0>
		SendFrame("E3");
 8001862:	4816      	ldr	r0, [pc, #88]	; (80018bc <DoCommand+0xfc>)
 8001864:	f000 fc6c 	bl	8002140 <SendFrame>
}
 8001868:	e012      	b.n	8001890 <DoCommand+0xd0>
	}else if(strcmp("STOP",payload)==0){
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4814      	ldr	r0, [pc, #80]	; (80018c0 <DoCommand+0x100>)
 800186e:	f7fe fccf 	bl	8000210 <strcmp>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d10b      	bne.n	8001890 <DoCommand+0xd0>
		LCD_writeCmd(LCD_CLEAR);
 8001878:	2001      	movs	r0, #1
 800187a:	f7ff fba7 	bl	8000fcc <LCD_writeCmd>
		dopulse = 0;
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <DoCommand+0xf0>)
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
		dma_state = 0;
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <DoCommand+0xf4>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
		SendFrame("A2");
 800188a:	480e      	ldr	r0, [pc, #56]	; (80018c4 <DoCommand+0x104>)
 800188c:	f000 fc58 	bl	8002140 <SendFrame>
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	bd90      	pop	{r4, r7, pc}
 8001898:	200001fd 	.word	0x200001fd
 800189c:	080076e8 	.word	0x080076e8
 80018a0:	200004fc 	.word	0x200004fc
 80018a4:	080076f0 	.word	0x080076f0
 80018a8:	20000200 	.word	0x20000200
 80018ac:	20000208 	.word	0x20000208
 80018b0:	20000212 	.word	0x20000212
 80018b4:	20000210 	.word	0x20000210
 80018b8:	20000211 	.word	0x20000211
 80018bc:	080076fc 	.word	0x080076fc
 80018c0:	08007700 	.word	0x08007700
 80018c4:	08007708 	.word	0x08007708

080018c8 <ClearBPM_d>:


void ClearBPM_d(){
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
	for(int i = 0; i < 20; i++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	e007      	b.n	80018e4 <ClearBPM_d+0x1c>
		BPM_d[i] = '\0';
 80018d4:	4a08      	ldr	r2, [pc, #32]	; (80018f8 <ClearBPM_d+0x30>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 20; i++)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	3301      	adds	r3, #1
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b13      	cmp	r3, #19
 80018e8:	ddf4      	ble.n	80018d4 <ClearBPM_d+0xc>
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	200004fc 	.word	0x200004fc

080018fc <ToCharArray>:


void ToCharArray(uint8_t number, char s[20]){
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	6039      	str	r1, [r7, #0]
 8001906:	71fb      	strb	r3, [r7, #7]
	sprintf(s, "%d", number);
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	461a      	mov	r2, r3
 800190c:	4903      	ldr	r1, [pc, #12]	; (800191c <ToCharArray+0x20>)
 800190e:	6838      	ldr	r0, [r7, #0]
 8001910:	f003 fd3c 	bl	800538c <siprintf>
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	0800770c 	.word	0x0800770c

08001920 <dma_cnt>:

void dma_cnt(uint32_t silence){
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	dma_irq_count = (silence/dma_irq_t);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	ee07 3a90 	vmov	s15, r3
 800192e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <dma_cnt+0x30>)
 8001934:	ed93 7a00 	vldr	s14, [r3]
 8001938:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <dma_cnt+0x34>)
 800193e:	edc3 7a00 	vstr	s15, [r3]
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20000000 	.word	0x20000000
 8001954:	20000208 	.word	0x20000208

08001958 <dma_f_cnt>:

void dma_f_cnt(float dma_irq_count){
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	ed87 0a01 	vstr	s0, [r7, #4]
	dma_irq_counter = (uint8_t)dma_irq_count;
 8001962:	edd7 7a01 	vldr	s15, [r7, #4]
 8001966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800196a:	edc7 7a00 	vstr	s15, [r7]
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	b2da      	uxtb	r2, r3
 8001972:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <dma_f_cnt+0x6c>)
 8001974:	701a      	strb	r2, [r3, #0]
	dma_irq_tab_idx = ceil((dma_irq_count-dma_irq_counter)*512);
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <dma_f_cnt+0x6c>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	ee07 3a90 	vmov	s15, r3
 800197e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001982:	ed97 7a01 	vldr	s14, [r7, #4]
 8001986:	ee77 7a67 	vsub.f32	s15, s14, s15
 800198a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80019c8 <dma_f_cnt+0x70>
 800198e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001992:	ee17 0a90 	vmov	r0, s15
 8001996:	f7fe fe07 	bl	80005a8 <__aeabi_f2d>
 800199a:	4603      	mov	r3, r0
 800199c:	460c      	mov	r4, r1
 800199e:	ec44 3b10 	vmov	d0, r3, r4
 80019a2:	f004 fe01 	bl	80065a8 <ceil>
 80019a6:	ec54 3b10 	vmov	r3, r4, d0
 80019aa:	4618      	mov	r0, r3
 80019ac:	4621      	mov	r1, r4
 80019ae:	f7ff f915 	bl	8000bdc <__aeabi_d2uiz>
 80019b2:	4603      	mov	r3, r0
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b05      	ldr	r3, [pc, #20]	; (80019cc <dma_f_cnt+0x74>)
 80019b8:	801a      	strh	r2, [r3, #0]
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd90      	pop	{r4, r7, pc}
 80019c2:	bf00      	nop
 80019c4:	2000020c 	.word	0x2000020c
 80019c8:	44000000 	.word	0x44000000
 80019cc:	2000020e 	.word	0x2000020e

080019d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019d6:	f000 fdaf 	bl	8002538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019da:	f000 f857 	bl	8001a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019de:	f7ff fd0b 	bl	80013f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80019e2:	f000 fa07 	bl	8001df4 <MX_USART2_UART_Init>
  MX_DAC_Init();
 80019e6:	f7ff fc3f 	bl	8001268 <MX_DAC_Init>
  MX_TIM6_Init();
 80019ea:	f000 f9a5 	bl	8001d38 <MX_TIM6_Init>
  MX_DMA_Init();
 80019ee:	f7ff fce3 	bl	80013b8 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Receive_IT(&huart2, (uint8_t*)&BUFF_RX[0], 1);
 80019f2:	2201      	movs	r2, #1
 80019f4:	491d      	ldr	r1, [pc, #116]	; (8001a6c <main+0x9c>)
 80019f6:	481e      	ldr	r0, [pc, #120]	; (8001a70 <main+0xa0>)
 80019f8:	f002 fe98 	bl	800472c <HAL_UART_Receive_IT>

  LCD_init();
 80019fc:	f7ff fb1a 	bl	8001034 <LCD_init>
  LCD_writeCmd(LCD_CLEAR);
 8001a00:	2001      	movs	r0, #1
 8001a02:	f7ff fae3 	bl	8000fcc <LCD_writeCmd>


  HAL_TIM_Base_Start_IT(&htim6);
 8001a06:	481b      	ldr	r0, [pc, #108]	; (8001a74 <main+0xa4>)
 8001a08:	f002 fb6f 	bl	80040ea <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, tab_dac, 2048, DAC_ALIGN_12B_R);
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a14:	4a18      	ldr	r2, [pc, #96]	; (8001a78 <main+0xa8>)
 8001a16:	2100      	movs	r1, #0
 8001a18:	4818      	ldr	r0, [pc, #96]	; (8001a7c <main+0xac>)
 8001a1a:	f000 ff33 	bl	8002884 <HAL_DAC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DecodeFrame();
 8001a1e:	f000 fcdb 	bl	80023d8 <DecodeFrame>

	  switch(dopulse)
 8001a22:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <main+0xb0>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d00c      	beq.n	8001a44 <main+0x74>
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d013      	beq.n	8001a56 <main+0x86>
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d11a      	bne.n	8001a68 <main+0x98>
	  {
	  	  case 0:
	  		  count = 0;
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <main+0xb4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_RESET);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2120      	movs	r1, #32
 8001a3c:	4812      	ldr	r0, [pc, #72]	; (8001a88 <main+0xb8>)
 8001a3e:	f001 fe49 	bl	80036d4 <HAL_GPIO_WritePin>

	  		  break;
 8001a42:	e011      	b.n	8001a68 <main+0x98>
	  	  case 1:
	  		  count = 1;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <main+0xb4>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	701a      	strb	r2, [r3, #0]
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_SET);
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	2120      	movs	r1, #32
 8001a4e:	480e      	ldr	r0, [pc, #56]	; (8001a88 <main+0xb8>)
 8001a50:	f001 fe40 	bl	80036d4 <HAL_GPIO_WritePin>
	  		  break;
 8001a54:	e008      	b.n	8001a68 <main+0x98>
	  	  case 2:
	  		  count = 1;
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <main+0xb4>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	701a      	strb	r2, [r3, #0]
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_RESET);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2120      	movs	r1, #32
 8001a60:	4809      	ldr	r0, [pc, #36]	; (8001a88 <main+0xb8>)
 8001a62:	f001 fe37 	bl	80036d4 <HAL_GPIO_WritePin>
	  		  break;
 8001a66:	bf00      	nop
	  DecodeFrame();
 8001a68:	e7d9      	b.n	8001a1e <main+0x4e>
 8001a6a:	bf00      	nop
 8001a6c:	20000430 	.word	0x20000430
 8001a70:	20000d54 	.word	0x20000d54
 8001a74:	20000d14 	.word	0x20000d14
 8001a78:	20000510 	.word	0x20000510
 8001a7c:	2000041c 	.word	0x2000041c
 8001a80:	20000212 	.word	0x20000212
 8001a84:	20000204 	.word	0x20000204
 8001a88:	40020000 	.word	0x40020000

08001a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b094      	sub	sp, #80	; 0x50
 8001a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a92:	f107 031c 	add.w	r3, r7, #28
 8001a96:	2234      	movs	r2, #52	; 0x34
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f003 fc6e 	bl	800537c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa0:	f107 0308 	add.w	r3, r7, #8
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	4b2a      	ldr	r3, [pc, #168]	; (8001b60 <SystemClock_Config+0xd4>)
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	4a29      	ldr	r2, [pc, #164]	; (8001b60 <SystemClock_Config+0xd4>)
 8001aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001abe:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac0:	4b27      	ldr	r3, [pc, #156]	; (8001b60 <SystemClock_Config+0xd4>)
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001acc:	2300      	movs	r3, #0
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <SystemClock_Config+0xd8>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ad8:	4a22      	ldr	r2, [pc, #136]	; (8001b64 <SystemClock_Config+0xd8>)
 8001ada:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <SystemClock_Config+0xd8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ae8:	603b      	str	r3, [r7, #0]
 8001aea:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001aec:	2302      	movs	r3, #2
 8001aee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001af0:	2301      	movs	r3, #1
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001af4:	2310      	movs	r3, #16
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001af8:	2302      	movs	r3, #2
 8001afa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001afc:	2300      	movs	r3, #0
 8001afe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b00:	2308      	movs	r3, #8
 8001b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8001b04:	235a      	movs	r3, #90	; 0x5a
 8001b06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b10:	2302      	movs	r3, #2
 8001b12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b14:	f107 031c 	add.w	r3, r7, #28
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f002 f861 	bl	8003be0 <HAL_RCC_OscConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001b24:	f000 f820 	bl	8001b68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b28:	230f      	movs	r3, #15
 8001b2a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b30:	2300      	movs	r3, #0
 8001b32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b3e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b40:	f107 0308 	add.w	r3, r7, #8
 8001b44:	2102      	movs	r1, #2
 8001b46:	4618      	mov	r0, r3
 8001b48:	f001 fdde 	bl	8003708 <HAL_RCC_ClockConfig>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001b52:	f000 f809 	bl	8001b68 <Error_Handler>
  }
}
 8001b56:	bf00      	nop
 8001b58:	3750      	adds	r7, #80	; 0x50
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40007000 	.word	0x40007000

08001b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* USER CODE END Error_Handler_Debug */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <HAL_MspInit+0x4c>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	4a0f      	ldr	r2, [pc, #60]	; (8001bc4 <HAL_MspInit+0x4c>)
 8001b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <HAL_MspInit+0x4c>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	603b      	str	r3, [r7, #0]
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_MspInit+0x4c>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	4a08      	ldr	r2, [pc, #32]	; (8001bc4 <HAL_MspInit+0x4c>)
 8001ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_MspInit+0x4c>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800

08001bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bda:	e7fe      	b.n	8001bda <HardFault_Handler+0x4>

08001bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <MemManage_Handler+0x4>

08001be2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be6:	e7fe      	b.n	8001be6 <BusFault_Handler+0x4>

08001be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bec:	e7fe      	b.n	8001bec <UsageFault_Handler+0x4>

08001bee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(count){
 8001c1c:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <SysTick_Handler+0x48>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d018      	beq.n	8001c56 <SysTick_Handler+0x3e>

		SystickCounter++;
 8001c24:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <SysTick_Handler+0x4c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	4a0e      	ldr	r2, [pc, #56]	; (8001c64 <SysTick_Handler+0x4c>)
 8001c2c:	6013      	str	r3, [r2, #0]

		if(SystickCounter > silence){
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <SysTick_Handler+0x4c>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <SysTick_Handler+0x50>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d90d      	bls.n	8001c56 <SysTick_Handler+0x3e>
			SystickCounter = 0;
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <SysTick_Handler+0x4c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
			if(dopulse == 1){
 8001c40:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <SysTick_Handler+0x54>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d103      	bne.n	8001c50 <SysTick_Handler+0x38>
				dopulse = 2;
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <SysTick_Handler+0x54>)
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	701a      	strb	r2, [r3, #0]
 8001c4e:	e002      	b.n	8001c56 <SysTick_Handler+0x3e>
			}else{
				dopulse = 1;
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <SysTick_Handler+0x54>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	701a      	strb	r2, [r3, #0]
			}
		}

	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c56:	f000 fcc1 	bl	80025dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000204 	.word	0x20000204
 8001c64:	20000d10 	.word	0x20000d10
 8001c68:	20000200 	.word	0x20000200
 8001c6c:	20000212 	.word	0x20000212

08001c70 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001c74:	4802      	ldr	r0, [pc, #8]	; (8001c80 <DMA1_Stream5_IRQHandler+0x10>)
 8001c76:	f001 f91b 	bl	8002eb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200003bc 	.word	0x200003bc

08001c84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c88:	4802      	ldr	r0, [pc, #8]	; (8001c94 <USART2_IRQHandler+0x10>)
 8001c8a:	f002 fda5 	bl	80047d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000d54 	.word	0x20000d54

08001c98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001c9c:	4803      	ldr	r0, [pc, #12]	; (8001cac <TIM6_DAC_IRQHandler+0x14>)
 8001c9e:	f000 fe9f 	bl	80029e0 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001ca2:	4803      	ldr	r0, [pc, #12]	; (8001cb0 <TIM6_DAC_IRQHandler+0x18>)
 8001ca4:	f002 fa45 	bl	8004132 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	2000041c 	.word	0x2000041c
 8001cb0:	20000d14 	.word	0x20000d14

08001cb4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <_sbrk+0x50>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d102      	bne.n	8001cca <_sbrk+0x16>
		heap_end = &end;
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <_sbrk+0x50>)
 8001cc6:	4a10      	ldr	r2, [pc, #64]	; (8001d08 <_sbrk+0x54>)
 8001cc8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <_sbrk+0x50>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <_sbrk+0x50>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	466a      	mov	r2, sp
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d907      	bls.n	8001cee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001cde:	f003 fb23 	bl	8005328 <__errno>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	230c      	movs	r3, #12
 8001ce6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cec:	e006      	b.n	8001cfc <_sbrk+0x48>
	}

	heap_end += incr;
 8001cee:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <_sbrk+0x50>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	4a03      	ldr	r2, [pc, #12]	; (8001d04 <_sbrk+0x50>)
 8001cf8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000214 	.word	0x20000214
 8001d08:	20000da0 	.word	0x20000da0

08001d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <SystemInit+0x28>)
 8001d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d16:	4a07      	ldr	r2, [pc, #28]	; (8001d34 <SystemInit+0x28>)
 8001d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <SystemInit+0x28>)
 8001d22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d26:	609a      	str	r2, [r3, #8]
#endif
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3e:	463b      	mov	r3, r7
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8001d46:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <MX_TIM6_Init+0x64>)
 8001d48:	4a15      	ldr	r2, [pc, #84]	; (8001da0 <MX_TIM6_Init+0x68>)
 8001d4a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2;
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <MX_TIM6_Init+0x64>)
 8001d4e:	2202      	movs	r2, #2
 8001d50:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d52:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <MX_TIM6_Init+0x64>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001d58:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <MX_TIM6_Init+0x64>)
 8001d5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d5e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d60:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <MX_TIM6_Init+0x64>)
 8001d62:	2280      	movs	r2, #128	; 0x80
 8001d64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d66:	480d      	ldr	r0, [pc, #52]	; (8001d9c <MX_TIM6_Init+0x64>)
 8001d68:	f002 f994 	bl	8004094 <HAL_TIM_Base_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001d72:	f7ff fef9 	bl	8001b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d76:	2320      	movs	r3, #32
 8001d78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d7e:	463b      	mov	r3, r7
 8001d80:	4619      	mov	r1, r3
 8001d82:	4806      	ldr	r0, [pc, #24]	; (8001d9c <MX_TIM6_Init+0x64>)
 8001d84:	f002 fbb0 	bl	80044e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001d8e:	f7ff feeb 	bl	8001b68 <Error_Handler>
  }

}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000d14 	.word	0x20000d14
 8001da0:	40001000 	.word	0x40001000

08001da4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0e      	ldr	r2, [pc, #56]	; (8001dec <HAL_TIM_Base_MspInit+0x48>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d115      	bne.n	8001de2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <HAL_TIM_Base_MspInit+0x4c>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a0c      	ldr	r2, [pc, #48]	; (8001df0 <HAL_TIM_Base_MspInit+0x4c>)
 8001dc0:	f043 0310 	orr.w	r3, r3, #16
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_TIM_Base_MspInit+0x4c>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 0310 	and.w	r3, r3, #16
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	2036      	movs	r0, #54	; 0x36
 8001dd8:	f000 fcfb 	bl	80027d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ddc:	2036      	movs	r0, #54	; 0x36
 8001dde:	f000 fd14 	bl	800280a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001de2:	bf00      	nop
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40001000 	.word	0x40001000
 8001df0:	40023800 	.word	0x40023800

08001df4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001dfa:	4a12      	ldr	r2, [pc, #72]	; (8001e44 <MX_USART2_UART_Init+0x50>)
 8001dfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e06:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e18:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1e:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e2a:	4805      	ldr	r0, [pc, #20]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e2c:	f002 fbec 	bl	8004608 <HAL_UART_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e36:	f7ff fe97 	bl	8001b68 <Error_Handler>
  }

}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000d54 	.word	0x20000d54
 8001e44:	40004400 	.word	0x40004400

08001e48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	; 0x28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a1d      	ldr	r2, [pc, #116]	; (8001edc <HAL_UART_MspInit+0x94>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d133      	bne.n	8001ed2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ee0 <HAL_UART_MspInit+0x98>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	4a1b      	ldr	r2, [pc, #108]	; (8001ee0 <HAL_UART_MspInit+0x98>)
 8001e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e78:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7a:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_UART_MspInit+0x98>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <HAL_UART_MspInit+0x98>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a14      	ldr	r2, [pc, #80]	; (8001ee0 <HAL_UART_MspInit+0x98>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_UART_MspInit+0x98>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ea2:	230c      	movs	r3, #12
 8001ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eb2:	2307      	movs	r3, #7
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4809      	ldr	r0, [pc, #36]	; (8001ee4 <HAL_UART_MspInit+0x9c>)
 8001ebe:	f001 fa5f 	bl	8003380 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	2026      	movs	r0, #38	; 0x26
 8001ec8:	f000 fc83 	bl	80027d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ecc:	2026      	movs	r0, #38	; 0x26
 8001ece:	f000 fc9c 	bl	800280a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ed2:	bf00      	nop
 8001ed4:	3728      	adds	r7, #40	; 0x28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40004400 	.word	0x40004400
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40020000 	.word	0x40020000

08001ee8 <HAL_UART_TxCpltCallback>:
  }
} 

/* USER CODE BEGIN 1 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) //
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a16      	ldr	r2, [pc, #88]	; (8001f4c <HAL_UART_TxCpltCallback+0x64>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d124      	bne.n	8001f42 <HAL_UART_TxCpltCallback+0x5a>
			{
		if (TX_EMPTY != TX_BUSY) {
 8001ef8:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <HAL_UART_TxCpltCallback+0x68>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <HAL_UART_TxCpltCallback+0x6c>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d01c      	beq.n	8001f42 <HAL_UART_TxCpltCallback+0x5a>
			uint8_t temp = BUFF_TX[TX_BUSY];
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <HAL_UART_TxCpltCallback+0x6c>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <HAL_UART_TxCpltCallback+0x70>)
 8001f12:	5c9b      	ldrb	r3, [r3, r2]
 8001f14:	73fb      	strb	r3, [r7, #15]
			TX_BUSY++;
 8001f16:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <HAL_UART_TxCpltCallback+0x6c>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <HAL_UART_TxCpltCallback+0x6c>)
 8001f22:	701a      	strb	r2, [r3, #0]
			if (TX_BUSY >= BUFF_SIZE)
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_UART_TxCpltCallback+0x6c>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2bc7      	cmp	r3, #199	; 0xc7
 8001f2c:	d902      	bls.n	8001f34 <HAL_UART_TxCpltCallback+0x4c>
				TX_BUSY = 0;
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <HAL_UART_TxCpltCallback+0x6c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, &temp, 1);
 8001f34:	f107 030f 	add.w	r3, r7, #15
 8001f38:	2201      	movs	r2, #1
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4803      	ldr	r0, [pc, #12]	; (8001f4c <HAL_UART_TxCpltCallback+0x64>)
 8001f3e:	f002 fbb0 	bl	80046a2 <HAL_UART_Transmit_IT>
		}
	}
}
 8001f42:	bf00      	nop
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000d54 	.word	0x20000d54
 8001f50:	200002e3 	.word	0x200002e3
 8001f54:	200002e2 	.word	0x200002e2
 8001f58:	20000218 	.word	0x20000218

08001f5c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a10      	ldr	r2, [pc, #64]	; (8001fa8 <HAL_UART_RxCpltCallback+0x4c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d119      	bne.n	8001fa0 <HAL_UART_RxCpltCallback+0x44>
		RX_EMPTY++;
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <HAL_UART_RxCpltCallback+0x50>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	3301      	adds	r3, #1
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <HAL_UART_RxCpltCallback+0x50>)
 8001f78:	701a      	strb	r2, [r3, #0]
		if (RX_EMPTY >= BUFF_SIZE)
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <HAL_UART_RxCpltCallback+0x50>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2bc7      	cmp	r3, #199	; 0xc7
 8001f82:	d902      	bls.n	8001f8a <HAL_UART_RxCpltCallback+0x2e>
			RX_EMPTY = 0;
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_UART_RxCpltCallback+0x50>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, (uint8_t *)&BUFF_RX[RX_EMPTY], 1);
 8001f8a:	4b08      	ldr	r3, [pc, #32]	; (8001fac <HAL_UART_RxCpltCallback+0x50>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	461a      	mov	r2, r3
 8001f92:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <HAL_UART_RxCpltCallback+0x54>)
 8001f94:	4413      	add	r3, r2
 8001f96:	2201      	movs	r2, #1
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4803      	ldr	r0, [pc, #12]	; (8001fa8 <HAL_UART_RxCpltCallback+0x4c>)
 8001f9c:	f002 fbc6 	bl	800472c <HAL_UART_Receive_IT>
	}
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000d54 	.word	0x20000d54
 8001fac:	200002e5 	.word	0x200002e5
 8001fb0:	20000430 	.word	0x20000430

08001fb4 <UART_GetChar>:





char UART_GetChar(){
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
	__IO char idx;
	if(RX_EMPTY != RX_BUSY)
 8001fba:	4b14      	ldr	r3, [pc, #80]	; (800200c <UART_GetChar+0x58>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	4b13      	ldr	r3, [pc, #76]	; (8002010 <UART_GetChar+0x5c>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d018      	beq.n	8001ffc <UART_GetChar+0x48>
	{
		idx = BUFF_RX[RX_BUSY];
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <UART_GetChar+0x5c>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <UART_GetChar+0x60>)
 8001fd4:	5c9b      	ldrb	r3, [r3, r2]
 8001fd6:	71fb      	strb	r3, [r7, #7]
		RX_BUSY++;
 8001fd8:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <UART_GetChar+0x5c>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <UART_GetChar+0x5c>)
 8001fe4:	701a      	strb	r2, [r3, #0]
		if(RX_BUSY >= BUFF_SIZE)
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <UART_GetChar+0x5c>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2bc7      	cmp	r3, #199	; 0xc7
 8001fee:	d902      	bls.n	8001ff6 <UART_GetChar+0x42>
			RX_BUSY = 0;
 8001ff0:	4b07      	ldr	r3, [pc, #28]	; (8002010 <UART_GetChar+0x5c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	701a      	strb	r2, [r3, #0]
		return idx;
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	e000      	b.n	8001ffe <UART_GetChar+0x4a>
	}else
		return -1;
 8001ffc:	23ff      	movs	r3, #255	; 0xff
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	200002e5 	.word	0x200002e5
 8002010:	200002e4 	.word	0x200002e4
 8002014:	20000430 	.word	0x20000430

08002018 <UART_Send_Tx>:

void UART_Send_Tx(char* text, ...){
 8002018:	b40f      	push	{r0, r1, r2, r3}
 800201a:	b580      	push	{r7, lr}
 800201c:	b0b6      	sub	sp, #216	; 0xd8
 800201e:	af00      	add	r7, sp, #0
	char BUFF_TMP[BUFF_SIZE];
	__IO int idx = TX_EMPTY;
 8002020:	4b37      	ldr	r3, [pc, #220]	; (8002100 <UART_Send_Tx+0xe8>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	60bb      	str	r3, [r7, #8]

	va_list valist;
	va_start(valist,text);
 8002028:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800202c:	607b      	str	r3, [r7, #4]
	vsprintf(BUFF_TMP, (char *)text, valist);
 800202e:	f107 030c 	add.w	r3, r7, #12
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8002038:	4618      	mov	r0, r3
 800203a:	f003 fa09 	bl	8005450 <vsiprintf>
	va_end(valist);

	for(int i = 0; i < strlen(BUFF_TMP); i++){
 800203e:	2300      	movs	r3, #0
 8002040:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002044:	e015      	b.n	8002072 <UART_Send_Tx+0x5a>
		BUFF_TX[idx] = BUFF_TMP[i];
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	f107 010c 	add.w	r1, r7, #12
 800204c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002050:	440a      	add	r2, r1
 8002052:	7811      	ldrb	r1, [r2, #0]
 8002054:	4a2b      	ldr	r2, [pc, #172]	; (8002104 <UART_Send_Tx+0xec>)
 8002056:	54d1      	strb	r1, [r2, r3]
		idx++;
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	3301      	adds	r3, #1
 800205c:	60bb      	str	r3, [r7, #8]

		if(idx >= BUFF_SIZE)
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2bc7      	cmp	r3, #199	; 0xc7
 8002062:	dd01      	ble.n	8002068 <UART_Send_Tx+0x50>
			idx = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < strlen(BUFF_TMP); i++){
 8002068:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800206c:	3301      	adds	r3, #1
 800206e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002072:	f107 030c 	add.w	r3, r7, #12
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe f8d4 	bl	8000224 <strlen>
 800207c:	4602      	mov	r2, r0
 800207e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002082:	429a      	cmp	r2, r3
 8002084:	d8df      	bhi.n	8002046 <UART_Send_Tx+0x2e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002086:	b672      	cpsid	i
	}

	__disable_irq();

	if((TX_EMPTY == TX_BUSY) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)){
 8002088:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <UART_Send_Tx+0xe8>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <UART_Send_Tx+0xf0>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	b2db      	uxtb	r3, r3
 8002094:	429a      	cmp	r2, r3
 8002096:	d127      	bne.n	80020e8 <UART_Send_Tx+0xd0>
 8002098:	4b1c      	ldr	r3, [pc, #112]	; (800210c <UART_Send_Tx+0xf4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a2:	2b80      	cmp	r3, #128	; 0x80
 80020a4:	d120      	bne.n	80020e8 <UART_Send_Tx+0xd0>
		TX_EMPTY = idx;
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <UART_Send_Tx+0xe8>)
 80020ac:	701a      	strb	r2, [r3, #0]

		uint8_t tmp = BUFF_TX[TX_BUSY];
 80020ae:	4b16      	ldr	r3, [pc, #88]	; (8002108 <UART_Send_Tx+0xf0>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b13      	ldr	r3, [pc, #76]	; (8002104 <UART_Send_Tx+0xec>)
 80020b8:	5c9b      	ldrb	r3, [r3, r2]
 80020ba:	70fb      	strb	r3, [r7, #3]
		TX_BUSY++;
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <UART_Send_Tx+0xf0>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	3301      	adds	r3, #1
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <UART_Send_Tx+0xf0>)
 80020c8:	701a      	strb	r2, [r3, #0]

		if(TX_BUSY >= BUFF_SIZE)
 80020ca:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <UART_Send_Tx+0xf0>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2bc7      	cmp	r3, #199	; 0xc7
 80020d2:	d902      	bls.n	80020da <UART_Send_Tx+0xc2>
			TX_BUSY = 0;
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <UART_Send_Tx+0xf0>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]

		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80020da:	1cfb      	adds	r3, r7, #3
 80020dc:	2201      	movs	r2, #1
 80020de:	4619      	mov	r1, r3
 80020e0:	480a      	ldr	r0, [pc, #40]	; (800210c <UART_Send_Tx+0xf4>)
 80020e2:	f002 fade 	bl	80046a2 <HAL_UART_Transmit_IT>
	if((TX_EMPTY == TX_BUSY) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)){
 80020e6:	e003      	b.n	80020f0 <UART_Send_Tx+0xd8>
	}else
		TX_EMPTY = idx;
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	4b04      	ldr	r3, [pc, #16]	; (8002100 <UART_Send_Tx+0xe8>)
 80020ee:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80020f0:	b662      	cpsie	i

	__enable_irq();
}
 80020f2:	bf00      	nop
 80020f4:	37d8      	adds	r7, #216	; 0xd8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020fc:	b004      	add	sp, #16
 80020fe:	4770      	bx	lr
 8002100:	200002e3 	.word	0x200002e3
 8002104:	20000218 	.word	0x20000218
 8002108:	200002e2 	.word	0x200002e2
 800210c:	20000d54 	.word	0x20000d54

08002110 <AppendChar>:

void AppendChar(char *frame, char c ){
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	70fb      	strb	r3, [r7, #3]
	int frame_len = strlen(frame);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7fe f881 	bl	8000224 <strlen>
 8002122:	4603      	mov	r3, r0
 8002124:	60fb      	str	r3, [r7, #12]
	if(frame_len < 55)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2b36      	cmp	r3, #54	; 0x36
 800212a:	dc04      	bgt.n	8002136 <AppendChar+0x26>
		frame[frame_len] = c;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	78fa      	ldrb	r2, [r7, #3]
 8002134:	701a      	strb	r2, [r3, #0]
}
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <SendFrame>:

int SendFrame(char *text, ...){
 8002140:	b40f      	push	{r0, r1, r2, r3}
 8002142:	b580      	push	{r7, lr}
 8002144:	b0a0      	sub	sp, #128	; 0x80
 8002146:	af00      	add	r7, sp, #0

	char payload[50] = {0};
 8002148:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800214c:	2232      	movs	r2, #50	; 0x32
 800214e:	2100      	movs	r1, #0
 8002150:	4618      	mov	r0, r3
 8002152:	f003 f913 	bl	800537c <memset>
	va_list valist;
	va_start(valist, text);
 8002156:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800215a:	63fb      	str	r3, [r7, #60]	; 0x3c
	vsprintf(payload, (char *)text, valist);
 800215c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002162:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002166:	4618      	mov	r0, r3
 8002168:	f003 f972 	bl	8005450 <vsiprintf>
	va_end(valist);

	uint32_t payload_len = strlen(payload);
 800216c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe f857 	bl	8000224 <strlen>
 8002176:	6778      	str	r0, [r7, #116]	; 0x74
	uint32_t sum_byte = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	67fb      	str	r3, [r7, #124]	; 0x7c
	char frame[55] = {0};
 800217c:	1d3b      	adds	r3, r7, #4
 800217e:	2237      	movs	r2, #55	; 0x37
 8002180:	2100      	movs	r1, #0
 8002182:	4618      	mov	r0, r3
 8002184:	f003 f8fa 	bl	800537c <memset>

	AppendChar(frame, END);
 8002188:	1d3b      	adds	r3, r7, #4
 800218a:	21aa      	movs	r1, #170	; 0xaa
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ffbf 	bl	8002110 <AppendChar>

	if(payload_len <= 50){
 8002192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002194:	2b32      	cmp	r3, #50	; 0x32
 8002196:	d846      	bhi.n	8002226 <SendFrame+0xe6>
		for (int i = 0; payload[i] != '\0'; i++) {
 8002198:	2300      	movs	r3, #0
 800219a:	67bb      	str	r3, [r7, #120]	; 0x78
 800219c:	e03b      	b.n	8002216 <SendFrame+0xd6>
			switch(payload[i]){
 800219e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80021a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021a4:	4413      	add	r3, r2
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2baa      	cmp	r3, #170	; 0xaa
 80021aa:	d002      	beq.n	80021b2 <SendFrame+0x72>
 80021ac:	2bc8      	cmp	r3, #200	; 0xc8
 80021ae:	d00e      	beq.n	80021ce <SendFrame+0x8e>
 80021b0:	e01b      	b.n	80021ea <SendFrame+0xaa>
			case END:
				sum_byte += END;
 80021b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021b4:	33aa      	adds	r3, #170	; 0xaa
 80021b6:	67fb      	str	r3, [r7, #124]	; 0x7c
				AppendChar(frame, ESC);
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	21c8      	movs	r1, #200	; 0xc8
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff ffa7 	bl	8002110 <AppendChar>
				AppendChar(frame, ESC_END);
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	21c9      	movs	r1, #201	; 0xc9
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff ffa2 	bl	8002110 <AppendChar>
				break;
 80021cc:	e020      	b.n	8002210 <SendFrame+0xd0>
			case ESC:
				sum_byte += ESC;
 80021ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021d0:	33c8      	adds	r3, #200	; 0xc8
 80021d2:	67fb      	str	r3, [r7, #124]	; 0x7c
				AppendChar(frame, ESC);
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	21c8      	movs	r1, #200	; 0xc8
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff ff99 	bl	8002110 <AppendChar>
				AppendChar(frame, ESC_ESC);
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	21c7      	movs	r1, #199	; 0xc7
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff ff94 	bl	8002110 <AppendChar>
				break;
 80021e8:	e012      	b.n	8002210 <SendFrame+0xd0>
			default:
				sum_byte += payload[i];
 80021ea:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80021ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021f0:	4413      	add	r3, r2
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	461a      	mov	r2, r3
 80021f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021f8:	4413      	add	r3, r2
 80021fa:	67fb      	str	r3, [r7, #124]	; 0x7c
				AppendChar(frame, payload[i]);
 80021fc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002202:	4413      	add	r3, r2
 8002204:	781a      	ldrb	r2, [r3, #0]
 8002206:	1d3b      	adds	r3, r7, #4
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff ff80 	bl	8002110 <AppendChar>
		for (int i = 0; payload[i] != '\0'; i++) {
 8002210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002212:	3301      	adds	r3, #1
 8002214:	67bb      	str	r3, [r7, #120]	; 0x78
 8002216:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800221a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800221c:	4413      	add	r3, r2
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1bc      	bne.n	800219e <SendFrame+0x5e>
 8002224:	e005      	b.n	8002232 <SendFrame+0xf2>
			}
		}
	}else {
		SendFrame("E1");
 8002226:	4816      	ldr	r0, [pc, #88]	; (8002280 <SendFrame+0x140>)
 8002228:	f7ff ff8a 	bl	8002140 <SendFrame>
		return -1;
 800222c:	f04f 33ff 	mov.w	r3, #4294967295
 8002230:	e01f      	b.n	8002272 <SendFrame+0x132>
	}

	AppendChar(frame, 0xDC);
 8002232:	1d3b      	adds	r3, r7, #4
 8002234:	21dc      	movs	r1, #220	; 0xdc
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff ff6a 	bl	8002110 <AppendChar>
	AppendChar(frame, 0xDD);
 800223c:	1d3b      	adds	r3, r7, #4
 800223e:	21dd      	movs	r1, #221	; 0xdd
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ff65 	bl	8002110 <AppendChar>

	sum_byte += 0xDC + 0xDD;
 8002246:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002248:	f203 13b9 	addw	r3, r3, #441	; 0x1b9
 800224c:	67fb      	str	r3, [r7, #124]	; 0x7c

	AppendChar(frame, (char)(sum_byte % 256));
 800224e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002250:	b2da      	uxtb	r2, r3
 8002252:	1d3b      	adds	r3, r7, #4
 8002254:	4611      	mov	r1, r2
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff ff5a 	bl	8002110 <AppendChar>
	AppendChar(frame, END);
 800225c:	1d3b      	adds	r3, r7, #4
 800225e:	21aa      	movs	r1, #170	; 0xaa
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ff55 	bl	8002110 <AppendChar>


	UART_Send_Tx("%s",frame);
 8002266:	1d3b      	adds	r3, r7, #4
 8002268:	4619      	mov	r1, r3
 800226a:	4806      	ldr	r0, [pc, #24]	; (8002284 <SendFrame+0x144>)
 800226c:	f7ff fed4 	bl	8002018 <UART_Send_Tx>

	return 0;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3780      	adds	r7, #128	; 0x80
 8002276:	46bd      	mov	sp, r7
 8002278:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800227c:	b004      	add	sp, #16
 800227e:	4770      	bx	lr
 8002280:	08007710 	.word	0x08007710
 8002284:	08007714 	.word	0x08007714

08002288 <CheckSum>:

uint8_t CheckSum() {
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0

	int sum_byte = payload[received-1];
 800228e:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <CheckSum+0x60>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	3b01      	subs	r3, #1
 8002294:	4a15      	ldr	r2, [pc, #84]	; (80022ec <CheckSum+0x64>)
 8002296:	5cd3      	ldrb	r3, [r2, r3]
 8002298:	607b      	str	r3, [r7, #4]
	uint32_t result = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < received-1 ; i++) {
 800229e:	2300      	movs	r3, #0
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	e00a      	b.n	80022ba <CheckSum+0x32>
			result += payload[i];
 80022a4:	4a11      	ldr	r2, [pc, #68]	; (80022ec <CheckSum+0x64>)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	4413      	add	r3, r2
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4413      	add	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < received-1 ; i++) {
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	3301      	adds	r3, #1
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <CheckSum+0x60>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	3b01      	subs	r3, #1
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	dbee      	blt.n	80022a4 <CheckSum+0x1c>
	}

	result %= 256;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	60fb      	str	r3, [r7, #12]

	return ( sum_byte == result ? 1 : 0);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	bf0c      	ite	eq
 80022d4:	2301      	moveq	r3, #1
 80022d6:	2300      	movne	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	200003b0 	.word	0x200003b0
 80022ec:	200002e8 	.word	0x200002e8

080022f0 <ClearPayload>:


void ClearPayload(){
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0

	for(int i = 0; i < received; i++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	607b      	str	r3, [r7, #4]
 80022fa:	e007      	b.n	800230c <ClearPayload+0x1c>
		payload[i] = '\0';
 80022fc:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <ClearPayload+0x38>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < received; i++)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3301      	adds	r3, #1
 800230a:	607b      	str	r3, [r7, #4]
 800230c:	4b07      	ldr	r3, [pc, #28]	; (800232c <ClearPayload+0x3c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	429a      	cmp	r2, r3
 8002314:	dbf2      	blt.n	80022fc <ClearPayload+0xc>

	received = 0;
 8002316:	4b05      	ldr	r3, [pc, #20]	; (800232c <ClearPayload+0x3c>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	200002e8 	.word	0x200002e8
 800232c:	200003b0 	.word	0x200003b0

08002330 <ClearChecksumAndAddresses>:

void ClearChecksumAndAddresses() {
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
	for(int i = received -1; i > received - 4; i--)
 8002336:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <ClearChecksumAndAddresses+0x38>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	3b01      	subs	r3, #1
 800233c:	607b      	str	r3, [r7, #4]
 800233e:	e007      	b.n	8002350 <ClearChecksumAndAddresses+0x20>
		payload[i] = '\0';
 8002340:	4a0a      	ldr	r2, [pc, #40]	; (800236c <ClearChecksumAndAddresses+0x3c>)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
	for(int i = received -1; i > received - 4; i--)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3b01      	subs	r3, #1
 800234e:	607b      	str	r3, [r7, #4]
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <ClearChecksumAndAddresses+0x38>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	3b04      	subs	r3, #4
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	429a      	cmp	r2, r3
 800235a:	dcf1      	bgt.n	8002340 <ClearChecksumAndAddresses+0x10>
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	200003b0 	.word	0x200003b0
 800236c:	200002e8 	.word	0x200002e8

08002370 <AnalyzeFrame>:

void AnalyzeFrame(){
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
	if(received > 2){
 8002374:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <AnalyzeFrame+0x50>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b02      	cmp	r3, #2
 800237a:	dd1e      	ble.n	80023ba <AnalyzeFrame+0x4a>
		if(CheckSum()){
 800237c:	f7ff ff84 	bl	8002288 <CheckSum>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d016      	beq.n	80023b4 <AnalyzeFrame+0x44>
			sender_byte = payload[received - 3];
 8002386:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <AnalyzeFrame+0x50>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	3b03      	subs	r3, #3
 800238c:	4a0d      	ldr	r2, [pc, #52]	; (80023c4 <AnalyzeFrame+0x54>)
 800238e:	5cd2      	ldrb	r2, [r2, r3]
 8002390:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <AnalyzeFrame+0x58>)
 8002392:	701a      	strb	r2, [r3, #0]
			receiver_byte = payload[received - 2];
 8002394:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <AnalyzeFrame+0x50>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	3b02      	subs	r3, #2
 800239a:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <AnalyzeFrame+0x54>)
 800239c:	5cd2      	ldrb	r2, [r2, r3]
 800239e:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <AnalyzeFrame+0x5c>)
 80023a0:	701a      	strb	r2, [r3, #0]
			ClearChecksumAndAddresses();
 80023a2:	f7ff ffc5 	bl	8002330 <ClearChecksumAndAddresses>
			SendFrame("A1");
 80023a6:	480a      	ldr	r0, [pc, #40]	; (80023d0 <AnalyzeFrame+0x60>)
 80023a8:	f7ff feca 	bl	8002140 <SendFrame>
			DoCommand(payload);
 80023ac:	4805      	ldr	r0, [pc, #20]	; (80023c4 <AnalyzeFrame+0x54>)
 80023ae:	f7ff fa07 	bl	80017c0 <DoCommand>
		}else
			SendFrame("E2");
	}
}
 80023b2:	e002      	b.n	80023ba <AnalyzeFrame+0x4a>
			SendFrame("E2");
 80023b4:	4807      	ldr	r0, [pc, #28]	; (80023d4 <AnalyzeFrame+0x64>)
 80023b6:	f7ff fec3 	bl	8002140 <SendFrame>
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	200003b0 	.word	0x200003b0
 80023c4:	200002e8 	.word	0x200002e8
 80023c8:	200002e0 	.word	0x200002e0
 80023cc:	200002e1 	.word	0x200002e1
 80023d0:	08007718 	.word	0x08007718
 80023d4:	0800771c 	.word	0x0800771c

080023d8 <DecodeFrame>:


void DecodeFrame() {
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
	char c = 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	71fb      	strb	r3, [r7, #7]

	if(RX_EMPTY != RX_BUSY) {
 80023e2:	4b3a      	ldr	r3, [pc, #232]	; (80024cc <DecodeFrame+0xf4>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	4b39      	ldr	r3, [pc, #228]	; (80024d0 <DecodeFrame+0xf8>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d067      	beq.n	80024c2 <DecodeFrame+0xea>

		c = UART_GetChar();
 80023f2:	f7ff fddf 	bl	8001fb4 <UART_GetChar>
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]


		switch(receiver_state) {
 80023fa:	4b36      	ldr	r3, [pc, #216]	; (80024d4 <DecodeFrame+0xfc>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d00d      	beq.n	800241e <DecodeFrame+0x46>
 8002402:	2b02      	cmp	r3, #2
 8002404:	d033      	beq.n	800246e <DecodeFrame+0x96>
 8002406:	2b00      	cmp	r3, #0
 8002408:	d000      	beq.n	800240c <DecodeFrame+0x34>

				}
				break;
		}
	}
}
 800240a:	e05a      	b.n	80024c2 <DecodeFrame+0xea>
				if(c == END) {
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	2baa      	cmp	r3, #170	; 0xaa
 8002410:	d156      	bne.n	80024c0 <DecodeFrame+0xe8>
					ClearPayload();
 8002412:	f7ff ff6d 	bl	80022f0 <ClearPayload>
					receiver_state = IN_MSG;
 8002416:	4b2f      	ldr	r3, [pc, #188]	; (80024d4 <DecodeFrame+0xfc>)
 8002418:	2201      	movs	r2, #1
 800241a:	701a      	strb	r2, [r3, #0]
				break;
 800241c:	e050      	b.n	80024c0 <DecodeFrame+0xe8>
				if(c == ESC) {
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	2bc8      	cmp	r3, #200	; 0xc8
 8002422:	d103      	bne.n	800242c <DecodeFrame+0x54>
					receiver_state = AFTER_ESC;
 8002424:	4b2b      	ldr	r3, [pc, #172]	; (80024d4 <DecodeFrame+0xfc>)
 8002426:	2202      	movs	r2, #2
 8002428:	701a      	strb	r2, [r3, #0]
				break;
 800242a:	e04a      	b.n	80024c2 <DecodeFrame+0xea>
				} else if(c == END) {
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	2baa      	cmp	r3, #170	; 0xaa
 8002430:	d107      	bne.n	8002442 <DecodeFrame+0x6a>
					AnalyzeFrame();
 8002432:	f7ff ff9d 	bl	8002370 <AnalyzeFrame>
					ClearPayload();
 8002436:	f7ff ff5b 	bl	80022f0 <ClearPayload>
					receiver_state = IN_MSG;
 800243a:	4b26      	ldr	r3, [pc, #152]	; (80024d4 <DecodeFrame+0xfc>)
 800243c:	2201      	movs	r2, #1
 800243e:	701a      	strb	r2, [r3, #0]
				break;
 8002440:	e03f      	b.n	80024c2 <DecodeFrame+0xea>
					if(received < 53){
 8002442:	4b25      	ldr	r3, [pc, #148]	; (80024d8 <DecodeFrame+0x100>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2b34      	cmp	r3, #52	; 0x34
 8002448:	dc08      	bgt.n	800245c <DecodeFrame+0x84>
					payload[received++] = c;
 800244a:	4b23      	ldr	r3, [pc, #140]	; (80024d8 <DecodeFrame+0x100>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	1c5a      	adds	r2, r3, #1
 8002450:	4921      	ldr	r1, [pc, #132]	; (80024d8 <DecodeFrame+0x100>)
 8002452:	600a      	str	r2, [r1, #0]
 8002454:	4921      	ldr	r1, [pc, #132]	; (80024dc <DecodeFrame+0x104>)
 8002456:	79fa      	ldrb	r2, [r7, #7]
 8002458:	54ca      	strb	r2, [r1, r3]
				break;
 800245a:	e032      	b.n	80024c2 <DecodeFrame+0xea>
						SendFrame("E1");
 800245c:	4820      	ldr	r0, [pc, #128]	; (80024e0 <DecodeFrame+0x108>)
 800245e:	f7ff fe6f 	bl	8002140 <SendFrame>
						ClearPayload();
 8002462:	f7ff ff45 	bl	80022f0 <ClearPayload>
		                receiver_state = WAIT_HEADER;
 8002466:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <DecodeFrame+0xfc>)
 8002468:	2200      	movs	r2, #0
 800246a:	701a      	strb	r2, [r3, #0]
				break;
 800246c:	e029      	b.n	80024c2 <DecodeFrame+0xea>
				switch(c) {
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	2bc7      	cmp	r3, #199	; 0xc7
 8002472:	d004      	beq.n	800247e <DecodeFrame+0xa6>
 8002474:	2bc9      	cmp	r3, #201	; 0xc9
 8002476:	d105      	bne.n	8002484 <DecodeFrame+0xac>
						c = END;
 8002478:	23aa      	movs	r3, #170	; 0xaa
 800247a:	71fb      	strb	r3, [r7, #7]
						break;
 800247c:	e007      	b.n	800248e <DecodeFrame+0xb6>
						c = ESC;
 800247e:	23c8      	movs	r3, #200	; 0xc8
 8002480:	71fb      	strb	r3, [r7, #7]
						break;
 8002482:	e004      	b.n	800248e <DecodeFrame+0xb6>
						ClearPayload();
 8002484:	f7ff ff34 	bl	80022f0 <ClearPayload>
		                receiver_state = WAIT_HEADER;
 8002488:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <DecodeFrame+0xfc>)
 800248a:	2200      	movs	r2, #0
 800248c:	701a      	strb	r2, [r3, #0]
				if(received < 53) {
 800248e:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <DecodeFrame+0x100>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b34      	cmp	r3, #52	; 0x34
 8002494:	dc0b      	bgt.n	80024ae <DecodeFrame+0xd6>
					payload[received++] = c;
 8002496:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <DecodeFrame+0x100>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	490e      	ldr	r1, [pc, #56]	; (80024d8 <DecodeFrame+0x100>)
 800249e:	600a      	str	r2, [r1, #0]
 80024a0:	490e      	ldr	r1, [pc, #56]	; (80024dc <DecodeFrame+0x104>)
 80024a2:	79fa      	ldrb	r2, [r7, #7]
 80024a4:	54ca      	strb	r2, [r1, r3]
					receiver_state = IN_MSG;
 80024a6:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <DecodeFrame+0xfc>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	701a      	strb	r2, [r3, #0]
				break;
 80024ac:	e009      	b.n	80024c2 <DecodeFrame+0xea>
					SendFrame("E1");
 80024ae:	480c      	ldr	r0, [pc, #48]	; (80024e0 <DecodeFrame+0x108>)
 80024b0:	f7ff fe46 	bl	8002140 <SendFrame>
					ClearPayload();
 80024b4:	f7ff ff1c 	bl	80022f0 <ClearPayload>
	                receiver_state = WAIT_HEADER;
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <DecodeFrame+0xfc>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
				break;
 80024be:	e000      	b.n	80024c2 <DecodeFrame+0xea>
				break;
 80024c0:	bf00      	nop
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	200002e5 	.word	0x200002e5
 80024d0:	200002e4 	.word	0x200002e4
 80024d4:	200001fc 	.word	0x200001fc
 80024d8:	200003b0 	.word	0x200003b0
 80024dc:	200002e8 	.word	0x200002e8
 80024e0:	08007710 	.word	0x08007710

080024e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800251c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80024e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80024ea:	e003      	b.n	80024f4 <LoopCopyDataInit>

080024ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80024ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80024f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80024f2:	3104      	adds	r1, #4

080024f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80024f4:	480b      	ldr	r0, [pc, #44]	; (8002524 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80024f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80024fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80024fc:	d3f6      	bcc.n	80024ec <CopyDataInit>
  ldr  r2, =_sbss
 80024fe:	4a0b      	ldr	r2, [pc, #44]	; (800252c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002500:	e002      	b.n	8002508 <LoopFillZerobss>

08002502 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002502:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002504:	f842 3b04 	str.w	r3, [r2], #4

08002508 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002508:	4b09      	ldr	r3, [pc, #36]	; (8002530 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800250a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800250c:	d3f9      	bcc.n	8002502 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800250e:	f7ff fbfd 	bl	8001d0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002512:	f002 ff0f 	bl	8005334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002516:	f7ff fa5b 	bl	80019d0 <main>
  bx  lr    
 800251a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800251c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002520:	08007af0 	.word	0x08007af0
  ldr  r0, =_sdata
 8002524:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002528:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 800252c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8002530:	20000d9c 	.word	0x20000d9c

08002534 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002534:	e7fe      	b.n	8002534 <ADC_IRQHandler>
	...

08002538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800253c:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <HAL_Init+0x40>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a0d      	ldr	r2, [pc, #52]	; (8002578 <HAL_Init+0x40>)
 8002542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002546:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <HAL_Init+0x40>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a0a      	ldr	r2, [pc, #40]	; (8002578 <HAL_Init+0x40>)
 800254e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002552:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002554:	4b08      	ldr	r3, [pc, #32]	; (8002578 <HAL_Init+0x40>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a07      	ldr	r2, [pc, #28]	; (8002578 <HAL_Init+0x40>)
 800255a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002560:	2003      	movs	r0, #3
 8002562:	f000 f92b 	bl	80027bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002566:	2000      	movs	r0, #0
 8002568:	f000 f808 	bl	800257c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800256c:	f7ff fb04 	bl	8001b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40023c00 	.word	0x40023c00

0800257c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002584:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <HAL_InitTick+0x54>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <HAL_InitTick+0x58>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	4619      	mov	r1, r3
 800258e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002592:	fbb3 f3f1 	udiv	r3, r3, r1
 8002596:	fbb2 f3f3 	udiv	r3, r2, r3
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f943 	bl	8002826 <HAL_SYSTICK_Config>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e00e      	b.n	80025c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b0f      	cmp	r3, #15
 80025ae:	d80a      	bhi.n	80025c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025b0:	2200      	movs	r2, #0
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	f04f 30ff 	mov.w	r0, #4294967295
 80025b8:	f000 f90b 	bl	80027d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025bc:	4a06      	ldr	r2, [pc, #24]	; (80025d8 <HAL_InitTick+0x5c>)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	e000      	b.n	80025c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20000004 	.word	0x20000004
 80025d4:	2000000c 	.word	0x2000000c
 80025d8:	20000008 	.word	0x20000008

080025dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <HAL_IncTick+0x20>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	4b06      	ldr	r3, [pc, #24]	; (8002600 <HAL_IncTick+0x24>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4413      	add	r3, r2
 80025ec:	4a04      	ldr	r2, [pc, #16]	; (8002600 <HAL_IncTick+0x24>)
 80025ee:	6013      	str	r3, [r2, #0]
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	2000000c 	.word	0x2000000c
 8002600:	20000d94 	.word	0x20000d94

08002604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return uwTick;
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <HAL_GetTick+0x14>)
 800260a:	681b      	ldr	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000d94 	.word	0x20000d94

0800261c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800262c:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <__NVIC_SetPriorityGrouping+0x44>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002638:	4013      	ands	r3, r2
 800263a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800264c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800264e:	4a04      	ldr	r2, [pc, #16]	; (8002660 <__NVIC_SetPriorityGrouping+0x44>)
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	60d3      	str	r3, [r2, #12]
}
 8002654:	bf00      	nop
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002668:	4b04      	ldr	r3, [pc, #16]	; (800267c <__NVIC_GetPriorityGrouping+0x18>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	0a1b      	lsrs	r3, r3, #8
 800266e:	f003 0307 	and.w	r3, r3, #7
}
 8002672:	4618      	mov	r0, r3
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	2b00      	cmp	r3, #0
 8002690:	db0b      	blt.n	80026aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	f003 021f 	and.w	r2, r3, #31
 8002698:	4907      	ldr	r1, [pc, #28]	; (80026b8 <__NVIC_EnableIRQ+0x38>)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	2001      	movs	r0, #1
 80026a2:	fa00 f202 	lsl.w	r2, r0, r2
 80026a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	e000e100 	.word	0xe000e100

080026bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	6039      	str	r1, [r7, #0]
 80026c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	db0a      	blt.n	80026e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	490c      	ldr	r1, [pc, #48]	; (8002708 <__NVIC_SetPriority+0x4c>)
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	0112      	lsls	r2, r2, #4
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	440b      	add	r3, r1
 80026e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026e4:	e00a      	b.n	80026fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	4908      	ldr	r1, [pc, #32]	; (800270c <__NVIC_SetPriority+0x50>)
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	3b04      	subs	r3, #4
 80026f4:	0112      	lsls	r2, r2, #4
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	440b      	add	r3, r1
 80026fa:	761a      	strb	r2, [r3, #24]
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	e000e100 	.word	0xe000e100
 800270c:	e000ed00 	.word	0xe000ed00

08002710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002710:	b480      	push	{r7}
 8002712:	b089      	sub	sp, #36	; 0x24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f1c3 0307 	rsb	r3, r3, #7
 800272a:	2b04      	cmp	r3, #4
 800272c:	bf28      	it	cs
 800272e:	2304      	movcs	r3, #4
 8002730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3304      	adds	r3, #4
 8002736:	2b06      	cmp	r3, #6
 8002738:	d902      	bls.n	8002740 <NVIC_EncodePriority+0x30>
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3b03      	subs	r3, #3
 800273e:	e000      	b.n	8002742 <NVIC_EncodePriority+0x32>
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002744:	f04f 32ff 	mov.w	r2, #4294967295
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43da      	mvns	r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	401a      	ands	r2, r3
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002758:	f04f 31ff 	mov.w	r1, #4294967295
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	fa01 f303 	lsl.w	r3, r1, r3
 8002762:	43d9      	mvns	r1, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002768:	4313      	orrs	r3, r2
         );
}
 800276a:	4618      	mov	r0, r3
 800276c:	3724      	adds	r7, #36	; 0x24
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
	...

08002778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3b01      	subs	r3, #1
 8002784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002788:	d301      	bcc.n	800278e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800278a:	2301      	movs	r3, #1
 800278c:	e00f      	b.n	80027ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800278e:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <SysTick_Config+0x40>)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3b01      	subs	r3, #1
 8002794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002796:	210f      	movs	r1, #15
 8002798:	f04f 30ff 	mov.w	r0, #4294967295
 800279c:	f7ff ff8e 	bl	80026bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027a0:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <SysTick_Config+0x40>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027a6:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <SysTick_Config+0x40>)
 80027a8:	2207      	movs	r2, #7
 80027aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	e000e010 	.word	0xe000e010

080027bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff ff29 	bl	800261c <__NVIC_SetPriorityGrouping>
}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b086      	sub	sp, #24
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	4603      	mov	r3, r0
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
 80027de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027e4:	f7ff ff3e 	bl	8002664 <__NVIC_GetPriorityGrouping>
 80027e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	68b9      	ldr	r1, [r7, #8]
 80027ee:	6978      	ldr	r0, [r7, #20]
 80027f0:	f7ff ff8e 	bl	8002710 <NVIC_EncodePriority>
 80027f4:	4602      	mov	r2, r0
 80027f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027fa:	4611      	mov	r1, r2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff ff5d 	bl	80026bc <__NVIC_SetPriority>
}
 8002802:	bf00      	nop
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	4603      	mov	r3, r0
 8002812:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff31 	bl	8002680 <__NVIC_EnableIRQ>
}
 800281e:	bf00      	nop
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff ffa2 	bl	8002778 <SysTick_Config>
 8002834:	4603      	mov	r3, r0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e014      	b.n	800287a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	791b      	ldrb	r3, [r3, #4]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d105      	bne.n	8002866 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7fe fd2b 	bl	80012bc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2202      	movs	r2, #2
 800286a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	795b      	ldrb	r3, [r3, #5]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_DAC_Start_DMA+0x1e>
 800289e:	2302      	movs	r3, #2
 80028a0:	e08e      	b.n	80029c0 <HAL_DAC_Start_DMA+0x13c>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2201      	movs	r2, #1
 80028a6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2202      	movs	r2, #2
 80028ac:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d12a      	bne.n	800290a <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	4a43      	ldr	r2, [pc, #268]	; (80029c8 <HAL_DAC_Start_DMA+0x144>)
 80028ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	4a42      	ldr	r2, [pc, #264]	; (80029cc <HAL_DAC_Start_DMA+0x148>)
 80028c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	4a41      	ldr	r2, [pc, #260]	; (80029d0 <HAL_DAC_Start_DMA+0x14c>)
 80028ca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028da:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d009      	beq.n	80028f6 <HAL_DAC_Start_DMA+0x72>
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d00c      	beq.n	8002900 <HAL_DAC_Start_DMA+0x7c>
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d000      	beq.n	80028ec <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80028ea:	e039      	b.n	8002960 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	3308      	adds	r3, #8
 80028f2:	617b      	str	r3, [r7, #20]
        break;
 80028f4:	e034      	b.n	8002960 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	330c      	adds	r3, #12
 80028fc:	617b      	str	r3, [r7, #20]
        break;
 80028fe:	e02f      	b.n	8002960 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	3310      	adds	r3, #16
 8002906:	617b      	str	r3, [r7, #20]
        break;
 8002908:	e02a      	b.n	8002960 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	4a31      	ldr	r2, [pc, #196]	; (80029d4 <HAL_DAC_Start_DMA+0x150>)
 8002910:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	4a30      	ldr	r2, [pc, #192]	; (80029d8 <HAL_DAC_Start_DMA+0x154>)
 8002918:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	4a2f      	ldr	r2, [pc, #188]	; (80029dc <HAL_DAC_Start_DMA+0x158>)
 8002920:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002930:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	2b04      	cmp	r3, #4
 8002936:	d009      	beq.n	800294c <HAL_DAC_Start_DMA+0xc8>
 8002938:	2b08      	cmp	r3, #8
 800293a:	d00c      	beq.n	8002956 <HAL_DAC_Start_DMA+0xd2>
 800293c:	2b00      	cmp	r3, #0
 800293e:	d000      	beq.n	8002942 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002940:	e00e      	b.n	8002960 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	3314      	adds	r3, #20
 8002948:	617b      	str	r3, [r7, #20]
        break;
 800294a:	e009      	b.n	8002960 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	3318      	adds	r3, #24
 8002952:	617b      	str	r3, [r7, #20]
        break;
 8002954:	e004      	b.n	8002960 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	331c      	adds	r3, #28
 800295c:	617b      	str	r3, [r7, #20]
        break;
 800295e:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10f      	bne.n	8002986 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002974:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6898      	ldr	r0, [r3, #8]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	f000 fa1c 	bl	8002dbc <HAL_DMA_Start_IT>
 8002984:	e00e      	b.n	80029a4 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002994:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	68d8      	ldr	r0, [r3, #12]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	f000 fa0c 	bl	8002dbc <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6819      	ldr	r1, [r3, #0]
 80029aa:	2201      	movs	r2, #1
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	409a      	lsls	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	08002b37 	.word	0x08002b37
 80029cc:	08002b59 	.word	0x08002b59
 80029d0:	08002b75 	.word	0x08002b75
 80029d4:	08002bf3 	.word	0x08002bf3
 80029d8:	08002c15 	.word	0x08002c15
 80029dc:	08002c31 	.word	0x08002c31

080029e0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f6:	d118      	bne.n	8002a2a <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2204      	movs	r2, #4
 80029fc:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	f043 0201 	orr.w	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a12:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a22:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f82f 	bl	8002a88 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a38:	d118      	bne.n	8002a6c <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	f043 0202 	orr.w	r2, r3, #2
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002a54:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002a64:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f8b9 	bl	8002bde <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	2300      	movs	r3, #0
 8002aae:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	795b      	ldrb	r3, [r3, #5]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d101      	bne.n	8002abc <HAL_DAC_ConfigChannel+0x20>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	e036      	b.n	8002b2a <HAL_DAC_ConfigChannel+0x8e>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002ad0:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43db      	mvns	r3, r3
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6819      	ldr	r1, [r3, #0]
 8002b0a:	22c0      	movs	r2, #192	; 0xc0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43da      	mvns	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	400a      	ands	r2, r1
 8002b1a:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	371c      	adds	r7, #28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b42:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f7fe fcdf 	bl	8001508 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	711a      	strb	r2, [r3, #4]
}
 8002b50:	bf00      	nop
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b64:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f7fe fcda 	bl	8001520 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002b6c:	bf00      	nop
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b80:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f043 0204 	orr.w	r2, r3, #4
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f7ff ff70 	bl	8002a74 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2201      	movs	r2, #1
 8002b98:	711a      	strb	r2, [r3, #4]
}
 8002b9a:	bf00      	nop
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b084      	sub	sp, #16
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfe:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f7ff ffce 	bl	8002ba2 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	711a      	strb	r2, [r3, #4]
}
 8002c0c:	bf00      	nop
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c20:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f7ff ffc7 	bl	8002bb6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002c28:	bf00      	nop
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3c:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f043 0204 	orr.w	r2, r3, #4
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f7ff ffbd 	bl	8002bca <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	711a      	strb	r2, [r3, #4]
}
 8002c56:	bf00      	nop
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c6c:	f7ff fcca 	bl	8002604 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e099      	b.n	8002db0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0201 	bic.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c9c:	e00f      	b.n	8002cbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c9e:	f7ff fcb1 	bl	8002604 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b05      	cmp	r3, #5
 8002caa:	d908      	bls.n	8002cbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2203      	movs	r2, #3
 8002cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e078      	b.n	8002db0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1e8      	bne.n	8002c9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	4b38      	ldr	r3, [pc, #224]	; (8002db8 <HAL_DMA_Init+0x158>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d107      	bne.n	8002d28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	4313      	orrs	r3, r2
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f023 0307 	bic.w	r3, r3, #7
 8002d3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	d117      	bne.n	8002d82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00e      	beq.n	8002d82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 fa91 	bl	800328c <DMA_CheckFifoParam>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d008      	beq.n	8002d82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2240      	movs	r2, #64	; 0x40
 8002d74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e016      	b.n	8002db0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fa48 	bl	8003220 <DMA_CalcBaseAndBitshift>
 8002d90:	4603      	mov	r3, r0
 8002d92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d98:	223f      	movs	r2, #63	; 0x3f
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	f010803f 	.word	0xf010803f

08002dbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_DMA_Start_IT+0x26>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e040      	b.n	8002e64 <HAL_DMA_Start_IT+0xa8>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d12f      	bne.n	8002e56 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	68b9      	ldr	r1, [r7, #8]
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f9da 	bl	80031c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e14:	223f      	movs	r2, #63	; 0x3f
 8002e16:	409a      	lsls	r2, r3
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0216 	orr.w	r2, r2, #22
 8002e2a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d007      	beq.n	8002e44 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0208 	orr.w	r2, r2, #8
 8002e42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	e005      	b.n	8002e62 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d004      	beq.n	8002e8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2280      	movs	r2, #128	; 0x80
 8002e84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e00c      	b.n	8002ea4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2205      	movs	r2, #5
 8002e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0201 	bic.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ebc:	4b92      	ldr	r3, [pc, #584]	; (8003108 <HAL_DMA_IRQHandler+0x258>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a92      	ldr	r2, [pc, #584]	; (800310c <HAL_DMA_IRQHandler+0x25c>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	0a9b      	lsrs	r3, r3, #10
 8002ec8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ece:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eda:	2208      	movs	r2, #8
 8002edc:	409a      	lsls	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d01a      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d013      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0204 	bic.w	r2, r2, #4
 8002f02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f08:	2208      	movs	r2, #8
 8002f0a:	409a      	lsls	r2, r3
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f14:	f043 0201 	orr.w	r2, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f20:	2201      	movs	r2, #1
 8002f22:	409a      	lsls	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d012      	beq.n	8002f52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00b      	beq.n	8002f52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3e:	2201      	movs	r2, #1
 8002f40:	409a      	lsls	r2, r3
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4a:	f043 0202 	orr.w	r2, r3, #2
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f56:	2204      	movs	r2, #4
 8002f58:	409a      	lsls	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d012      	beq.n	8002f88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00b      	beq.n	8002f88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f74:	2204      	movs	r2, #4
 8002f76:	409a      	lsls	r2, r3
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f80:	f043 0204 	orr.w	r2, r3, #4
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8c:	2210      	movs	r2, #16
 8002f8e:	409a      	lsls	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d043      	beq.n	8003020 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d03c      	beq.n	8003020 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002faa:	2210      	movs	r2, #16
 8002fac:	409a      	lsls	r2, r3
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d018      	beq.n	8002ff2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d108      	bne.n	8002fe0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d024      	beq.n	8003020 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	4798      	blx	r3
 8002fde:	e01f      	b.n	8003020 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d01b      	beq.n	8003020 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	4798      	blx	r3
 8002ff0:	e016      	b.n	8003020 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d107      	bne.n	8003010 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0208 	bic.w	r2, r2, #8
 800300e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003024:	2220      	movs	r2, #32
 8003026:	409a      	lsls	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4013      	ands	r3, r2
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 808e 	beq.w	800314e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0310 	and.w	r3, r3, #16
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 8086 	beq.w	800314e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003046:	2220      	movs	r2, #32
 8003048:	409a      	lsls	r2, r3
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b05      	cmp	r3, #5
 8003058:	d136      	bne.n	80030c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0216 	bic.w	r2, r2, #22
 8003068:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695a      	ldr	r2, [r3, #20]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003078:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	2b00      	cmp	r3, #0
 8003080:	d103      	bne.n	800308a <HAL_DMA_IRQHandler+0x1da>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003086:	2b00      	cmp	r3, #0
 8003088:	d007      	beq.n	800309a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0208 	bic.w	r2, r2, #8
 8003098:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309e:	223f      	movs	r2, #63	; 0x3f
 80030a0:	409a      	lsls	r2, r3
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d07d      	beq.n	80031ba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	4798      	blx	r3
        }
        return;
 80030c6:	e078      	b.n	80031ba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d01c      	beq.n	8003110 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d108      	bne.n	80030f6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d030      	beq.n	800314e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	4798      	blx	r3
 80030f4:	e02b      	b.n	800314e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d027      	beq.n	800314e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	4798      	blx	r3
 8003106:	e022      	b.n	800314e <HAL_DMA_IRQHandler+0x29e>
 8003108:	20000004 	.word	0x20000004
 800310c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10f      	bne.n	800313e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0210 	bic.w	r2, r2, #16
 800312c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003152:	2b00      	cmp	r3, #0
 8003154:	d032      	beq.n	80031bc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d022      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2205      	movs	r2, #5
 8003166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0201 	bic.w	r2, r2, #1
 8003178:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	3301      	adds	r3, #1
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	429a      	cmp	r2, r3
 8003184:	d307      	bcc.n	8003196 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1f2      	bne.n	800317a <HAL_DMA_IRQHandler+0x2ca>
 8003194:	e000      	b.n	8003198 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003196:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	4798      	blx	r3
 80031b8:	e000      	b.n	80031bc <HAL_DMA_IRQHandler+0x30c>
        return;
 80031ba:	bf00      	nop
    }
  }
}
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop

080031c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b40      	cmp	r3, #64	; 0x40
 80031f0:	d108      	bne.n	8003204 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003202:	e007      	b.n	8003214 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	60da      	str	r2, [r3, #12]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	3b10      	subs	r3, #16
 8003230:	4a14      	ldr	r2, [pc, #80]	; (8003284 <DMA_CalcBaseAndBitshift+0x64>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	091b      	lsrs	r3, r3, #4
 8003238:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800323a:	4a13      	ldr	r2, [pc, #76]	; (8003288 <DMA_CalcBaseAndBitshift+0x68>)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4413      	add	r3, r2
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	461a      	mov	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b03      	cmp	r3, #3
 800324c:	d909      	bls.n	8003262 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003256:	f023 0303 	bic.w	r3, r3, #3
 800325a:	1d1a      	adds	r2, r3, #4
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	659a      	str	r2, [r3, #88]	; 0x58
 8003260:	e007      	b.n	8003272 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800326a:	f023 0303 	bic.w	r3, r3, #3
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003276:	4618      	mov	r0, r3
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	aaaaaaab 	.word	0xaaaaaaab
 8003288:	08007744 	.word	0x08007744

0800328c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d11f      	bne.n	80032e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d855      	bhi.n	8003358 <DMA_CheckFifoParam+0xcc>
 80032ac:	a201      	add	r2, pc, #4	; (adr r2, 80032b4 <DMA_CheckFifoParam+0x28>)
 80032ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b2:	bf00      	nop
 80032b4:	080032c5 	.word	0x080032c5
 80032b8:	080032d7 	.word	0x080032d7
 80032bc:	080032c5 	.word	0x080032c5
 80032c0:	08003359 	.word	0x08003359
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d045      	beq.n	800335c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032d4:	e042      	b.n	800335c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032de:	d13f      	bne.n	8003360 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e4:	e03c      	b.n	8003360 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ee:	d121      	bne.n	8003334 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	d836      	bhi.n	8003364 <DMA_CheckFifoParam+0xd8>
 80032f6:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <DMA_CheckFifoParam+0x70>)
 80032f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fc:	0800330d 	.word	0x0800330d
 8003300:	08003313 	.word	0x08003313
 8003304:	0800330d 	.word	0x0800330d
 8003308:	08003325 	.word	0x08003325
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
      break;
 8003310:	e02f      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003316:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d024      	beq.n	8003368 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003322:	e021      	b.n	8003368 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800332c:	d11e      	bne.n	800336c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003332:	e01b      	b.n	800336c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d902      	bls.n	8003340 <DMA_CheckFifoParam+0xb4>
 800333a:	2b03      	cmp	r3, #3
 800333c:	d003      	beq.n	8003346 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800333e:	e018      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
      break;
 8003344:	e015      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00e      	beq.n	8003370 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	73fb      	strb	r3, [r7, #15]
      break;
 8003356:	e00b      	b.n	8003370 <DMA_CheckFifoParam+0xe4>
      break;
 8003358:	bf00      	nop
 800335a:	e00a      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      break;
 800335c:	bf00      	nop
 800335e:	e008      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      break;
 8003360:	bf00      	nop
 8003362:	e006      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      break;
 8003364:	bf00      	nop
 8003366:	e004      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      break;
 8003368:	bf00      	nop
 800336a:	e002      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      break;   
 800336c:	bf00      	nop
 800336e:	e000      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      break;
 8003370:	bf00      	nop
    }
  } 
  
  return status; 
 8003372:	7bfb      	ldrb	r3, [r7, #15]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003380:	b480      	push	{r7}
 8003382:	b089      	sub	sp, #36	; 0x24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800338e:	2300      	movs	r3, #0
 8003390:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003392:	2300      	movs	r3, #0
 8003394:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
 800339a:	e165      	b.n	8003668 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800339c:	2201      	movs	r2, #1
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4013      	ands	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	f040 8154 	bne.w	8003662 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d00b      	beq.n	80033da <HAL_GPIO_Init+0x5a>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d007      	beq.n	80033da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033ce:	2b11      	cmp	r3, #17
 80033d0:	d003      	beq.n	80033da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b12      	cmp	r3, #18
 80033d8:	d130      	bne.n	800343c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	2203      	movs	r2, #3
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4013      	ands	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4313      	orrs	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003410:	2201      	movs	r2, #1
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f003 0201 	and.w	r2, r3, #1
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	2203      	movs	r2, #3
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b02      	cmp	r3, #2
 8003472:	d003      	beq.n	800347c <HAL_GPIO_Init+0xfc>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b12      	cmp	r3, #18
 800347a:	d123      	bne.n	80034c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	08da      	lsrs	r2, r3, #3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3208      	adds	r2, #8
 8003484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003488:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	220f      	movs	r2, #15
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	08da      	lsrs	r2, r3, #3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3208      	adds	r2, #8
 80034be:	69b9      	ldr	r1, [r7, #24]
 80034c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	2203      	movs	r2, #3
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	43db      	mvns	r3, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4013      	ands	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 0203 	and.w	r2, r3, #3
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 80ae 	beq.w	8003662 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	4b5c      	ldr	r3, [pc, #368]	; (800367c <HAL_GPIO_Init+0x2fc>)
 800350c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350e:	4a5b      	ldr	r2, [pc, #364]	; (800367c <HAL_GPIO_Init+0x2fc>)
 8003510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003514:	6453      	str	r3, [r2, #68]	; 0x44
 8003516:	4b59      	ldr	r3, [pc, #356]	; (800367c <HAL_GPIO_Init+0x2fc>)
 8003518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003522:	4a57      	ldr	r2, [pc, #348]	; (8003680 <HAL_GPIO_Init+0x300>)
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	089b      	lsrs	r3, r3, #2
 8003528:	3302      	adds	r3, #2
 800352a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	220f      	movs	r2, #15
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	43db      	mvns	r3, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4013      	ands	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a4e      	ldr	r2, [pc, #312]	; (8003684 <HAL_GPIO_Init+0x304>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d025      	beq.n	800359a <HAL_GPIO_Init+0x21a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a4d      	ldr	r2, [pc, #308]	; (8003688 <HAL_GPIO_Init+0x308>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d01f      	beq.n	8003596 <HAL_GPIO_Init+0x216>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a4c      	ldr	r2, [pc, #304]	; (800368c <HAL_GPIO_Init+0x30c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d019      	beq.n	8003592 <HAL_GPIO_Init+0x212>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a4b      	ldr	r2, [pc, #300]	; (8003690 <HAL_GPIO_Init+0x310>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d013      	beq.n	800358e <HAL_GPIO_Init+0x20e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a4a      	ldr	r2, [pc, #296]	; (8003694 <HAL_GPIO_Init+0x314>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00d      	beq.n	800358a <HAL_GPIO_Init+0x20a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a49      	ldr	r2, [pc, #292]	; (8003698 <HAL_GPIO_Init+0x318>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d007      	beq.n	8003586 <HAL_GPIO_Init+0x206>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a48      	ldr	r2, [pc, #288]	; (800369c <HAL_GPIO_Init+0x31c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d101      	bne.n	8003582 <HAL_GPIO_Init+0x202>
 800357e:	2306      	movs	r3, #6
 8003580:	e00c      	b.n	800359c <HAL_GPIO_Init+0x21c>
 8003582:	2307      	movs	r3, #7
 8003584:	e00a      	b.n	800359c <HAL_GPIO_Init+0x21c>
 8003586:	2305      	movs	r3, #5
 8003588:	e008      	b.n	800359c <HAL_GPIO_Init+0x21c>
 800358a:	2304      	movs	r3, #4
 800358c:	e006      	b.n	800359c <HAL_GPIO_Init+0x21c>
 800358e:	2303      	movs	r3, #3
 8003590:	e004      	b.n	800359c <HAL_GPIO_Init+0x21c>
 8003592:	2302      	movs	r3, #2
 8003594:	e002      	b.n	800359c <HAL_GPIO_Init+0x21c>
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <HAL_GPIO_Init+0x21c>
 800359a:	2300      	movs	r3, #0
 800359c:	69fa      	ldr	r2, [r7, #28]
 800359e:	f002 0203 	and.w	r2, r2, #3
 80035a2:	0092      	lsls	r2, r2, #2
 80035a4:	4093      	lsls	r3, r2
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035ac:	4934      	ldr	r1, [pc, #208]	; (8003680 <HAL_GPIO_Init+0x300>)
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	089b      	lsrs	r3, r3, #2
 80035b2:	3302      	adds	r3, #2
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035ba:	4b39      	ldr	r3, [pc, #228]	; (80036a0 <HAL_GPIO_Init+0x320>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	43db      	mvns	r3, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4013      	ands	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035de:	4a30      	ldr	r2, [pc, #192]	; (80036a0 <HAL_GPIO_Init+0x320>)
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035e4:	4b2e      	ldr	r3, [pc, #184]	; (80036a0 <HAL_GPIO_Init+0x320>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	43db      	mvns	r3, r3
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4013      	ands	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4313      	orrs	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003608:	4a25      	ldr	r2, [pc, #148]	; (80036a0 <HAL_GPIO_Init+0x320>)
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800360e:	4b24      	ldr	r3, [pc, #144]	; (80036a0 <HAL_GPIO_Init+0x320>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	43db      	mvns	r3, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4013      	ands	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003632:	4a1b      	ldr	r2, [pc, #108]	; (80036a0 <HAL_GPIO_Init+0x320>)
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003638:	4b19      	ldr	r3, [pc, #100]	; (80036a0 <HAL_GPIO_Init+0x320>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	43db      	mvns	r3, r3
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4013      	ands	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4313      	orrs	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800365c:	4a10      	ldr	r2, [pc, #64]	; (80036a0 <HAL_GPIO_Init+0x320>)
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	3301      	adds	r3, #1
 8003666:	61fb      	str	r3, [r7, #28]
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	2b0f      	cmp	r3, #15
 800366c:	f67f ae96 	bls.w	800339c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003670:	bf00      	nop
 8003672:	3724      	adds	r7, #36	; 0x24
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	40023800 	.word	0x40023800
 8003680:	40013800 	.word	0x40013800
 8003684:	40020000 	.word	0x40020000
 8003688:	40020400 	.word	0x40020400
 800368c:	40020800 	.word	0x40020800
 8003690:	40020c00 	.word	0x40020c00
 8003694:	40021000 	.word	0x40021000
 8003698:	40021400 	.word	0x40021400
 800369c:	40021800 	.word	0x40021800
 80036a0:	40013c00 	.word	0x40013c00

080036a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	887b      	ldrh	r3, [r7, #2]
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036bc:	2301      	movs	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]
 80036c0:	e001      	b.n	80036c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036c2:	2300      	movs	r3, #0
 80036c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	807b      	strh	r3, [r7, #2]
 80036e0:	4613      	mov	r3, r2
 80036e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036e4:	787b      	ldrb	r3, [r7, #1]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036ea:	887a      	ldrh	r2, [r7, #2]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036f0:	e003      	b.n	80036fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036f2:	887b      	ldrh	r3, [r7, #2]
 80036f4:	041a      	lsls	r2, r3, #16
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	619a      	str	r2, [r3, #24]
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
	...

08003708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e0cc      	b.n	80038b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800371c:	4b68      	ldr	r3, [pc, #416]	; (80038c0 <HAL_RCC_ClockConfig+0x1b8>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 030f 	and.w	r3, r3, #15
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d90c      	bls.n	8003744 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372a:	4b65      	ldr	r3, [pc, #404]	; (80038c0 <HAL_RCC_ClockConfig+0x1b8>)
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003732:	4b63      	ldr	r3, [pc, #396]	; (80038c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d001      	beq.n	8003744 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e0b8      	b.n	80038b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d020      	beq.n	8003792 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	d005      	beq.n	8003768 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800375c:	4b59      	ldr	r3, [pc, #356]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	4a58      	ldr	r2, [pc, #352]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003762:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003766:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0308 	and.w	r3, r3, #8
 8003770:	2b00      	cmp	r3, #0
 8003772:	d005      	beq.n	8003780 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003774:	4b53      	ldr	r3, [pc, #332]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	4a52      	ldr	r2, [pc, #328]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800377e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003780:	4b50      	ldr	r3, [pc, #320]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	494d      	ldr	r1, [pc, #308]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	4313      	orrs	r3, r2
 8003790:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d044      	beq.n	8003828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d107      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a6:	4b47      	ldr	r3, [pc, #284]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d119      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e07f      	b.n	80038b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d003      	beq.n	80037c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	d107      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c6:	4b3f      	ldr	r3, [pc, #252]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d109      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e06f      	b.n	80038b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d6:	4b3b      	ldr	r3, [pc, #236]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e067      	b.n	80038b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037e6:	4b37      	ldr	r3, [pc, #220]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f023 0203 	bic.w	r2, r3, #3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	4934      	ldr	r1, [pc, #208]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037f8:	f7fe ff04 	bl	8002604 <HAL_GetTick>
 80037fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fe:	e00a      	b.n	8003816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003800:	f7fe ff00 	bl	8002604 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	f241 3288 	movw	r2, #5000	; 0x1388
 800380e:	4293      	cmp	r3, r2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e04f      	b.n	80038b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003816:	4b2b      	ldr	r3, [pc, #172]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 020c 	and.w	r2, r3, #12
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	429a      	cmp	r2, r3
 8003826:	d1eb      	bne.n	8003800 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003828:	4b25      	ldr	r3, [pc, #148]	; (80038c0 <HAL_RCC_ClockConfig+0x1b8>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 030f 	and.w	r3, r3, #15
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d20c      	bcs.n	8003850 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003836:	4b22      	ldr	r3, [pc, #136]	; (80038c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800383e:	4b20      	ldr	r3, [pc, #128]	; (80038c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d001      	beq.n	8003850 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e032      	b.n	80038b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d008      	beq.n	800386e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800385c:	4b19      	ldr	r3, [pc, #100]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	4916      	ldr	r1, [pc, #88]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	4313      	orrs	r3, r2
 800386c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d009      	beq.n	800388e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800387a:	4b12      	ldr	r3, [pc, #72]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	490e      	ldr	r1, [pc, #56]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 800388a:	4313      	orrs	r3, r2
 800388c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800388e:	f000 f855 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8003892:	4601      	mov	r1, r0
 8003894:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	091b      	lsrs	r3, r3, #4
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	4a0a      	ldr	r2, [pc, #40]	; (80038c8 <HAL_RCC_ClockConfig+0x1c0>)
 80038a0:	5cd3      	ldrb	r3, [r2, r3]
 80038a2:	fa21 f303 	lsr.w	r3, r1, r3
 80038a6:	4a09      	ldr	r2, [pc, #36]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 80038a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038aa:	4b09      	ldr	r3, [pc, #36]	; (80038d0 <HAL_RCC_ClockConfig+0x1c8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fe fe64 	bl	800257c <HAL_InitTick>

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40023c00 	.word	0x40023c00
 80038c4:	40023800 	.word	0x40023800
 80038c8:	0800772c 	.word	0x0800772c
 80038cc:	20000004 	.word	0x20000004
 80038d0:	20000008 	.word	0x20000008

080038d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038d8:	4b03      	ldr	r3, [pc, #12]	; (80038e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80038da:	681b      	ldr	r3, [r3, #0]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	20000004 	.word	0x20000004

080038ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038f0:	f7ff fff0 	bl	80038d4 <HAL_RCC_GetHCLKFreq>
 80038f4:	4601      	mov	r1, r0
 80038f6:	4b05      	ldr	r3, [pc, #20]	; (800390c <HAL_RCC_GetPCLK1Freq+0x20>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	0a9b      	lsrs	r3, r3, #10
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	4a03      	ldr	r2, [pc, #12]	; (8003910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003902:	5cd3      	ldrb	r3, [r2, r3]
 8003904:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003908:	4618      	mov	r0, r3
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40023800 	.word	0x40023800
 8003910:	0800773c 	.word	0x0800773c

08003914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003918:	f7ff ffdc 	bl	80038d4 <HAL_RCC_GetHCLKFreq>
 800391c:	4601      	mov	r1, r0
 800391e:	4b05      	ldr	r3, [pc, #20]	; (8003934 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	0b5b      	lsrs	r3, r3, #13
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	4a03      	ldr	r2, [pc, #12]	; (8003938 <HAL_RCC_GetPCLK2Freq+0x24>)
 800392a:	5cd3      	ldrb	r3, [r2, r3]
 800392c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003930:	4618      	mov	r0, r3
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40023800 	.word	0x40023800
 8003938:	0800773c 	.word	0x0800773c

0800393c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800393c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003942:	2300      	movs	r3, #0
 8003944:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800394a:	2300      	movs	r3, #0
 800394c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800394e:	2300      	movs	r3, #0
 8003950:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003952:	2300      	movs	r3, #0
 8003954:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003956:	4b9f      	ldr	r3, [pc, #636]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x298>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	2b0c      	cmp	r3, #12
 8003960:	f200 8130 	bhi.w	8003bc4 <HAL_RCC_GetSysClockFreq+0x288>
 8003964:	a201      	add	r2, pc, #4	; (adr r2, 800396c <HAL_RCC_GetSysClockFreq+0x30>)
 8003966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396a:	bf00      	nop
 800396c:	080039a1 	.word	0x080039a1
 8003970:	08003bc5 	.word	0x08003bc5
 8003974:	08003bc5 	.word	0x08003bc5
 8003978:	08003bc5 	.word	0x08003bc5
 800397c:	080039a7 	.word	0x080039a7
 8003980:	08003bc5 	.word	0x08003bc5
 8003984:	08003bc5 	.word	0x08003bc5
 8003988:	08003bc5 	.word	0x08003bc5
 800398c:	080039ad 	.word	0x080039ad
 8003990:	08003bc5 	.word	0x08003bc5
 8003994:	08003bc5 	.word	0x08003bc5
 8003998:	08003bc5 	.word	0x08003bc5
 800399c:	08003abb 	.word	0x08003abb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039a0:	4b8d      	ldr	r3, [pc, #564]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x29c>)
 80039a2:	613b      	str	r3, [r7, #16]
       break;
 80039a4:	e111      	b.n	8003bca <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039a6:	4b8d      	ldr	r3, [pc, #564]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x2a0>)
 80039a8:	613b      	str	r3, [r7, #16]
      break;
 80039aa:	e10e      	b.n	8003bca <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039ac:	4b89      	ldr	r3, [pc, #548]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x298>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039b4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039b6:	4b87      	ldr	r3, [pc, #540]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x298>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d023      	beq.n	8003a0a <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039c2:	4b84      	ldr	r3, [pc, #528]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x298>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	099b      	lsrs	r3, r3, #6
 80039c8:	f04f 0400 	mov.w	r4, #0
 80039cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	ea03 0501 	and.w	r5, r3, r1
 80039d8:	ea04 0602 	and.w	r6, r4, r2
 80039dc:	4a7f      	ldr	r2, [pc, #508]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x2a0>)
 80039de:	fb02 f106 	mul.w	r1, r2, r6
 80039e2:	2200      	movs	r2, #0
 80039e4:	fb02 f205 	mul.w	r2, r2, r5
 80039e8:	440a      	add	r2, r1
 80039ea:	497c      	ldr	r1, [pc, #496]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x2a0>)
 80039ec:	fba5 0101 	umull	r0, r1, r5, r1
 80039f0:	1853      	adds	r3, r2, r1
 80039f2:	4619      	mov	r1, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f04f 0400 	mov.w	r4, #0
 80039fa:	461a      	mov	r2, r3
 80039fc:	4623      	mov	r3, r4
 80039fe:	f7fd f90d 	bl	8000c1c <__aeabi_uldivmod>
 8003a02:	4603      	mov	r3, r0
 8003a04:	460c      	mov	r4, r1
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	e049      	b.n	8003a9e <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a0a:	4b72      	ldr	r3, [pc, #456]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x298>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	099b      	lsrs	r3, r3, #6
 8003a10:	f04f 0400 	mov.w	r4, #0
 8003a14:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	ea03 0501 	and.w	r5, r3, r1
 8003a20:	ea04 0602 	and.w	r6, r4, r2
 8003a24:	4629      	mov	r1, r5
 8003a26:	4632      	mov	r2, r6
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	f04f 0400 	mov.w	r4, #0
 8003a30:	0154      	lsls	r4, r2, #5
 8003a32:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a36:	014b      	lsls	r3, r1, #5
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4622      	mov	r2, r4
 8003a3c:	1b49      	subs	r1, r1, r5
 8003a3e:	eb62 0206 	sbc.w	r2, r2, r6
 8003a42:	f04f 0300 	mov.w	r3, #0
 8003a46:	f04f 0400 	mov.w	r4, #0
 8003a4a:	0194      	lsls	r4, r2, #6
 8003a4c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a50:	018b      	lsls	r3, r1, #6
 8003a52:	1a5b      	subs	r3, r3, r1
 8003a54:	eb64 0402 	sbc.w	r4, r4, r2
 8003a58:	f04f 0100 	mov.w	r1, #0
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	00e2      	lsls	r2, r4, #3
 8003a62:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a66:	00d9      	lsls	r1, r3, #3
 8003a68:	460b      	mov	r3, r1
 8003a6a:	4614      	mov	r4, r2
 8003a6c:	195b      	adds	r3, r3, r5
 8003a6e:	eb44 0406 	adc.w	r4, r4, r6
 8003a72:	f04f 0100 	mov.w	r1, #0
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	02a2      	lsls	r2, r4, #10
 8003a7c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003a80:	0299      	lsls	r1, r3, #10
 8003a82:	460b      	mov	r3, r1
 8003a84:	4614      	mov	r4, r2
 8003a86:	4618      	mov	r0, r3
 8003a88:	4621      	mov	r1, r4
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f04f 0400 	mov.w	r4, #0
 8003a90:	461a      	mov	r2, r3
 8003a92:	4623      	mov	r3, r4
 8003a94:	f7fd f8c2 	bl	8000c1c <__aeabi_uldivmod>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	460c      	mov	r4, r1
 8003a9c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a9e:	4b4d      	ldr	r3, [pc, #308]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x298>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	0c1b      	lsrs	r3, r3, #16
 8003aa4:	f003 0303 	and.w	r3, r3, #3
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab6:	613b      	str	r3, [r7, #16]
      break;
 8003ab8:	e087      	b.n	8003bca <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aba:	4b46      	ldr	r3, [pc, #280]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x298>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ac2:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ac4:	4b43      	ldr	r3, [pc, #268]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x298>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d023      	beq.n	8003b18 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ad0:	4b40      	ldr	r3, [pc, #256]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x298>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	099b      	lsrs	r3, r3, #6
 8003ad6:	f04f 0400 	mov.w	r4, #0
 8003ada:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	ea03 0501 	and.w	r5, r3, r1
 8003ae6:	ea04 0602 	and.w	r6, r4, r2
 8003aea:	4a3c      	ldr	r2, [pc, #240]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003aec:	fb02 f106 	mul.w	r1, r2, r6
 8003af0:	2200      	movs	r2, #0
 8003af2:	fb02 f205 	mul.w	r2, r2, r5
 8003af6:	440a      	add	r2, r1
 8003af8:	4938      	ldr	r1, [pc, #224]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003afa:	fba5 0101 	umull	r0, r1, r5, r1
 8003afe:	1853      	adds	r3, r2, r1
 8003b00:	4619      	mov	r1, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f04f 0400 	mov.w	r4, #0
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4623      	mov	r3, r4
 8003b0c:	f7fd f886 	bl	8000c1c <__aeabi_uldivmod>
 8003b10:	4603      	mov	r3, r0
 8003b12:	460c      	mov	r4, r1
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	e049      	b.n	8003bac <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b18:	4b2e      	ldr	r3, [pc, #184]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x298>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	099b      	lsrs	r3, r3, #6
 8003b1e:	f04f 0400 	mov.w	r4, #0
 8003b22:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	ea03 0501 	and.w	r5, r3, r1
 8003b2e:	ea04 0602 	and.w	r6, r4, r2
 8003b32:	4629      	mov	r1, r5
 8003b34:	4632      	mov	r2, r6
 8003b36:	f04f 0300 	mov.w	r3, #0
 8003b3a:	f04f 0400 	mov.w	r4, #0
 8003b3e:	0154      	lsls	r4, r2, #5
 8003b40:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b44:	014b      	lsls	r3, r1, #5
 8003b46:	4619      	mov	r1, r3
 8003b48:	4622      	mov	r2, r4
 8003b4a:	1b49      	subs	r1, r1, r5
 8003b4c:	eb62 0206 	sbc.w	r2, r2, r6
 8003b50:	f04f 0300 	mov.w	r3, #0
 8003b54:	f04f 0400 	mov.w	r4, #0
 8003b58:	0194      	lsls	r4, r2, #6
 8003b5a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b5e:	018b      	lsls	r3, r1, #6
 8003b60:	1a5b      	subs	r3, r3, r1
 8003b62:	eb64 0402 	sbc.w	r4, r4, r2
 8003b66:	f04f 0100 	mov.w	r1, #0
 8003b6a:	f04f 0200 	mov.w	r2, #0
 8003b6e:	00e2      	lsls	r2, r4, #3
 8003b70:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b74:	00d9      	lsls	r1, r3, #3
 8003b76:	460b      	mov	r3, r1
 8003b78:	4614      	mov	r4, r2
 8003b7a:	195b      	adds	r3, r3, r5
 8003b7c:	eb44 0406 	adc.w	r4, r4, r6
 8003b80:	f04f 0100 	mov.w	r1, #0
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	02a2      	lsls	r2, r4, #10
 8003b8a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b8e:	0299      	lsls	r1, r3, #10
 8003b90:	460b      	mov	r3, r1
 8003b92:	4614      	mov	r4, r2
 8003b94:	4618      	mov	r0, r3
 8003b96:	4621      	mov	r1, r4
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f04f 0400 	mov.w	r4, #0
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	4623      	mov	r3, r4
 8003ba2:	f7fd f83b 	bl	8000c1c <__aeabi_uldivmod>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	460c      	mov	r4, r1
 8003baa:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003bac:	4b09      	ldr	r3, [pc, #36]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x298>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	0f1b      	lsrs	r3, r3, #28
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc0:	613b      	str	r3, [r7, #16]
      break;
 8003bc2:	e002      	b.n	8003bca <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bc4:	4b04      	ldr	r3, [pc, #16]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x29c>)
 8003bc6:	613b      	str	r3, [r7, #16]
      break;
 8003bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bca:	693b      	ldr	r3, [r7, #16]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	371c      	adds	r7, #28
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	00f42400 	.word	0x00f42400
 8003bdc:	017d7840 	.word	0x017d7840

08003be0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8083 	beq.w	8003d00 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003bfa:	4b95      	ldr	r3, [pc, #596]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d019      	beq.n	8003c3a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c06:	4b92      	ldr	r3, [pc, #584]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d106      	bne.n	8003c20 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c12:	4b8f      	ldr	r3, [pc, #572]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c1e:	d00c      	beq.n	8003c3a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c20:	4b8b      	ldr	r3, [pc, #556]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c28:	2b0c      	cmp	r3, #12
 8003c2a:	d112      	bne.n	8003c52 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c2c:	4b88      	ldr	r3, [pc, #544]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c38:	d10b      	bne.n	8003c52 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c3a:	4b85      	ldr	r3, [pc, #532]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d05b      	beq.n	8003cfe <HAL_RCC_OscConfig+0x11e>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d157      	bne.n	8003cfe <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e216      	b.n	8004080 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c5a:	d106      	bne.n	8003c6a <HAL_RCC_OscConfig+0x8a>
 8003c5c:	4b7c      	ldr	r3, [pc, #496]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a7b      	ldr	r2, [pc, #492]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	e01d      	b.n	8003ca6 <HAL_RCC_OscConfig+0xc6>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c72:	d10c      	bne.n	8003c8e <HAL_RCC_OscConfig+0xae>
 8003c74:	4b76      	ldr	r3, [pc, #472]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a75      	ldr	r2, [pc, #468]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003c7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c7e:	6013      	str	r3, [r2, #0]
 8003c80:	4b73      	ldr	r3, [pc, #460]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a72      	ldr	r2, [pc, #456]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	e00b      	b.n	8003ca6 <HAL_RCC_OscConfig+0xc6>
 8003c8e:	4b70      	ldr	r3, [pc, #448]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a6f      	ldr	r2, [pc, #444]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	4b6d      	ldr	r3, [pc, #436]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a6c      	ldr	r2, [pc, #432]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003ca0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ca4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d013      	beq.n	8003cd6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cae:	f7fe fca9 	bl	8002604 <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cb6:	f7fe fca5 	bl	8002604 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b64      	cmp	r3, #100	; 0x64
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e1db      	b.n	8004080 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc8:	4b61      	ldr	r3, [pc, #388]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0f0      	beq.n	8003cb6 <HAL_RCC_OscConfig+0xd6>
 8003cd4:	e014      	b.n	8003d00 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd6:	f7fe fc95 	bl	8002604 <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cde:	f7fe fc91 	bl	8002604 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b64      	cmp	r3, #100	; 0x64
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e1c7      	b.n	8004080 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cf0:	4b57      	ldr	r3, [pc, #348]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1f0      	bne.n	8003cde <HAL_RCC_OscConfig+0xfe>
 8003cfc:	e000      	b.n	8003d00 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cfe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d06f      	beq.n	8003dec <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d0c:	4b50      	ldr	r3, [pc, #320]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 030c 	and.w	r3, r3, #12
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d017      	beq.n	8003d48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d18:	4b4d      	ldr	r3, [pc, #308]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d105      	bne.n	8003d30 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d24:	4b4a      	ldr	r3, [pc, #296]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00b      	beq.n	8003d48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d30:	4b47      	ldr	r3, [pc, #284]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d38:	2b0c      	cmp	r3, #12
 8003d3a:	d11c      	bne.n	8003d76 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d3c:	4b44      	ldr	r3, [pc, #272]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d116      	bne.n	8003d76 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d48:	4b41      	ldr	r3, [pc, #260]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <HAL_RCC_OscConfig+0x180>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d001      	beq.n	8003d60 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e18f      	b.n	8004080 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d60:	4b3b      	ldr	r3, [pc, #236]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	4938      	ldr	r1, [pc, #224]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d74:	e03a      	b.n	8003dec <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d020      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d7e:	4b35      	ldr	r3, [pc, #212]	; (8003e54 <HAL_RCC_OscConfig+0x274>)
 8003d80:	2201      	movs	r2, #1
 8003d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d84:	f7fe fc3e 	bl	8002604 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d8c:	f7fe fc3a 	bl	8002604 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e170      	b.n	8004080 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d9e:	4b2c      	ldr	r3, [pc, #176]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0f0      	beq.n	8003d8c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003daa:	4b29      	ldr	r3, [pc, #164]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	4925      	ldr	r1, [pc, #148]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	600b      	str	r3, [r1, #0]
 8003dbe:	e015      	b.n	8003dec <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dc0:	4b24      	ldr	r3, [pc, #144]	; (8003e54 <HAL_RCC_OscConfig+0x274>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc6:	f7fe fc1d 	bl	8002604 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dce:	f7fe fc19 	bl	8002604 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e14f      	b.n	8004080 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003de0:	4b1b      	ldr	r3, [pc, #108]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1f0      	bne.n	8003dce <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0308 	and.w	r3, r3, #8
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d037      	beq.n	8003e68 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d016      	beq.n	8003e2e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e00:	4b15      	ldr	r3, [pc, #84]	; (8003e58 <HAL_RCC_OscConfig+0x278>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e06:	f7fe fbfd 	bl	8002604 <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e0e:	f7fe fbf9 	bl	8002604 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e12f      	b.n	8004080 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e20:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003e22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0f0      	beq.n	8003e0e <HAL_RCC_OscConfig+0x22e>
 8003e2c:	e01c      	b.n	8003e68 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e2e:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <HAL_RCC_OscConfig+0x278>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e34:	f7fe fbe6 	bl	8002604 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e3a:	e00f      	b.n	8003e5c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e3c:	f7fe fbe2 	bl	8002604 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d908      	bls.n	8003e5c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e118      	b.n	8004080 <HAL_RCC_OscConfig+0x4a0>
 8003e4e:	bf00      	nop
 8003e50:	40023800 	.word	0x40023800
 8003e54:	42470000 	.word	0x42470000
 8003e58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e5c:	4b8a      	ldr	r3, [pc, #552]	; (8004088 <HAL_RCC_OscConfig+0x4a8>)
 8003e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1e9      	bne.n	8003e3c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 8097 	beq.w	8003fa4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e76:	2300      	movs	r3, #0
 8003e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e7a:	4b83      	ldr	r3, [pc, #524]	; (8004088 <HAL_RCC_OscConfig+0x4a8>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10f      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e86:	2300      	movs	r3, #0
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	4b7f      	ldr	r3, [pc, #508]	; (8004088 <HAL_RCC_OscConfig+0x4a8>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	4a7e      	ldr	r2, [pc, #504]	; (8004088 <HAL_RCC_OscConfig+0x4a8>)
 8003e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e94:	6413      	str	r3, [r2, #64]	; 0x40
 8003e96:	4b7c      	ldr	r3, [pc, #496]	; (8004088 <HAL_RCC_OscConfig+0x4a8>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea6:	4b79      	ldr	r3, [pc, #484]	; (800408c <HAL_RCC_OscConfig+0x4ac>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d118      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eb2:	4b76      	ldr	r3, [pc, #472]	; (800408c <HAL_RCC_OscConfig+0x4ac>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a75      	ldr	r2, [pc, #468]	; (800408c <HAL_RCC_OscConfig+0x4ac>)
 8003eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ebe:	f7fe fba1 	bl	8002604 <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec6:	f7fe fb9d 	bl	8002604 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e0d3      	b.n	8004080 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed8:	4b6c      	ldr	r3, [pc, #432]	; (800408c <HAL_RCC_OscConfig+0x4ac>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0f0      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d106      	bne.n	8003efa <HAL_RCC_OscConfig+0x31a>
 8003eec:	4b66      	ldr	r3, [pc, #408]	; (8004088 <HAL_RCC_OscConfig+0x4a8>)
 8003eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef0:	4a65      	ldr	r2, [pc, #404]	; (8004088 <HAL_RCC_OscConfig+0x4a8>)
 8003ef2:	f043 0301 	orr.w	r3, r3, #1
 8003ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef8:	e01c      	b.n	8003f34 <HAL_RCC_OscConfig+0x354>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2b05      	cmp	r3, #5
 8003f00:	d10c      	bne.n	8003f1c <HAL_RCC_OscConfig+0x33c>
 8003f02:	4b61      	ldr	r3, [pc, #388]	; (8004088 <HAL_RCC_OscConfig+0x4a8>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f06:	4a60      	ldr	r2, [pc, #384]	; (8004088 <HAL_RCC_OscConfig+0x4a8>)
 8003f08:	f043 0304 	orr.w	r3, r3, #4
 8003f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f0e:	4b5e      	ldr	r3, [pc, #376]	; (8004088 <HAL_RCC_OscConfig+0x4a8>)
 8003f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f12:	4a5d      	ldr	r2, [pc, #372]	; (8004088 <HAL_RCC_OscConfig+0x4a8>)
 8003f14:	f043 0301 	orr.w	r3, r3, #1
 8003f18:	6713      	str	r3, [r2, #112]	; 0x70
 8003f1a:	e00b      	b.n	8003f34 <HAL_RCC_OscConfig+0x354>
 8003f1c:	4b5a      	ldr	r3, [pc, #360]	; (8004088 <HAL_RCC_OscConfig+0x4a8>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f20:	4a59      	ldr	r2, [pc, #356]	; (8004088 <HAL_RCC_OscConfig+0x4a8>)
 8003f22:	f023 0301 	bic.w	r3, r3, #1
 8003f26:	6713      	str	r3, [r2, #112]	; 0x70
 8003f28:	4b57      	ldr	r3, [pc, #348]	; (8004088 <HAL_RCC_OscConfig+0x4a8>)
 8003f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2c:	4a56      	ldr	r2, [pc, #344]	; (8004088 <HAL_RCC_OscConfig+0x4a8>)
 8003f2e:	f023 0304 	bic.w	r3, r3, #4
 8003f32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d015      	beq.n	8003f68 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3c:	f7fe fb62 	bl	8002604 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f42:	e00a      	b.n	8003f5a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f44:	f7fe fb5e 	bl	8002604 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e092      	b.n	8004080 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f5a:	4b4b      	ldr	r3, [pc, #300]	; (8004088 <HAL_RCC_OscConfig+0x4a8>)
 8003f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0ee      	beq.n	8003f44 <HAL_RCC_OscConfig+0x364>
 8003f66:	e014      	b.n	8003f92 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f68:	f7fe fb4c 	bl	8002604 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f6e:	e00a      	b.n	8003f86 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f70:	f7fe fb48 	bl	8002604 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e07c      	b.n	8004080 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f86:	4b40      	ldr	r3, [pc, #256]	; (8004088 <HAL_RCC_OscConfig+0x4a8>)
 8003f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1ee      	bne.n	8003f70 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f92:	7dfb      	ldrb	r3, [r7, #23]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d105      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f98:	4b3b      	ldr	r3, [pc, #236]	; (8004088 <HAL_RCC_OscConfig+0x4a8>)
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	4a3a      	ldr	r2, [pc, #232]	; (8004088 <HAL_RCC_OscConfig+0x4a8>)
 8003f9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fa2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d068      	beq.n	800407e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fac:	4b36      	ldr	r3, [pc, #216]	; (8004088 <HAL_RCC_OscConfig+0x4a8>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 030c 	and.w	r3, r3, #12
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d060      	beq.n	800407a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d145      	bne.n	800404c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc0:	4b33      	ldr	r3, [pc, #204]	; (8004090 <HAL_RCC_OscConfig+0x4b0>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc6:	f7fe fb1d 	bl	8002604 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fce:	f7fe fb19 	bl	8002604 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e04f      	b.n	8004080 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe0:	4b29      	ldr	r3, [pc, #164]	; (8004088 <HAL_RCC_OscConfig+0x4a8>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1f0      	bne.n	8003fce <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69da      	ldr	r2, [r3, #28]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	019b      	lsls	r3, r3, #6
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004002:	085b      	lsrs	r3, r3, #1
 8004004:	3b01      	subs	r3, #1
 8004006:	041b      	lsls	r3, r3, #16
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400e:	061b      	lsls	r3, r3, #24
 8004010:	431a      	orrs	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	071b      	lsls	r3, r3, #28
 8004018:	491b      	ldr	r1, [pc, #108]	; (8004088 <HAL_RCC_OscConfig+0x4a8>)
 800401a:	4313      	orrs	r3, r2
 800401c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800401e:	4b1c      	ldr	r3, [pc, #112]	; (8004090 <HAL_RCC_OscConfig+0x4b0>)
 8004020:	2201      	movs	r2, #1
 8004022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004024:	f7fe faee 	bl	8002604 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800402c:	f7fe faea 	bl	8002604 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e020      	b.n	8004080 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800403e:	4b12      	ldr	r3, [pc, #72]	; (8004088 <HAL_RCC_OscConfig+0x4a8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0x44c>
 800404a:	e018      	b.n	800407e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800404c:	4b10      	ldr	r3, [pc, #64]	; (8004090 <HAL_RCC_OscConfig+0x4b0>)
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004052:	f7fe fad7 	bl	8002604 <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004058:	e008      	b.n	800406c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800405a:	f7fe fad3 	bl	8002604 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e009      	b.n	8004080 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406c:	4b06      	ldr	r3, [pc, #24]	; (8004088 <HAL_RCC_OscConfig+0x4a8>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1f0      	bne.n	800405a <HAL_RCC_OscConfig+0x47a>
 8004078:	e001      	b.n	800407e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40023800 	.word	0x40023800
 800408c:	40007000 	.word	0x40007000
 8004090:	42470060 	.word	0x42470060

08004094 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e01d      	b.n	80040e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d106      	bne.n	80040c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fd fe72 	bl	8001da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2202      	movs	r2, #2
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3304      	adds	r3, #4
 80040d0:	4619      	mov	r1, r3
 80040d2:	4610      	mov	r0, r2
 80040d4:	f000 f968 	bl	80043a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b085      	sub	sp, #20
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f042 0201 	orr.w	r2, r2, #1
 8004100:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2b06      	cmp	r3, #6
 8004112:	d007      	beq.n	8004124 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b082      	sub	sp, #8
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b02      	cmp	r3, #2
 8004146:	d122      	bne.n	800418e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b02      	cmp	r3, #2
 8004154:	d11b      	bne.n	800418e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f06f 0202 	mvn.w	r2, #2
 800415e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f8f8 	bl	800436a <HAL_TIM_IC_CaptureCallback>
 800417a:	e005      	b.n	8004188 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f8ea 	bl	8004356 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f8fb 	bl	800437e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b04      	cmp	r3, #4
 800419a:	d122      	bne.n	80041e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d11b      	bne.n	80041e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f06f 0204 	mvn.w	r2, #4
 80041b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f8ce 	bl	800436a <HAL_TIM_IC_CaptureCallback>
 80041ce:	e005      	b.n	80041dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f8c0 	bl	8004356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f8d1 	bl	800437e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d122      	bne.n	8004236 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d11b      	bne.n	8004236 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f06f 0208 	mvn.w	r2, #8
 8004206:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2204      	movs	r2, #4
 800420c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	f003 0303 	and.w	r3, r3, #3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f8a4 	bl	800436a <HAL_TIM_IC_CaptureCallback>
 8004222:	e005      	b.n	8004230 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f896 	bl	8004356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f8a7 	bl	800437e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	f003 0310 	and.w	r3, r3, #16
 8004240:	2b10      	cmp	r3, #16
 8004242:	d122      	bne.n	800428a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f003 0310 	and.w	r3, r3, #16
 800424e:	2b10      	cmp	r3, #16
 8004250:	d11b      	bne.n	800428a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f06f 0210 	mvn.w	r2, #16
 800425a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2208      	movs	r2, #8
 8004260:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f87a 	bl	800436a <HAL_TIM_IC_CaptureCallback>
 8004276:	e005      	b.n	8004284 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f86c 	bl	8004356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f87d 	bl	800437e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b01      	cmp	r3, #1
 8004296:	d10e      	bne.n	80042b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d107      	bne.n	80042b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f06f 0201 	mvn.w	r2, #1
 80042ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f846 	bl	8004342 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c0:	2b80      	cmp	r3, #128	; 0x80
 80042c2:	d10e      	bne.n	80042e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ce:	2b80      	cmp	r3, #128	; 0x80
 80042d0:	d107      	bne.n	80042e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f989 	bl	80045f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ec:	2b40      	cmp	r3, #64	; 0x40
 80042ee:	d10e      	bne.n	800430e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fa:	2b40      	cmp	r3, #64	; 0x40
 80042fc:	d107      	bne.n	800430e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f842 	bl	8004392 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	f003 0320 	and.w	r3, r3, #32
 8004318:	2b20      	cmp	r3, #32
 800431a:	d10e      	bne.n	800433a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f003 0320 	and.w	r3, r3, #32
 8004326:	2b20      	cmp	r3, #32
 8004328:	d107      	bne.n	800433a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f06f 0220 	mvn.w	r2, #32
 8004332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f953 	bl	80045e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800433a:	bf00      	nop
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
	...

080043a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a40      	ldr	r2, [pc, #256]	; (80044bc <TIM_Base_SetConfig+0x114>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d013      	beq.n	80043e8 <TIM_Base_SetConfig+0x40>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c6:	d00f      	beq.n	80043e8 <TIM_Base_SetConfig+0x40>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a3d      	ldr	r2, [pc, #244]	; (80044c0 <TIM_Base_SetConfig+0x118>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00b      	beq.n	80043e8 <TIM_Base_SetConfig+0x40>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a3c      	ldr	r2, [pc, #240]	; (80044c4 <TIM_Base_SetConfig+0x11c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d007      	beq.n	80043e8 <TIM_Base_SetConfig+0x40>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a3b      	ldr	r2, [pc, #236]	; (80044c8 <TIM_Base_SetConfig+0x120>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d003      	beq.n	80043e8 <TIM_Base_SetConfig+0x40>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a3a      	ldr	r2, [pc, #232]	; (80044cc <TIM_Base_SetConfig+0x124>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d108      	bne.n	80043fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a2f      	ldr	r2, [pc, #188]	; (80044bc <TIM_Base_SetConfig+0x114>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d02b      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004408:	d027      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a2c      	ldr	r2, [pc, #176]	; (80044c0 <TIM_Base_SetConfig+0x118>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d023      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a2b      	ldr	r2, [pc, #172]	; (80044c4 <TIM_Base_SetConfig+0x11c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d01f      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a2a      	ldr	r2, [pc, #168]	; (80044c8 <TIM_Base_SetConfig+0x120>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d01b      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a29      	ldr	r2, [pc, #164]	; (80044cc <TIM_Base_SetConfig+0x124>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d017      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a28      	ldr	r2, [pc, #160]	; (80044d0 <TIM_Base_SetConfig+0x128>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d013      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a27      	ldr	r2, [pc, #156]	; (80044d4 <TIM_Base_SetConfig+0x12c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d00f      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a26      	ldr	r2, [pc, #152]	; (80044d8 <TIM_Base_SetConfig+0x130>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d00b      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a25      	ldr	r2, [pc, #148]	; (80044dc <TIM_Base_SetConfig+0x134>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d007      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a24      	ldr	r2, [pc, #144]	; (80044e0 <TIM_Base_SetConfig+0x138>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d003      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a23      	ldr	r2, [pc, #140]	; (80044e4 <TIM_Base_SetConfig+0x13c>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d108      	bne.n	800446c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	4313      	orrs	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a0a      	ldr	r2, [pc, #40]	; (80044bc <TIM_Base_SetConfig+0x114>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d003      	beq.n	80044a0 <TIM_Base_SetConfig+0xf8>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a0c      	ldr	r2, [pc, #48]	; (80044cc <TIM_Base_SetConfig+0x124>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d103      	bne.n	80044a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	615a      	str	r2, [r3, #20]
}
 80044ae:	bf00      	nop
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40010000 	.word	0x40010000
 80044c0:	40000400 	.word	0x40000400
 80044c4:	40000800 	.word	0x40000800
 80044c8:	40000c00 	.word	0x40000c00
 80044cc:	40010400 	.word	0x40010400
 80044d0:	40014000 	.word	0x40014000
 80044d4:	40014400 	.word	0x40014400
 80044d8:	40014800 	.word	0x40014800
 80044dc:	40001800 	.word	0x40001800
 80044e0:	40001c00 	.word	0x40001c00
 80044e4:	40002000 	.word	0x40002000

080044e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e05a      	b.n	80045b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004526:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a21      	ldr	r2, [pc, #132]	; (80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d022      	beq.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454c:	d01d      	beq.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a1d      	ldr	r2, [pc, #116]	; (80045c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d018      	beq.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a1b      	ldr	r2, [pc, #108]	; (80045cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d013      	beq.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a1a      	ldr	r2, [pc, #104]	; (80045d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00e      	beq.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a18      	ldr	r2, [pc, #96]	; (80045d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d009      	beq.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a17      	ldr	r2, [pc, #92]	; (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d004      	beq.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a15      	ldr	r2, [pc, #84]	; (80045dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d10c      	bne.n	80045a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004590:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	4313      	orrs	r3, r2
 800459a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40010000 	.word	0x40010000
 80045c8:	40000400 	.word	0x40000400
 80045cc:	40000800 	.word	0x40000800
 80045d0:	40000c00 	.word	0x40000c00
 80045d4:	40010400 	.word	0x40010400
 80045d8:	40014000 	.word	0x40014000
 80045dc:	40001800 	.word	0x40001800

080045e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e03f      	b.n	800469a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fd fc0a 	bl	8001e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2224      	movs	r2, #36	; 0x24
 8004638:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800464a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 faef 	bl	8004c30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	691a      	ldr	r2, [r3, #16]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004660:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695a      	ldr	r2, [r3, #20]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004670:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004680:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b085      	sub	sp, #20
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	60f8      	str	r0, [r7, #12]
 80046aa:	60b9      	str	r1, [r7, #8]
 80046ac:	4613      	mov	r3, r2
 80046ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	d130      	bne.n	800471e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <HAL_UART_Transmit_IT+0x26>
 80046c2:	88fb      	ldrh	r3, [r7, #6]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e029      	b.n	8004720 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d101      	bne.n	80046da <HAL_UART_Transmit_IT+0x38>
 80046d6:	2302      	movs	r3, #2
 80046d8:	e022      	b.n	8004720 <HAL_UART_Transmit_IT+0x7e>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	88fa      	ldrh	r2, [r7, #6]
 80046ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	88fa      	ldrh	r2, [r7, #6]
 80046f2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2221      	movs	r2, #33	; 0x21
 80046fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004718:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	e000      	b.n	8004720 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800471e:	2302      	movs	r3, #2
  }
}
 8004720:	4618      	mov	r0, r3
 8004722:	3714      	adds	r7, #20
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	4613      	mov	r3, r2
 8004738:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b20      	cmp	r3, #32
 8004744:	d140      	bne.n	80047c8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d002      	beq.n	8004752 <HAL_UART_Receive_IT+0x26>
 800474c:	88fb      	ldrh	r3, [r7, #6]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e039      	b.n	80047ca <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800475c:	2b01      	cmp	r3, #1
 800475e:	d101      	bne.n	8004764 <HAL_UART_Receive_IT+0x38>
 8004760:	2302      	movs	r3, #2
 8004762:	e032      	b.n	80047ca <HAL_UART_Receive_IT+0x9e>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	88fa      	ldrh	r2, [r7, #6]
 8004776:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	88fa      	ldrh	r2, [r7, #6]
 800477c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2222      	movs	r2, #34	; 0x22
 8004788:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047a2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695a      	ldr	r2, [r3, #20]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0220 	orr.w	r2, r2, #32
 80047c2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	e000      	b.n	80047ca <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80047c8:	2302      	movs	r3, #2
  }
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
	...

080047d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80047fc:	2300      	movs	r3, #0
 80047fe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10d      	bne.n	800482a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b00      	cmp	r3, #0
 8004816:	d008      	beq.n	800482a <HAL_UART_IRQHandler+0x52>
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f982 	bl	8004b2c <UART_Receive_IT>
      return;
 8004828:	e0d1      	b.n	80049ce <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 80b0 	beq.w	8004992 <HAL_UART_IRQHandler+0x1ba>
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d105      	bne.n	8004848 <HAL_UART_IRQHandler+0x70>
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 80a5 	beq.w	8004992 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <HAL_UART_IRQHandler+0x90>
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004858:	2b00      	cmp	r3, #0
 800485a:	d005      	beq.n	8004868 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004860:	f043 0201 	orr.w	r2, r3, #1
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <HAL_UART_IRQHandler+0xb0>
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004880:	f043 0202 	orr.w	r2, r3, #2
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <HAL_UART_IRQHandler+0xd0>
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d005      	beq.n	80048a8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a0:	f043 0204 	orr.w	r2, r3, #4
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00f      	beq.n	80048d2 <HAL_UART_IRQHandler+0xfa>
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	f003 0320 	and.w	r3, r3, #32
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d104      	bne.n	80048c6 <HAL_UART_IRQHandler+0xee>
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ca:	f043 0208 	orr.w	r2, r3, #8
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d078      	beq.n	80049cc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	f003 0320 	and.w	r3, r3, #32
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d007      	beq.n	80048f4 <HAL_UART_IRQHandler+0x11c>
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	f003 0320 	and.w	r3, r3, #32
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f91c 	bl	8004b2c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fe:	2b40      	cmp	r3, #64	; 0x40
 8004900:	bf0c      	ite	eq
 8004902:	2301      	moveq	r3, #1
 8004904:	2300      	movne	r3, #0
 8004906:	b2db      	uxtb	r3, r3
 8004908:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d102      	bne.n	800491c <HAL_UART_IRQHandler+0x144>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d031      	beq.n	8004980 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f865 	bl	80049ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492c:	2b40      	cmp	r3, #64	; 0x40
 800492e:	d123      	bne.n	8004978 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695a      	ldr	r2, [r3, #20]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800493e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004944:	2b00      	cmp	r3, #0
 8004946:	d013      	beq.n	8004970 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800494c:	4a21      	ldr	r2, [pc, #132]	; (80049d4 <HAL_UART_IRQHandler+0x1fc>)
 800494e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004954:	4618      	mov	r0, r3
 8004956:	f7fe fa89 	bl	8002e6c <HAL_DMA_Abort_IT>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d016      	beq.n	800498e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800496a:	4610      	mov	r0, r2
 800496c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800496e:	e00e      	b.n	800498e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f831 	bl	80049d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004976:	e00a      	b.n	800498e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f82d 	bl	80049d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800497e:	e006      	b.n	800498e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f829 	bl	80049d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800498c:	e01e      	b.n	80049cc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800498e:	bf00      	nop
    return;
 8004990:	e01c      	b.n	80049cc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004998:	2b00      	cmp	r3, #0
 800499a:	d008      	beq.n	80049ae <HAL_UART_IRQHandler+0x1d6>
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f852 	bl	8004a50 <UART_Transmit_IT>
    return;
 80049ac:	e00f      	b.n	80049ce <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00a      	beq.n	80049ce <HAL_UART_IRQHandler+0x1f6>
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d005      	beq.n	80049ce <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f89a 	bl	8004afc <UART_EndTransmit_IT>
    return;
 80049c8:	bf00      	nop
 80049ca:	e000      	b.n	80049ce <HAL_UART_IRQHandler+0x1f6>
    return;
 80049cc:	bf00      	nop
  }
}
 80049ce:	3720      	adds	r7, #32
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	08004a29 	.word	0x08004a29

080049d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68da      	ldr	r2, [r3, #12]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a02:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695a      	ldr	r2, [r3, #20]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 0201 	bic.w	r2, r2, #1
 8004a12:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f7ff ffc8 	bl	80049d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a48:	bf00      	nop
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b21      	cmp	r3, #33	; 0x21
 8004a62:	d144      	bne.n	8004aee <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a6c:	d11a      	bne.n	8004aa4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	881b      	ldrh	r3, [r3, #0]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a82:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d105      	bne.n	8004a98 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	1c9a      	adds	r2, r3, #2
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	621a      	str	r2, [r3, #32]
 8004a96:	e00e      	b.n	8004ab6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	621a      	str	r2, [r3, #32]
 8004aa2:	e008      	b.n	8004ab6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	1c59      	adds	r1, r3, #1
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6211      	str	r1, [r2, #32]
 8004aae:	781a      	ldrb	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10f      	bne.n	8004aea <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68da      	ldr	r2, [r3, #12]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ad8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ae8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004aea:	2300      	movs	r3, #0
 8004aec:	e000      	b.n	8004af0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004aee:	2302      	movs	r3, #2
  }
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b12:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f7fd f9e3 	bl	8001ee8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b22      	cmp	r3, #34	; 0x22
 8004b3e:	d171      	bne.n	8004c24 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b48:	d123      	bne.n	8004b92 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10e      	bne.n	8004b76 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6e:	1c9a      	adds	r2, r3, #2
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	629a      	str	r2, [r3, #40]	; 0x28
 8004b74:	e029      	b.n	8004bca <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	629a      	str	r2, [r3, #40]	; 0x28
 8004b90:	e01b      	b.n	8004bca <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10a      	bne.n	8004bb0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6858      	ldr	r0, [r3, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba4:	1c59      	adds	r1, r3, #1
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6291      	str	r1, [r2, #40]	; 0x28
 8004baa:	b2c2      	uxtb	r2, r0
 8004bac:	701a      	strb	r2, [r3, #0]
 8004bae:	e00c      	b.n	8004bca <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbc:	1c58      	adds	r0, r3, #1
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	6288      	str	r0, [r1, #40]	; 0x28
 8004bc2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d120      	bne.n	8004c20 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68da      	ldr	r2, [r3, #12]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 0220 	bic.w	r2, r2, #32
 8004bec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bfc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	695a      	ldr	r2, [r3, #20]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0201 	bic.w	r2, r2, #1
 8004c0c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7fd f9a0 	bl	8001f5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	e002      	b.n	8004c26 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004c20:	2300      	movs	r3, #0
 8004c22:	e000      	b.n	8004c26 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004c24:	2302      	movs	r3, #2
  }
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
	...

08004c30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c34:	b085      	sub	sp, #20
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68da      	ldr	r2, [r3, #12]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004c72:	f023 030c 	bic.w	r3, r3, #12
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6812      	ldr	r2, [r2, #0]
 8004c7a:	68f9      	ldr	r1, [r7, #12]
 8004c7c:	430b      	orrs	r3, r1
 8004c7e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699a      	ldr	r2, [r3, #24]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c9e:	f040 818b 	bne.w	8004fb8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4ac1      	ldr	r2, [pc, #772]	; (8004fac <UART_SetConfig+0x37c>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d005      	beq.n	8004cb8 <UART_SetConfig+0x88>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4abf      	ldr	r2, [pc, #764]	; (8004fb0 <UART_SetConfig+0x380>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	f040 80bd 	bne.w	8004e32 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cb8:	f7fe fe2c 	bl	8003914 <HAL_RCC_GetPCLK2Freq>
 8004cbc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	461d      	mov	r5, r3
 8004cc2:	f04f 0600 	mov.w	r6, #0
 8004cc6:	46a8      	mov	r8, r5
 8004cc8:	46b1      	mov	r9, r6
 8004cca:	eb18 0308 	adds.w	r3, r8, r8
 8004cce:	eb49 0409 	adc.w	r4, r9, r9
 8004cd2:	4698      	mov	r8, r3
 8004cd4:	46a1      	mov	r9, r4
 8004cd6:	eb18 0805 	adds.w	r8, r8, r5
 8004cda:	eb49 0906 	adc.w	r9, r9, r6
 8004cde:	f04f 0100 	mov.w	r1, #0
 8004ce2:	f04f 0200 	mov.w	r2, #0
 8004ce6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004cea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004cee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004cf2:	4688      	mov	r8, r1
 8004cf4:	4691      	mov	r9, r2
 8004cf6:	eb18 0005 	adds.w	r0, r8, r5
 8004cfa:	eb49 0106 	adc.w	r1, r9, r6
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	461d      	mov	r5, r3
 8004d04:	f04f 0600 	mov.w	r6, #0
 8004d08:	196b      	adds	r3, r5, r5
 8004d0a:	eb46 0406 	adc.w	r4, r6, r6
 8004d0e:	461a      	mov	r2, r3
 8004d10:	4623      	mov	r3, r4
 8004d12:	f7fb ff83 	bl	8000c1c <__aeabi_uldivmod>
 8004d16:	4603      	mov	r3, r0
 8004d18:	460c      	mov	r4, r1
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	4ba5      	ldr	r3, [pc, #660]	; (8004fb4 <UART_SetConfig+0x384>)
 8004d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d22:	095b      	lsrs	r3, r3, #5
 8004d24:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	461d      	mov	r5, r3
 8004d2c:	f04f 0600 	mov.w	r6, #0
 8004d30:	46a9      	mov	r9, r5
 8004d32:	46b2      	mov	sl, r6
 8004d34:	eb19 0309 	adds.w	r3, r9, r9
 8004d38:	eb4a 040a 	adc.w	r4, sl, sl
 8004d3c:	4699      	mov	r9, r3
 8004d3e:	46a2      	mov	sl, r4
 8004d40:	eb19 0905 	adds.w	r9, r9, r5
 8004d44:	eb4a 0a06 	adc.w	sl, sl, r6
 8004d48:	f04f 0100 	mov.w	r1, #0
 8004d4c:	f04f 0200 	mov.w	r2, #0
 8004d50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d5c:	4689      	mov	r9, r1
 8004d5e:	4692      	mov	sl, r2
 8004d60:	eb19 0005 	adds.w	r0, r9, r5
 8004d64:	eb4a 0106 	adc.w	r1, sl, r6
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	461d      	mov	r5, r3
 8004d6e:	f04f 0600 	mov.w	r6, #0
 8004d72:	196b      	adds	r3, r5, r5
 8004d74:	eb46 0406 	adc.w	r4, r6, r6
 8004d78:	461a      	mov	r2, r3
 8004d7a:	4623      	mov	r3, r4
 8004d7c:	f7fb ff4e 	bl	8000c1c <__aeabi_uldivmod>
 8004d80:	4603      	mov	r3, r0
 8004d82:	460c      	mov	r4, r1
 8004d84:	461a      	mov	r2, r3
 8004d86:	4b8b      	ldr	r3, [pc, #556]	; (8004fb4 <UART_SetConfig+0x384>)
 8004d88:	fba3 1302 	umull	r1, r3, r3, r2
 8004d8c:	095b      	lsrs	r3, r3, #5
 8004d8e:	2164      	movs	r1, #100	; 0x64
 8004d90:	fb01 f303 	mul.w	r3, r1, r3
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	3332      	adds	r3, #50	; 0x32
 8004d9a:	4a86      	ldr	r2, [pc, #536]	; (8004fb4 <UART_SetConfig+0x384>)
 8004d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004da0:	095b      	lsrs	r3, r3, #5
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004da8:	4498      	add	r8, r3
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	461d      	mov	r5, r3
 8004dae:	f04f 0600 	mov.w	r6, #0
 8004db2:	46a9      	mov	r9, r5
 8004db4:	46b2      	mov	sl, r6
 8004db6:	eb19 0309 	adds.w	r3, r9, r9
 8004dba:	eb4a 040a 	adc.w	r4, sl, sl
 8004dbe:	4699      	mov	r9, r3
 8004dc0:	46a2      	mov	sl, r4
 8004dc2:	eb19 0905 	adds.w	r9, r9, r5
 8004dc6:	eb4a 0a06 	adc.w	sl, sl, r6
 8004dca:	f04f 0100 	mov.w	r1, #0
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dd6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004dda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004dde:	4689      	mov	r9, r1
 8004de0:	4692      	mov	sl, r2
 8004de2:	eb19 0005 	adds.w	r0, r9, r5
 8004de6:	eb4a 0106 	adc.w	r1, sl, r6
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	461d      	mov	r5, r3
 8004df0:	f04f 0600 	mov.w	r6, #0
 8004df4:	196b      	adds	r3, r5, r5
 8004df6:	eb46 0406 	adc.w	r4, r6, r6
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	4623      	mov	r3, r4
 8004dfe:	f7fb ff0d 	bl	8000c1c <__aeabi_uldivmod>
 8004e02:	4603      	mov	r3, r0
 8004e04:	460c      	mov	r4, r1
 8004e06:	461a      	mov	r2, r3
 8004e08:	4b6a      	ldr	r3, [pc, #424]	; (8004fb4 <UART_SetConfig+0x384>)
 8004e0a:	fba3 1302 	umull	r1, r3, r3, r2
 8004e0e:	095b      	lsrs	r3, r3, #5
 8004e10:	2164      	movs	r1, #100	; 0x64
 8004e12:	fb01 f303 	mul.w	r3, r1, r3
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	3332      	adds	r3, #50	; 0x32
 8004e1c:	4a65      	ldr	r2, [pc, #404]	; (8004fb4 <UART_SetConfig+0x384>)
 8004e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e22:	095b      	lsrs	r3, r3, #5
 8004e24:	f003 0207 	and.w	r2, r3, #7
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4442      	add	r2, r8
 8004e2e:	609a      	str	r2, [r3, #8]
 8004e30:	e26f      	b.n	8005312 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e32:	f7fe fd5b 	bl	80038ec <HAL_RCC_GetPCLK1Freq>
 8004e36:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	461d      	mov	r5, r3
 8004e3c:	f04f 0600 	mov.w	r6, #0
 8004e40:	46a8      	mov	r8, r5
 8004e42:	46b1      	mov	r9, r6
 8004e44:	eb18 0308 	adds.w	r3, r8, r8
 8004e48:	eb49 0409 	adc.w	r4, r9, r9
 8004e4c:	4698      	mov	r8, r3
 8004e4e:	46a1      	mov	r9, r4
 8004e50:	eb18 0805 	adds.w	r8, r8, r5
 8004e54:	eb49 0906 	adc.w	r9, r9, r6
 8004e58:	f04f 0100 	mov.w	r1, #0
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004e64:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004e68:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004e6c:	4688      	mov	r8, r1
 8004e6e:	4691      	mov	r9, r2
 8004e70:	eb18 0005 	adds.w	r0, r8, r5
 8004e74:	eb49 0106 	adc.w	r1, r9, r6
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	461d      	mov	r5, r3
 8004e7e:	f04f 0600 	mov.w	r6, #0
 8004e82:	196b      	adds	r3, r5, r5
 8004e84:	eb46 0406 	adc.w	r4, r6, r6
 8004e88:	461a      	mov	r2, r3
 8004e8a:	4623      	mov	r3, r4
 8004e8c:	f7fb fec6 	bl	8000c1c <__aeabi_uldivmod>
 8004e90:	4603      	mov	r3, r0
 8004e92:	460c      	mov	r4, r1
 8004e94:	461a      	mov	r2, r3
 8004e96:	4b47      	ldr	r3, [pc, #284]	; (8004fb4 <UART_SetConfig+0x384>)
 8004e98:	fba3 2302 	umull	r2, r3, r3, r2
 8004e9c:	095b      	lsrs	r3, r3, #5
 8004e9e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	461d      	mov	r5, r3
 8004ea6:	f04f 0600 	mov.w	r6, #0
 8004eaa:	46a9      	mov	r9, r5
 8004eac:	46b2      	mov	sl, r6
 8004eae:	eb19 0309 	adds.w	r3, r9, r9
 8004eb2:	eb4a 040a 	adc.w	r4, sl, sl
 8004eb6:	4699      	mov	r9, r3
 8004eb8:	46a2      	mov	sl, r4
 8004eba:	eb19 0905 	adds.w	r9, r9, r5
 8004ebe:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ec2:	f04f 0100 	mov.w	r1, #0
 8004ec6:	f04f 0200 	mov.w	r2, #0
 8004eca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ece:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ed2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ed6:	4689      	mov	r9, r1
 8004ed8:	4692      	mov	sl, r2
 8004eda:	eb19 0005 	adds.w	r0, r9, r5
 8004ede:	eb4a 0106 	adc.w	r1, sl, r6
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	461d      	mov	r5, r3
 8004ee8:	f04f 0600 	mov.w	r6, #0
 8004eec:	196b      	adds	r3, r5, r5
 8004eee:	eb46 0406 	adc.w	r4, r6, r6
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	4623      	mov	r3, r4
 8004ef6:	f7fb fe91 	bl	8000c1c <__aeabi_uldivmod>
 8004efa:	4603      	mov	r3, r0
 8004efc:	460c      	mov	r4, r1
 8004efe:	461a      	mov	r2, r3
 8004f00:	4b2c      	ldr	r3, [pc, #176]	; (8004fb4 <UART_SetConfig+0x384>)
 8004f02:	fba3 1302 	umull	r1, r3, r3, r2
 8004f06:	095b      	lsrs	r3, r3, #5
 8004f08:	2164      	movs	r1, #100	; 0x64
 8004f0a:	fb01 f303 	mul.w	r3, r1, r3
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	3332      	adds	r3, #50	; 0x32
 8004f14:	4a27      	ldr	r2, [pc, #156]	; (8004fb4 <UART_SetConfig+0x384>)
 8004f16:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1a:	095b      	lsrs	r3, r3, #5
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f22:	4498      	add	r8, r3
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	461d      	mov	r5, r3
 8004f28:	f04f 0600 	mov.w	r6, #0
 8004f2c:	46a9      	mov	r9, r5
 8004f2e:	46b2      	mov	sl, r6
 8004f30:	eb19 0309 	adds.w	r3, r9, r9
 8004f34:	eb4a 040a 	adc.w	r4, sl, sl
 8004f38:	4699      	mov	r9, r3
 8004f3a:	46a2      	mov	sl, r4
 8004f3c:	eb19 0905 	adds.w	r9, r9, r5
 8004f40:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f44:	f04f 0100 	mov.w	r1, #0
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f58:	4689      	mov	r9, r1
 8004f5a:	4692      	mov	sl, r2
 8004f5c:	eb19 0005 	adds.w	r0, r9, r5
 8004f60:	eb4a 0106 	adc.w	r1, sl, r6
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	461d      	mov	r5, r3
 8004f6a:	f04f 0600 	mov.w	r6, #0
 8004f6e:	196b      	adds	r3, r5, r5
 8004f70:	eb46 0406 	adc.w	r4, r6, r6
 8004f74:	461a      	mov	r2, r3
 8004f76:	4623      	mov	r3, r4
 8004f78:	f7fb fe50 	bl	8000c1c <__aeabi_uldivmod>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	460c      	mov	r4, r1
 8004f80:	461a      	mov	r2, r3
 8004f82:	4b0c      	ldr	r3, [pc, #48]	; (8004fb4 <UART_SetConfig+0x384>)
 8004f84:	fba3 1302 	umull	r1, r3, r3, r2
 8004f88:	095b      	lsrs	r3, r3, #5
 8004f8a:	2164      	movs	r1, #100	; 0x64
 8004f8c:	fb01 f303 	mul.w	r3, r1, r3
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	00db      	lsls	r3, r3, #3
 8004f94:	3332      	adds	r3, #50	; 0x32
 8004f96:	4a07      	ldr	r2, [pc, #28]	; (8004fb4 <UART_SetConfig+0x384>)
 8004f98:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9c:	095b      	lsrs	r3, r3, #5
 8004f9e:	f003 0207 	and.w	r2, r3, #7
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4442      	add	r2, r8
 8004fa8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004faa:	e1b2      	b.n	8005312 <UART_SetConfig+0x6e2>
 8004fac:	40011000 	.word	0x40011000
 8004fb0:	40011400 	.word	0x40011400
 8004fb4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4ad7      	ldr	r2, [pc, #860]	; (800531c <UART_SetConfig+0x6ec>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d005      	beq.n	8004fce <UART_SetConfig+0x39e>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4ad6      	ldr	r2, [pc, #856]	; (8005320 <UART_SetConfig+0x6f0>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	f040 80d1 	bne.w	8005170 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fce:	f7fe fca1 	bl	8003914 <HAL_RCC_GetPCLK2Freq>
 8004fd2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	469a      	mov	sl, r3
 8004fd8:	f04f 0b00 	mov.w	fp, #0
 8004fdc:	46d0      	mov	r8, sl
 8004fde:	46d9      	mov	r9, fp
 8004fe0:	eb18 0308 	adds.w	r3, r8, r8
 8004fe4:	eb49 0409 	adc.w	r4, r9, r9
 8004fe8:	4698      	mov	r8, r3
 8004fea:	46a1      	mov	r9, r4
 8004fec:	eb18 080a 	adds.w	r8, r8, sl
 8004ff0:	eb49 090b 	adc.w	r9, r9, fp
 8004ff4:	f04f 0100 	mov.w	r1, #0
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005000:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005004:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005008:	4688      	mov	r8, r1
 800500a:	4691      	mov	r9, r2
 800500c:	eb1a 0508 	adds.w	r5, sl, r8
 8005010:	eb4b 0609 	adc.w	r6, fp, r9
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	4619      	mov	r1, r3
 800501a:	f04f 0200 	mov.w	r2, #0
 800501e:	f04f 0300 	mov.w	r3, #0
 8005022:	f04f 0400 	mov.w	r4, #0
 8005026:	0094      	lsls	r4, r2, #2
 8005028:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800502c:	008b      	lsls	r3, r1, #2
 800502e:	461a      	mov	r2, r3
 8005030:	4623      	mov	r3, r4
 8005032:	4628      	mov	r0, r5
 8005034:	4631      	mov	r1, r6
 8005036:	f7fb fdf1 	bl	8000c1c <__aeabi_uldivmod>
 800503a:	4603      	mov	r3, r0
 800503c:	460c      	mov	r4, r1
 800503e:	461a      	mov	r2, r3
 8005040:	4bb8      	ldr	r3, [pc, #736]	; (8005324 <UART_SetConfig+0x6f4>)
 8005042:	fba3 2302 	umull	r2, r3, r3, r2
 8005046:	095b      	lsrs	r3, r3, #5
 8005048:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	469b      	mov	fp, r3
 8005050:	f04f 0c00 	mov.w	ip, #0
 8005054:	46d9      	mov	r9, fp
 8005056:	46e2      	mov	sl, ip
 8005058:	eb19 0309 	adds.w	r3, r9, r9
 800505c:	eb4a 040a 	adc.w	r4, sl, sl
 8005060:	4699      	mov	r9, r3
 8005062:	46a2      	mov	sl, r4
 8005064:	eb19 090b 	adds.w	r9, r9, fp
 8005068:	eb4a 0a0c 	adc.w	sl, sl, ip
 800506c:	f04f 0100 	mov.w	r1, #0
 8005070:	f04f 0200 	mov.w	r2, #0
 8005074:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005078:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800507c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005080:	4689      	mov	r9, r1
 8005082:	4692      	mov	sl, r2
 8005084:	eb1b 0509 	adds.w	r5, fp, r9
 8005088:	eb4c 060a 	adc.w	r6, ip, sl
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	4619      	mov	r1, r3
 8005092:	f04f 0200 	mov.w	r2, #0
 8005096:	f04f 0300 	mov.w	r3, #0
 800509a:	f04f 0400 	mov.w	r4, #0
 800509e:	0094      	lsls	r4, r2, #2
 80050a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050a4:	008b      	lsls	r3, r1, #2
 80050a6:	461a      	mov	r2, r3
 80050a8:	4623      	mov	r3, r4
 80050aa:	4628      	mov	r0, r5
 80050ac:	4631      	mov	r1, r6
 80050ae:	f7fb fdb5 	bl	8000c1c <__aeabi_uldivmod>
 80050b2:	4603      	mov	r3, r0
 80050b4:	460c      	mov	r4, r1
 80050b6:	461a      	mov	r2, r3
 80050b8:	4b9a      	ldr	r3, [pc, #616]	; (8005324 <UART_SetConfig+0x6f4>)
 80050ba:	fba3 1302 	umull	r1, r3, r3, r2
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	2164      	movs	r1, #100	; 0x64
 80050c2:	fb01 f303 	mul.w	r3, r1, r3
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	3332      	adds	r3, #50	; 0x32
 80050cc:	4a95      	ldr	r2, [pc, #596]	; (8005324 <UART_SetConfig+0x6f4>)
 80050ce:	fba2 2303 	umull	r2, r3, r2, r3
 80050d2:	095b      	lsrs	r3, r3, #5
 80050d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050d8:	4498      	add	r8, r3
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	469b      	mov	fp, r3
 80050de:	f04f 0c00 	mov.w	ip, #0
 80050e2:	46d9      	mov	r9, fp
 80050e4:	46e2      	mov	sl, ip
 80050e6:	eb19 0309 	adds.w	r3, r9, r9
 80050ea:	eb4a 040a 	adc.w	r4, sl, sl
 80050ee:	4699      	mov	r9, r3
 80050f0:	46a2      	mov	sl, r4
 80050f2:	eb19 090b 	adds.w	r9, r9, fp
 80050f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80050fa:	f04f 0100 	mov.w	r1, #0
 80050fe:	f04f 0200 	mov.w	r2, #0
 8005102:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005106:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800510a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800510e:	4689      	mov	r9, r1
 8005110:	4692      	mov	sl, r2
 8005112:	eb1b 0509 	adds.w	r5, fp, r9
 8005116:	eb4c 060a 	adc.w	r6, ip, sl
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	4619      	mov	r1, r3
 8005120:	f04f 0200 	mov.w	r2, #0
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	f04f 0400 	mov.w	r4, #0
 800512c:	0094      	lsls	r4, r2, #2
 800512e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005132:	008b      	lsls	r3, r1, #2
 8005134:	461a      	mov	r2, r3
 8005136:	4623      	mov	r3, r4
 8005138:	4628      	mov	r0, r5
 800513a:	4631      	mov	r1, r6
 800513c:	f7fb fd6e 	bl	8000c1c <__aeabi_uldivmod>
 8005140:	4603      	mov	r3, r0
 8005142:	460c      	mov	r4, r1
 8005144:	461a      	mov	r2, r3
 8005146:	4b77      	ldr	r3, [pc, #476]	; (8005324 <UART_SetConfig+0x6f4>)
 8005148:	fba3 1302 	umull	r1, r3, r3, r2
 800514c:	095b      	lsrs	r3, r3, #5
 800514e:	2164      	movs	r1, #100	; 0x64
 8005150:	fb01 f303 	mul.w	r3, r1, r3
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	011b      	lsls	r3, r3, #4
 8005158:	3332      	adds	r3, #50	; 0x32
 800515a:	4a72      	ldr	r2, [pc, #456]	; (8005324 <UART_SetConfig+0x6f4>)
 800515c:	fba2 2303 	umull	r2, r3, r2, r3
 8005160:	095b      	lsrs	r3, r3, #5
 8005162:	f003 020f 	and.w	r2, r3, #15
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4442      	add	r2, r8
 800516c:	609a      	str	r2, [r3, #8]
 800516e:	e0d0      	b.n	8005312 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005170:	f7fe fbbc 	bl	80038ec <HAL_RCC_GetPCLK1Freq>
 8005174:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	469a      	mov	sl, r3
 800517a:	f04f 0b00 	mov.w	fp, #0
 800517e:	46d0      	mov	r8, sl
 8005180:	46d9      	mov	r9, fp
 8005182:	eb18 0308 	adds.w	r3, r8, r8
 8005186:	eb49 0409 	adc.w	r4, r9, r9
 800518a:	4698      	mov	r8, r3
 800518c:	46a1      	mov	r9, r4
 800518e:	eb18 080a 	adds.w	r8, r8, sl
 8005192:	eb49 090b 	adc.w	r9, r9, fp
 8005196:	f04f 0100 	mov.w	r1, #0
 800519a:	f04f 0200 	mov.w	r2, #0
 800519e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80051a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80051a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80051aa:	4688      	mov	r8, r1
 80051ac:	4691      	mov	r9, r2
 80051ae:	eb1a 0508 	adds.w	r5, sl, r8
 80051b2:	eb4b 0609 	adc.w	r6, fp, r9
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	4619      	mov	r1, r3
 80051bc:	f04f 0200 	mov.w	r2, #0
 80051c0:	f04f 0300 	mov.w	r3, #0
 80051c4:	f04f 0400 	mov.w	r4, #0
 80051c8:	0094      	lsls	r4, r2, #2
 80051ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051ce:	008b      	lsls	r3, r1, #2
 80051d0:	461a      	mov	r2, r3
 80051d2:	4623      	mov	r3, r4
 80051d4:	4628      	mov	r0, r5
 80051d6:	4631      	mov	r1, r6
 80051d8:	f7fb fd20 	bl	8000c1c <__aeabi_uldivmod>
 80051dc:	4603      	mov	r3, r0
 80051de:	460c      	mov	r4, r1
 80051e0:	461a      	mov	r2, r3
 80051e2:	4b50      	ldr	r3, [pc, #320]	; (8005324 <UART_SetConfig+0x6f4>)
 80051e4:	fba3 2302 	umull	r2, r3, r3, r2
 80051e8:	095b      	lsrs	r3, r3, #5
 80051ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	469b      	mov	fp, r3
 80051f2:	f04f 0c00 	mov.w	ip, #0
 80051f6:	46d9      	mov	r9, fp
 80051f8:	46e2      	mov	sl, ip
 80051fa:	eb19 0309 	adds.w	r3, r9, r9
 80051fe:	eb4a 040a 	adc.w	r4, sl, sl
 8005202:	4699      	mov	r9, r3
 8005204:	46a2      	mov	sl, r4
 8005206:	eb19 090b 	adds.w	r9, r9, fp
 800520a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800520e:	f04f 0100 	mov.w	r1, #0
 8005212:	f04f 0200 	mov.w	r2, #0
 8005216:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800521a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800521e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005222:	4689      	mov	r9, r1
 8005224:	4692      	mov	sl, r2
 8005226:	eb1b 0509 	adds.w	r5, fp, r9
 800522a:	eb4c 060a 	adc.w	r6, ip, sl
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	4619      	mov	r1, r3
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	f04f 0400 	mov.w	r4, #0
 8005240:	0094      	lsls	r4, r2, #2
 8005242:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005246:	008b      	lsls	r3, r1, #2
 8005248:	461a      	mov	r2, r3
 800524a:	4623      	mov	r3, r4
 800524c:	4628      	mov	r0, r5
 800524e:	4631      	mov	r1, r6
 8005250:	f7fb fce4 	bl	8000c1c <__aeabi_uldivmod>
 8005254:	4603      	mov	r3, r0
 8005256:	460c      	mov	r4, r1
 8005258:	461a      	mov	r2, r3
 800525a:	4b32      	ldr	r3, [pc, #200]	; (8005324 <UART_SetConfig+0x6f4>)
 800525c:	fba3 1302 	umull	r1, r3, r3, r2
 8005260:	095b      	lsrs	r3, r3, #5
 8005262:	2164      	movs	r1, #100	; 0x64
 8005264:	fb01 f303 	mul.w	r3, r1, r3
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	3332      	adds	r3, #50	; 0x32
 800526e:	4a2d      	ldr	r2, [pc, #180]	; (8005324 <UART_SetConfig+0x6f4>)
 8005270:	fba2 2303 	umull	r2, r3, r2, r3
 8005274:	095b      	lsrs	r3, r3, #5
 8005276:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800527a:	4498      	add	r8, r3
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	469b      	mov	fp, r3
 8005280:	f04f 0c00 	mov.w	ip, #0
 8005284:	46d9      	mov	r9, fp
 8005286:	46e2      	mov	sl, ip
 8005288:	eb19 0309 	adds.w	r3, r9, r9
 800528c:	eb4a 040a 	adc.w	r4, sl, sl
 8005290:	4699      	mov	r9, r3
 8005292:	46a2      	mov	sl, r4
 8005294:	eb19 090b 	adds.w	r9, r9, fp
 8005298:	eb4a 0a0c 	adc.w	sl, sl, ip
 800529c:	f04f 0100 	mov.w	r1, #0
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052b0:	4689      	mov	r9, r1
 80052b2:	4692      	mov	sl, r2
 80052b4:	eb1b 0509 	adds.w	r5, fp, r9
 80052b8:	eb4c 060a 	adc.w	r6, ip, sl
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	4619      	mov	r1, r3
 80052c2:	f04f 0200 	mov.w	r2, #0
 80052c6:	f04f 0300 	mov.w	r3, #0
 80052ca:	f04f 0400 	mov.w	r4, #0
 80052ce:	0094      	lsls	r4, r2, #2
 80052d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80052d4:	008b      	lsls	r3, r1, #2
 80052d6:	461a      	mov	r2, r3
 80052d8:	4623      	mov	r3, r4
 80052da:	4628      	mov	r0, r5
 80052dc:	4631      	mov	r1, r6
 80052de:	f7fb fc9d 	bl	8000c1c <__aeabi_uldivmod>
 80052e2:	4603      	mov	r3, r0
 80052e4:	460c      	mov	r4, r1
 80052e6:	461a      	mov	r2, r3
 80052e8:	4b0e      	ldr	r3, [pc, #56]	; (8005324 <UART_SetConfig+0x6f4>)
 80052ea:	fba3 1302 	umull	r1, r3, r3, r2
 80052ee:	095b      	lsrs	r3, r3, #5
 80052f0:	2164      	movs	r1, #100	; 0x64
 80052f2:	fb01 f303 	mul.w	r3, r1, r3
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	3332      	adds	r3, #50	; 0x32
 80052fc:	4a09      	ldr	r2, [pc, #36]	; (8005324 <UART_SetConfig+0x6f4>)
 80052fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005302:	095b      	lsrs	r3, r3, #5
 8005304:	f003 020f 	and.w	r2, r3, #15
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4442      	add	r2, r8
 800530e:	609a      	str	r2, [r3, #8]
}
 8005310:	e7ff      	b.n	8005312 <UART_SetConfig+0x6e2>
 8005312:	bf00      	nop
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800531c:	40011000 	.word	0x40011000
 8005320:	40011400 	.word	0x40011400
 8005324:	51eb851f 	.word	0x51eb851f

08005328 <__errno>:
 8005328:	4b01      	ldr	r3, [pc, #4]	; (8005330 <__errno+0x8>)
 800532a:	6818      	ldr	r0, [r3, #0]
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	20000010 	.word	0x20000010

08005334 <__libc_init_array>:
 8005334:	b570      	push	{r4, r5, r6, lr}
 8005336:	4e0d      	ldr	r6, [pc, #52]	; (800536c <__libc_init_array+0x38>)
 8005338:	4c0d      	ldr	r4, [pc, #52]	; (8005370 <__libc_init_array+0x3c>)
 800533a:	1ba4      	subs	r4, r4, r6
 800533c:	10a4      	asrs	r4, r4, #2
 800533e:	2500      	movs	r5, #0
 8005340:	42a5      	cmp	r5, r4
 8005342:	d109      	bne.n	8005358 <__libc_init_array+0x24>
 8005344:	4e0b      	ldr	r6, [pc, #44]	; (8005374 <__libc_init_array+0x40>)
 8005346:	4c0c      	ldr	r4, [pc, #48]	; (8005378 <__libc_init_array+0x44>)
 8005348:	f002 f9c0 	bl	80076cc <_init>
 800534c:	1ba4      	subs	r4, r4, r6
 800534e:	10a4      	asrs	r4, r4, #2
 8005350:	2500      	movs	r5, #0
 8005352:	42a5      	cmp	r5, r4
 8005354:	d105      	bne.n	8005362 <__libc_init_array+0x2e>
 8005356:	bd70      	pop	{r4, r5, r6, pc}
 8005358:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800535c:	4798      	blx	r3
 800535e:	3501      	adds	r5, #1
 8005360:	e7ee      	b.n	8005340 <__libc_init_array+0xc>
 8005362:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005366:	4798      	blx	r3
 8005368:	3501      	adds	r5, #1
 800536a:	e7f2      	b.n	8005352 <__libc_init_array+0x1e>
 800536c:	08007ae8 	.word	0x08007ae8
 8005370:	08007ae8 	.word	0x08007ae8
 8005374:	08007ae8 	.word	0x08007ae8
 8005378:	08007aec 	.word	0x08007aec

0800537c <memset>:
 800537c:	4402      	add	r2, r0
 800537e:	4603      	mov	r3, r0
 8005380:	4293      	cmp	r3, r2
 8005382:	d100      	bne.n	8005386 <memset+0xa>
 8005384:	4770      	bx	lr
 8005386:	f803 1b01 	strb.w	r1, [r3], #1
 800538a:	e7f9      	b.n	8005380 <memset+0x4>

0800538c <siprintf>:
 800538c:	b40e      	push	{r1, r2, r3}
 800538e:	b500      	push	{lr}
 8005390:	b09c      	sub	sp, #112	; 0x70
 8005392:	ab1d      	add	r3, sp, #116	; 0x74
 8005394:	9002      	str	r0, [sp, #8]
 8005396:	9006      	str	r0, [sp, #24]
 8005398:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800539c:	4809      	ldr	r0, [pc, #36]	; (80053c4 <siprintf+0x38>)
 800539e:	9107      	str	r1, [sp, #28]
 80053a0:	9104      	str	r1, [sp, #16]
 80053a2:	4909      	ldr	r1, [pc, #36]	; (80053c8 <siprintf+0x3c>)
 80053a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80053a8:	9105      	str	r1, [sp, #20]
 80053aa:	6800      	ldr	r0, [r0, #0]
 80053ac:	9301      	str	r3, [sp, #4]
 80053ae:	a902      	add	r1, sp, #8
 80053b0:	f000 f8b2 	bl	8005518 <_svfiprintf_r>
 80053b4:	9b02      	ldr	r3, [sp, #8]
 80053b6:	2200      	movs	r2, #0
 80053b8:	701a      	strb	r2, [r3, #0]
 80053ba:	b01c      	add	sp, #112	; 0x70
 80053bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80053c0:	b003      	add	sp, #12
 80053c2:	4770      	bx	lr
 80053c4:	20000010 	.word	0x20000010
 80053c8:	ffff0208 	.word	0xffff0208

080053cc <siscanf>:
 80053cc:	b40e      	push	{r1, r2, r3}
 80053ce:	b530      	push	{r4, r5, lr}
 80053d0:	b09c      	sub	sp, #112	; 0x70
 80053d2:	ac1f      	add	r4, sp, #124	; 0x7c
 80053d4:	f44f 7201 	mov.w	r2, #516	; 0x204
 80053d8:	f854 5b04 	ldr.w	r5, [r4], #4
 80053dc:	f8ad 2014 	strh.w	r2, [sp, #20]
 80053e0:	9002      	str	r0, [sp, #8]
 80053e2:	9006      	str	r0, [sp, #24]
 80053e4:	f7fa ff1e 	bl	8000224 <strlen>
 80053e8:	4b0b      	ldr	r3, [pc, #44]	; (8005418 <siscanf+0x4c>)
 80053ea:	9003      	str	r0, [sp, #12]
 80053ec:	9007      	str	r0, [sp, #28]
 80053ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80053f0:	480a      	ldr	r0, [pc, #40]	; (800541c <siscanf+0x50>)
 80053f2:	9401      	str	r4, [sp, #4]
 80053f4:	2300      	movs	r3, #0
 80053f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80053f8:	9314      	str	r3, [sp, #80]	; 0x50
 80053fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80053fe:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005402:	462a      	mov	r2, r5
 8005404:	4623      	mov	r3, r4
 8005406:	a902      	add	r1, sp, #8
 8005408:	6800      	ldr	r0, [r0, #0]
 800540a:	f000 f9d7 	bl	80057bc <__ssvfiscanf_r>
 800540e:	b01c      	add	sp, #112	; 0x70
 8005410:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005414:	b003      	add	sp, #12
 8005416:	4770      	bx	lr
 8005418:	08005421 	.word	0x08005421
 800541c:	20000010 	.word	0x20000010

08005420 <__seofread>:
 8005420:	2000      	movs	r0, #0
 8005422:	4770      	bx	lr

08005424 <_vsiprintf_r>:
 8005424:	b500      	push	{lr}
 8005426:	b09b      	sub	sp, #108	; 0x6c
 8005428:	9100      	str	r1, [sp, #0]
 800542a:	9104      	str	r1, [sp, #16]
 800542c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005430:	9105      	str	r1, [sp, #20]
 8005432:	9102      	str	r1, [sp, #8]
 8005434:	4905      	ldr	r1, [pc, #20]	; (800544c <_vsiprintf_r+0x28>)
 8005436:	9103      	str	r1, [sp, #12]
 8005438:	4669      	mov	r1, sp
 800543a:	f000 f86d 	bl	8005518 <_svfiprintf_r>
 800543e:	9b00      	ldr	r3, [sp, #0]
 8005440:	2200      	movs	r2, #0
 8005442:	701a      	strb	r2, [r3, #0]
 8005444:	b01b      	add	sp, #108	; 0x6c
 8005446:	f85d fb04 	ldr.w	pc, [sp], #4
 800544a:	bf00      	nop
 800544c:	ffff0208 	.word	0xffff0208

08005450 <vsiprintf>:
 8005450:	4613      	mov	r3, r2
 8005452:	460a      	mov	r2, r1
 8005454:	4601      	mov	r1, r0
 8005456:	4802      	ldr	r0, [pc, #8]	; (8005460 <vsiprintf+0x10>)
 8005458:	6800      	ldr	r0, [r0, #0]
 800545a:	f7ff bfe3 	b.w	8005424 <_vsiprintf_r>
 800545e:	bf00      	nop
 8005460:	20000010 	.word	0x20000010

08005464 <__ssputs_r>:
 8005464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005468:	688e      	ldr	r6, [r1, #8]
 800546a:	429e      	cmp	r6, r3
 800546c:	4682      	mov	sl, r0
 800546e:	460c      	mov	r4, r1
 8005470:	4690      	mov	r8, r2
 8005472:	4699      	mov	r9, r3
 8005474:	d837      	bhi.n	80054e6 <__ssputs_r+0x82>
 8005476:	898a      	ldrh	r2, [r1, #12]
 8005478:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800547c:	d031      	beq.n	80054e2 <__ssputs_r+0x7e>
 800547e:	6825      	ldr	r5, [r4, #0]
 8005480:	6909      	ldr	r1, [r1, #16]
 8005482:	1a6f      	subs	r7, r5, r1
 8005484:	6965      	ldr	r5, [r4, #20]
 8005486:	2302      	movs	r3, #2
 8005488:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800548c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005490:	f109 0301 	add.w	r3, r9, #1
 8005494:	443b      	add	r3, r7
 8005496:	429d      	cmp	r5, r3
 8005498:	bf38      	it	cc
 800549a:	461d      	movcc	r5, r3
 800549c:	0553      	lsls	r3, r2, #21
 800549e:	d530      	bpl.n	8005502 <__ssputs_r+0x9e>
 80054a0:	4629      	mov	r1, r5
 80054a2:	f000 ffd7 	bl	8006454 <_malloc_r>
 80054a6:	4606      	mov	r6, r0
 80054a8:	b950      	cbnz	r0, 80054c0 <__ssputs_r+0x5c>
 80054aa:	230c      	movs	r3, #12
 80054ac:	f8ca 3000 	str.w	r3, [sl]
 80054b0:	89a3      	ldrh	r3, [r4, #12]
 80054b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054b6:	81a3      	strh	r3, [r4, #12]
 80054b8:	f04f 30ff 	mov.w	r0, #4294967295
 80054bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054c0:	463a      	mov	r2, r7
 80054c2:	6921      	ldr	r1, [r4, #16]
 80054c4:	f000 ff54 	bl	8006370 <memcpy>
 80054c8:	89a3      	ldrh	r3, [r4, #12]
 80054ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80054ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054d2:	81a3      	strh	r3, [r4, #12]
 80054d4:	6126      	str	r6, [r4, #16]
 80054d6:	6165      	str	r5, [r4, #20]
 80054d8:	443e      	add	r6, r7
 80054da:	1bed      	subs	r5, r5, r7
 80054dc:	6026      	str	r6, [r4, #0]
 80054de:	60a5      	str	r5, [r4, #8]
 80054e0:	464e      	mov	r6, r9
 80054e2:	454e      	cmp	r6, r9
 80054e4:	d900      	bls.n	80054e8 <__ssputs_r+0x84>
 80054e6:	464e      	mov	r6, r9
 80054e8:	4632      	mov	r2, r6
 80054ea:	4641      	mov	r1, r8
 80054ec:	6820      	ldr	r0, [r4, #0]
 80054ee:	f000 ff4a 	bl	8006386 <memmove>
 80054f2:	68a3      	ldr	r3, [r4, #8]
 80054f4:	1b9b      	subs	r3, r3, r6
 80054f6:	60a3      	str	r3, [r4, #8]
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	441e      	add	r6, r3
 80054fc:	6026      	str	r6, [r4, #0]
 80054fe:	2000      	movs	r0, #0
 8005500:	e7dc      	b.n	80054bc <__ssputs_r+0x58>
 8005502:	462a      	mov	r2, r5
 8005504:	f001 f800 	bl	8006508 <_realloc_r>
 8005508:	4606      	mov	r6, r0
 800550a:	2800      	cmp	r0, #0
 800550c:	d1e2      	bne.n	80054d4 <__ssputs_r+0x70>
 800550e:	6921      	ldr	r1, [r4, #16]
 8005510:	4650      	mov	r0, sl
 8005512:	f000 ff51 	bl	80063b8 <_free_r>
 8005516:	e7c8      	b.n	80054aa <__ssputs_r+0x46>

08005518 <_svfiprintf_r>:
 8005518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800551c:	461d      	mov	r5, r3
 800551e:	898b      	ldrh	r3, [r1, #12]
 8005520:	061f      	lsls	r7, r3, #24
 8005522:	b09d      	sub	sp, #116	; 0x74
 8005524:	4680      	mov	r8, r0
 8005526:	460c      	mov	r4, r1
 8005528:	4616      	mov	r6, r2
 800552a:	d50f      	bpl.n	800554c <_svfiprintf_r+0x34>
 800552c:	690b      	ldr	r3, [r1, #16]
 800552e:	b96b      	cbnz	r3, 800554c <_svfiprintf_r+0x34>
 8005530:	2140      	movs	r1, #64	; 0x40
 8005532:	f000 ff8f 	bl	8006454 <_malloc_r>
 8005536:	6020      	str	r0, [r4, #0]
 8005538:	6120      	str	r0, [r4, #16]
 800553a:	b928      	cbnz	r0, 8005548 <_svfiprintf_r+0x30>
 800553c:	230c      	movs	r3, #12
 800553e:	f8c8 3000 	str.w	r3, [r8]
 8005542:	f04f 30ff 	mov.w	r0, #4294967295
 8005546:	e0c8      	b.n	80056da <_svfiprintf_r+0x1c2>
 8005548:	2340      	movs	r3, #64	; 0x40
 800554a:	6163      	str	r3, [r4, #20]
 800554c:	2300      	movs	r3, #0
 800554e:	9309      	str	r3, [sp, #36]	; 0x24
 8005550:	2320      	movs	r3, #32
 8005552:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005556:	2330      	movs	r3, #48	; 0x30
 8005558:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800555c:	9503      	str	r5, [sp, #12]
 800555e:	f04f 0b01 	mov.w	fp, #1
 8005562:	4637      	mov	r7, r6
 8005564:	463d      	mov	r5, r7
 8005566:	f815 3b01 	ldrb.w	r3, [r5], #1
 800556a:	b10b      	cbz	r3, 8005570 <_svfiprintf_r+0x58>
 800556c:	2b25      	cmp	r3, #37	; 0x25
 800556e:	d13e      	bne.n	80055ee <_svfiprintf_r+0xd6>
 8005570:	ebb7 0a06 	subs.w	sl, r7, r6
 8005574:	d00b      	beq.n	800558e <_svfiprintf_r+0x76>
 8005576:	4653      	mov	r3, sl
 8005578:	4632      	mov	r2, r6
 800557a:	4621      	mov	r1, r4
 800557c:	4640      	mov	r0, r8
 800557e:	f7ff ff71 	bl	8005464 <__ssputs_r>
 8005582:	3001      	adds	r0, #1
 8005584:	f000 80a4 	beq.w	80056d0 <_svfiprintf_r+0x1b8>
 8005588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800558a:	4453      	add	r3, sl
 800558c:	9309      	str	r3, [sp, #36]	; 0x24
 800558e:	783b      	ldrb	r3, [r7, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 809d 	beq.w	80056d0 <_svfiprintf_r+0x1b8>
 8005596:	2300      	movs	r3, #0
 8005598:	f04f 32ff 	mov.w	r2, #4294967295
 800559c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055a0:	9304      	str	r3, [sp, #16]
 80055a2:	9307      	str	r3, [sp, #28]
 80055a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055a8:	931a      	str	r3, [sp, #104]	; 0x68
 80055aa:	462f      	mov	r7, r5
 80055ac:	2205      	movs	r2, #5
 80055ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 80055b2:	4850      	ldr	r0, [pc, #320]	; (80056f4 <_svfiprintf_r+0x1dc>)
 80055b4:	f7fa fe44 	bl	8000240 <memchr>
 80055b8:	9b04      	ldr	r3, [sp, #16]
 80055ba:	b9d0      	cbnz	r0, 80055f2 <_svfiprintf_r+0xda>
 80055bc:	06d9      	lsls	r1, r3, #27
 80055be:	bf44      	itt	mi
 80055c0:	2220      	movmi	r2, #32
 80055c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80055c6:	071a      	lsls	r2, r3, #28
 80055c8:	bf44      	itt	mi
 80055ca:	222b      	movmi	r2, #43	; 0x2b
 80055cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80055d0:	782a      	ldrb	r2, [r5, #0]
 80055d2:	2a2a      	cmp	r2, #42	; 0x2a
 80055d4:	d015      	beq.n	8005602 <_svfiprintf_r+0xea>
 80055d6:	9a07      	ldr	r2, [sp, #28]
 80055d8:	462f      	mov	r7, r5
 80055da:	2000      	movs	r0, #0
 80055dc:	250a      	movs	r5, #10
 80055de:	4639      	mov	r1, r7
 80055e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055e4:	3b30      	subs	r3, #48	; 0x30
 80055e6:	2b09      	cmp	r3, #9
 80055e8:	d94d      	bls.n	8005686 <_svfiprintf_r+0x16e>
 80055ea:	b1b8      	cbz	r0, 800561c <_svfiprintf_r+0x104>
 80055ec:	e00f      	b.n	800560e <_svfiprintf_r+0xf6>
 80055ee:	462f      	mov	r7, r5
 80055f0:	e7b8      	b.n	8005564 <_svfiprintf_r+0x4c>
 80055f2:	4a40      	ldr	r2, [pc, #256]	; (80056f4 <_svfiprintf_r+0x1dc>)
 80055f4:	1a80      	subs	r0, r0, r2
 80055f6:	fa0b f000 	lsl.w	r0, fp, r0
 80055fa:	4318      	orrs	r0, r3
 80055fc:	9004      	str	r0, [sp, #16]
 80055fe:	463d      	mov	r5, r7
 8005600:	e7d3      	b.n	80055aa <_svfiprintf_r+0x92>
 8005602:	9a03      	ldr	r2, [sp, #12]
 8005604:	1d11      	adds	r1, r2, #4
 8005606:	6812      	ldr	r2, [r2, #0]
 8005608:	9103      	str	r1, [sp, #12]
 800560a:	2a00      	cmp	r2, #0
 800560c:	db01      	blt.n	8005612 <_svfiprintf_r+0xfa>
 800560e:	9207      	str	r2, [sp, #28]
 8005610:	e004      	b.n	800561c <_svfiprintf_r+0x104>
 8005612:	4252      	negs	r2, r2
 8005614:	f043 0302 	orr.w	r3, r3, #2
 8005618:	9207      	str	r2, [sp, #28]
 800561a:	9304      	str	r3, [sp, #16]
 800561c:	783b      	ldrb	r3, [r7, #0]
 800561e:	2b2e      	cmp	r3, #46	; 0x2e
 8005620:	d10c      	bne.n	800563c <_svfiprintf_r+0x124>
 8005622:	787b      	ldrb	r3, [r7, #1]
 8005624:	2b2a      	cmp	r3, #42	; 0x2a
 8005626:	d133      	bne.n	8005690 <_svfiprintf_r+0x178>
 8005628:	9b03      	ldr	r3, [sp, #12]
 800562a:	1d1a      	adds	r2, r3, #4
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	9203      	str	r2, [sp, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	bfb8      	it	lt
 8005634:	f04f 33ff 	movlt.w	r3, #4294967295
 8005638:	3702      	adds	r7, #2
 800563a:	9305      	str	r3, [sp, #20]
 800563c:	4d2e      	ldr	r5, [pc, #184]	; (80056f8 <_svfiprintf_r+0x1e0>)
 800563e:	7839      	ldrb	r1, [r7, #0]
 8005640:	2203      	movs	r2, #3
 8005642:	4628      	mov	r0, r5
 8005644:	f7fa fdfc 	bl	8000240 <memchr>
 8005648:	b138      	cbz	r0, 800565a <_svfiprintf_r+0x142>
 800564a:	2340      	movs	r3, #64	; 0x40
 800564c:	1b40      	subs	r0, r0, r5
 800564e:	fa03 f000 	lsl.w	r0, r3, r0
 8005652:	9b04      	ldr	r3, [sp, #16]
 8005654:	4303      	orrs	r3, r0
 8005656:	3701      	adds	r7, #1
 8005658:	9304      	str	r3, [sp, #16]
 800565a:	7839      	ldrb	r1, [r7, #0]
 800565c:	4827      	ldr	r0, [pc, #156]	; (80056fc <_svfiprintf_r+0x1e4>)
 800565e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005662:	2206      	movs	r2, #6
 8005664:	1c7e      	adds	r6, r7, #1
 8005666:	f7fa fdeb 	bl	8000240 <memchr>
 800566a:	2800      	cmp	r0, #0
 800566c:	d038      	beq.n	80056e0 <_svfiprintf_r+0x1c8>
 800566e:	4b24      	ldr	r3, [pc, #144]	; (8005700 <_svfiprintf_r+0x1e8>)
 8005670:	bb13      	cbnz	r3, 80056b8 <_svfiprintf_r+0x1a0>
 8005672:	9b03      	ldr	r3, [sp, #12]
 8005674:	3307      	adds	r3, #7
 8005676:	f023 0307 	bic.w	r3, r3, #7
 800567a:	3308      	adds	r3, #8
 800567c:	9303      	str	r3, [sp, #12]
 800567e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005680:	444b      	add	r3, r9
 8005682:	9309      	str	r3, [sp, #36]	; 0x24
 8005684:	e76d      	b.n	8005562 <_svfiprintf_r+0x4a>
 8005686:	fb05 3202 	mla	r2, r5, r2, r3
 800568a:	2001      	movs	r0, #1
 800568c:	460f      	mov	r7, r1
 800568e:	e7a6      	b.n	80055de <_svfiprintf_r+0xc6>
 8005690:	2300      	movs	r3, #0
 8005692:	3701      	adds	r7, #1
 8005694:	9305      	str	r3, [sp, #20]
 8005696:	4619      	mov	r1, r3
 8005698:	250a      	movs	r5, #10
 800569a:	4638      	mov	r0, r7
 800569c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056a0:	3a30      	subs	r2, #48	; 0x30
 80056a2:	2a09      	cmp	r2, #9
 80056a4:	d903      	bls.n	80056ae <_svfiprintf_r+0x196>
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0c8      	beq.n	800563c <_svfiprintf_r+0x124>
 80056aa:	9105      	str	r1, [sp, #20]
 80056ac:	e7c6      	b.n	800563c <_svfiprintf_r+0x124>
 80056ae:	fb05 2101 	mla	r1, r5, r1, r2
 80056b2:	2301      	movs	r3, #1
 80056b4:	4607      	mov	r7, r0
 80056b6:	e7f0      	b.n	800569a <_svfiprintf_r+0x182>
 80056b8:	ab03      	add	r3, sp, #12
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	4622      	mov	r2, r4
 80056be:	4b11      	ldr	r3, [pc, #68]	; (8005704 <_svfiprintf_r+0x1ec>)
 80056c0:	a904      	add	r1, sp, #16
 80056c2:	4640      	mov	r0, r8
 80056c4:	f3af 8000 	nop.w
 80056c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80056cc:	4681      	mov	r9, r0
 80056ce:	d1d6      	bne.n	800567e <_svfiprintf_r+0x166>
 80056d0:	89a3      	ldrh	r3, [r4, #12]
 80056d2:	065b      	lsls	r3, r3, #25
 80056d4:	f53f af35 	bmi.w	8005542 <_svfiprintf_r+0x2a>
 80056d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056da:	b01d      	add	sp, #116	; 0x74
 80056dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056e0:	ab03      	add	r3, sp, #12
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	4622      	mov	r2, r4
 80056e6:	4b07      	ldr	r3, [pc, #28]	; (8005704 <_svfiprintf_r+0x1ec>)
 80056e8:	a904      	add	r1, sp, #16
 80056ea:	4640      	mov	r0, r8
 80056ec:	f000 fa2c 	bl	8005b48 <_printf_i>
 80056f0:	e7ea      	b.n	80056c8 <_svfiprintf_r+0x1b0>
 80056f2:	bf00      	nop
 80056f4:	0800774c 	.word	0x0800774c
 80056f8:	08007752 	.word	0x08007752
 80056fc:	08007756 	.word	0x08007756
 8005700:	00000000 	.word	0x00000000
 8005704:	08005465 	.word	0x08005465

08005708 <_sungetc_r>:
 8005708:	b538      	push	{r3, r4, r5, lr}
 800570a:	1c4b      	adds	r3, r1, #1
 800570c:	4614      	mov	r4, r2
 800570e:	d103      	bne.n	8005718 <_sungetc_r+0x10>
 8005710:	f04f 35ff 	mov.w	r5, #4294967295
 8005714:	4628      	mov	r0, r5
 8005716:	bd38      	pop	{r3, r4, r5, pc}
 8005718:	8993      	ldrh	r3, [r2, #12]
 800571a:	f023 0320 	bic.w	r3, r3, #32
 800571e:	8193      	strh	r3, [r2, #12]
 8005720:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005722:	6852      	ldr	r2, [r2, #4]
 8005724:	b2cd      	uxtb	r5, r1
 8005726:	b18b      	cbz	r3, 800574c <_sungetc_r+0x44>
 8005728:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800572a:	4293      	cmp	r3, r2
 800572c:	dd08      	ble.n	8005740 <_sungetc_r+0x38>
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	1e5a      	subs	r2, r3, #1
 8005732:	6022      	str	r2, [r4, #0]
 8005734:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005738:	6863      	ldr	r3, [r4, #4]
 800573a:	3301      	adds	r3, #1
 800573c:	6063      	str	r3, [r4, #4]
 800573e:	e7e9      	b.n	8005714 <_sungetc_r+0xc>
 8005740:	4621      	mov	r1, r4
 8005742:	f000 fdb7 	bl	80062b4 <__submore>
 8005746:	2800      	cmp	r0, #0
 8005748:	d0f1      	beq.n	800572e <_sungetc_r+0x26>
 800574a:	e7e1      	b.n	8005710 <_sungetc_r+0x8>
 800574c:	6921      	ldr	r1, [r4, #16]
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	b151      	cbz	r1, 8005768 <_sungetc_r+0x60>
 8005752:	4299      	cmp	r1, r3
 8005754:	d208      	bcs.n	8005768 <_sungetc_r+0x60>
 8005756:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800575a:	42a9      	cmp	r1, r5
 800575c:	d104      	bne.n	8005768 <_sungetc_r+0x60>
 800575e:	3b01      	subs	r3, #1
 8005760:	3201      	adds	r2, #1
 8005762:	6023      	str	r3, [r4, #0]
 8005764:	6062      	str	r2, [r4, #4]
 8005766:	e7d5      	b.n	8005714 <_sungetc_r+0xc>
 8005768:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800576c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005770:	6363      	str	r3, [r4, #52]	; 0x34
 8005772:	2303      	movs	r3, #3
 8005774:	63a3      	str	r3, [r4, #56]	; 0x38
 8005776:	4623      	mov	r3, r4
 8005778:	f803 5f46 	strb.w	r5, [r3, #70]!
 800577c:	6023      	str	r3, [r4, #0]
 800577e:	2301      	movs	r3, #1
 8005780:	e7dc      	b.n	800573c <_sungetc_r+0x34>

08005782 <__ssrefill_r>:
 8005782:	b510      	push	{r4, lr}
 8005784:	460c      	mov	r4, r1
 8005786:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005788:	b169      	cbz	r1, 80057a6 <__ssrefill_r+0x24>
 800578a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800578e:	4299      	cmp	r1, r3
 8005790:	d001      	beq.n	8005796 <__ssrefill_r+0x14>
 8005792:	f000 fe11 	bl	80063b8 <_free_r>
 8005796:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005798:	6063      	str	r3, [r4, #4]
 800579a:	2000      	movs	r0, #0
 800579c:	6360      	str	r0, [r4, #52]	; 0x34
 800579e:	b113      	cbz	r3, 80057a6 <__ssrefill_r+0x24>
 80057a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80057a2:	6023      	str	r3, [r4, #0]
 80057a4:	bd10      	pop	{r4, pc}
 80057a6:	6923      	ldr	r3, [r4, #16]
 80057a8:	6023      	str	r3, [r4, #0]
 80057aa:	2300      	movs	r3, #0
 80057ac:	6063      	str	r3, [r4, #4]
 80057ae:	89a3      	ldrh	r3, [r4, #12]
 80057b0:	f043 0320 	orr.w	r3, r3, #32
 80057b4:	81a3      	strh	r3, [r4, #12]
 80057b6:	f04f 30ff 	mov.w	r0, #4294967295
 80057ba:	e7f3      	b.n	80057a4 <__ssrefill_r+0x22>

080057bc <__ssvfiscanf_r>:
 80057bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c0:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80057c4:	460c      	mov	r4, r1
 80057c6:	2100      	movs	r1, #0
 80057c8:	9144      	str	r1, [sp, #272]	; 0x110
 80057ca:	9145      	str	r1, [sp, #276]	; 0x114
 80057cc:	499f      	ldr	r1, [pc, #636]	; (8005a4c <__ssvfiscanf_r+0x290>)
 80057ce:	91a0      	str	r1, [sp, #640]	; 0x280
 80057d0:	f10d 0804 	add.w	r8, sp, #4
 80057d4:	499e      	ldr	r1, [pc, #632]	; (8005a50 <__ssvfiscanf_r+0x294>)
 80057d6:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8005a54 <__ssvfiscanf_r+0x298>
 80057da:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80057de:	4606      	mov	r6, r0
 80057e0:	4692      	mov	sl, r2
 80057e2:	91a1      	str	r1, [sp, #644]	; 0x284
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	270a      	movs	r7, #10
 80057e8:	f89a 3000 	ldrb.w	r3, [sl]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 812a 	beq.w	8005a46 <__ssvfiscanf_r+0x28a>
 80057f2:	4655      	mov	r5, sl
 80057f4:	f000 fd9c 	bl	8006330 <__locale_ctype_ptr>
 80057f8:	f815 bb01 	ldrb.w	fp, [r5], #1
 80057fc:	4458      	add	r0, fp
 80057fe:	7843      	ldrb	r3, [r0, #1]
 8005800:	f013 0308 	ands.w	r3, r3, #8
 8005804:	d01c      	beq.n	8005840 <__ssvfiscanf_r+0x84>
 8005806:	6863      	ldr	r3, [r4, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	dd12      	ble.n	8005832 <__ssvfiscanf_r+0x76>
 800580c:	f000 fd90 	bl	8006330 <__locale_ctype_ptr>
 8005810:	6823      	ldr	r3, [r4, #0]
 8005812:	781a      	ldrb	r2, [r3, #0]
 8005814:	4410      	add	r0, r2
 8005816:	7842      	ldrb	r2, [r0, #1]
 8005818:	0712      	lsls	r2, r2, #28
 800581a:	d401      	bmi.n	8005820 <__ssvfiscanf_r+0x64>
 800581c:	46aa      	mov	sl, r5
 800581e:	e7e3      	b.n	80057e8 <__ssvfiscanf_r+0x2c>
 8005820:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005822:	3201      	adds	r2, #1
 8005824:	9245      	str	r2, [sp, #276]	; 0x114
 8005826:	6862      	ldr	r2, [r4, #4]
 8005828:	3301      	adds	r3, #1
 800582a:	3a01      	subs	r2, #1
 800582c:	6062      	str	r2, [r4, #4]
 800582e:	6023      	str	r3, [r4, #0]
 8005830:	e7e9      	b.n	8005806 <__ssvfiscanf_r+0x4a>
 8005832:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005834:	4621      	mov	r1, r4
 8005836:	4630      	mov	r0, r6
 8005838:	4798      	blx	r3
 800583a:	2800      	cmp	r0, #0
 800583c:	d0e6      	beq.n	800580c <__ssvfiscanf_r+0x50>
 800583e:	e7ed      	b.n	800581c <__ssvfiscanf_r+0x60>
 8005840:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8005844:	f040 8082 	bne.w	800594c <__ssvfiscanf_r+0x190>
 8005848:	9343      	str	r3, [sp, #268]	; 0x10c
 800584a:	9341      	str	r3, [sp, #260]	; 0x104
 800584c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8005850:	2b2a      	cmp	r3, #42	; 0x2a
 8005852:	d103      	bne.n	800585c <__ssvfiscanf_r+0xa0>
 8005854:	2310      	movs	r3, #16
 8005856:	9341      	str	r3, [sp, #260]	; 0x104
 8005858:	f10a 0502 	add.w	r5, sl, #2
 800585c:	46aa      	mov	sl, r5
 800585e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8005862:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8005866:	2a09      	cmp	r2, #9
 8005868:	d922      	bls.n	80058b0 <__ssvfiscanf_r+0xf4>
 800586a:	2203      	movs	r2, #3
 800586c:	4879      	ldr	r0, [pc, #484]	; (8005a54 <__ssvfiscanf_r+0x298>)
 800586e:	f7fa fce7 	bl	8000240 <memchr>
 8005872:	b138      	cbz	r0, 8005884 <__ssvfiscanf_r+0xc8>
 8005874:	eba0 0309 	sub.w	r3, r0, r9
 8005878:	2001      	movs	r0, #1
 800587a:	4098      	lsls	r0, r3
 800587c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800587e:	4318      	orrs	r0, r3
 8005880:	9041      	str	r0, [sp, #260]	; 0x104
 8005882:	46aa      	mov	sl, r5
 8005884:	f89a 3000 	ldrb.w	r3, [sl]
 8005888:	2b67      	cmp	r3, #103	; 0x67
 800588a:	f10a 0501 	add.w	r5, sl, #1
 800588e:	d82b      	bhi.n	80058e8 <__ssvfiscanf_r+0x12c>
 8005890:	2b65      	cmp	r3, #101	; 0x65
 8005892:	f080 809f 	bcs.w	80059d4 <__ssvfiscanf_r+0x218>
 8005896:	2b47      	cmp	r3, #71	; 0x47
 8005898:	d810      	bhi.n	80058bc <__ssvfiscanf_r+0x100>
 800589a:	2b45      	cmp	r3, #69	; 0x45
 800589c:	f080 809a 	bcs.w	80059d4 <__ssvfiscanf_r+0x218>
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d06c      	beq.n	800597e <__ssvfiscanf_r+0x1c2>
 80058a4:	2b25      	cmp	r3, #37	; 0x25
 80058a6:	d051      	beq.n	800594c <__ssvfiscanf_r+0x190>
 80058a8:	2303      	movs	r3, #3
 80058aa:	9347      	str	r3, [sp, #284]	; 0x11c
 80058ac:	9742      	str	r7, [sp, #264]	; 0x108
 80058ae:	e027      	b.n	8005900 <__ssvfiscanf_r+0x144>
 80058b0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80058b2:	fb07 1303 	mla	r3, r7, r3, r1
 80058b6:	3b30      	subs	r3, #48	; 0x30
 80058b8:	9343      	str	r3, [sp, #268]	; 0x10c
 80058ba:	e7cf      	b.n	800585c <__ssvfiscanf_r+0xa0>
 80058bc:	2b5b      	cmp	r3, #91	; 0x5b
 80058be:	d06a      	beq.n	8005996 <__ssvfiscanf_r+0x1da>
 80058c0:	d80c      	bhi.n	80058dc <__ssvfiscanf_r+0x120>
 80058c2:	2b58      	cmp	r3, #88	; 0x58
 80058c4:	d1f0      	bne.n	80058a8 <__ssvfiscanf_r+0xec>
 80058c6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80058c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058cc:	9241      	str	r2, [sp, #260]	; 0x104
 80058ce:	2210      	movs	r2, #16
 80058d0:	9242      	str	r2, [sp, #264]	; 0x108
 80058d2:	2b6e      	cmp	r3, #110	; 0x6e
 80058d4:	bf8c      	ite	hi
 80058d6:	2304      	movhi	r3, #4
 80058d8:	2303      	movls	r3, #3
 80058da:	e010      	b.n	80058fe <__ssvfiscanf_r+0x142>
 80058dc:	2b63      	cmp	r3, #99	; 0x63
 80058de:	d065      	beq.n	80059ac <__ssvfiscanf_r+0x1f0>
 80058e0:	2b64      	cmp	r3, #100	; 0x64
 80058e2:	d1e1      	bne.n	80058a8 <__ssvfiscanf_r+0xec>
 80058e4:	9742      	str	r7, [sp, #264]	; 0x108
 80058e6:	e7f4      	b.n	80058d2 <__ssvfiscanf_r+0x116>
 80058e8:	2b70      	cmp	r3, #112	; 0x70
 80058ea:	d04b      	beq.n	8005984 <__ssvfiscanf_r+0x1c8>
 80058ec:	d826      	bhi.n	800593c <__ssvfiscanf_r+0x180>
 80058ee:	2b6e      	cmp	r3, #110	; 0x6e
 80058f0:	d062      	beq.n	80059b8 <__ssvfiscanf_r+0x1fc>
 80058f2:	d84c      	bhi.n	800598e <__ssvfiscanf_r+0x1d2>
 80058f4:	2b69      	cmp	r3, #105	; 0x69
 80058f6:	d1d7      	bne.n	80058a8 <__ssvfiscanf_r+0xec>
 80058f8:	2300      	movs	r3, #0
 80058fa:	9342      	str	r3, [sp, #264]	; 0x108
 80058fc:	2303      	movs	r3, #3
 80058fe:	9347      	str	r3, [sp, #284]	; 0x11c
 8005900:	6863      	ldr	r3, [r4, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	dd68      	ble.n	80059d8 <__ssvfiscanf_r+0x21c>
 8005906:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005908:	0659      	lsls	r1, r3, #25
 800590a:	d407      	bmi.n	800591c <__ssvfiscanf_r+0x160>
 800590c:	f000 fd10 	bl	8006330 <__locale_ctype_ptr>
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	781a      	ldrb	r2, [r3, #0]
 8005914:	4410      	add	r0, r2
 8005916:	7842      	ldrb	r2, [r0, #1]
 8005918:	0712      	lsls	r2, r2, #28
 800591a:	d464      	bmi.n	80059e6 <__ssvfiscanf_r+0x22a>
 800591c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800591e:	2b02      	cmp	r3, #2
 8005920:	dc73      	bgt.n	8005a0a <__ssvfiscanf_r+0x24e>
 8005922:	466b      	mov	r3, sp
 8005924:	4622      	mov	r2, r4
 8005926:	a941      	add	r1, sp, #260	; 0x104
 8005928:	4630      	mov	r0, r6
 800592a:	f000 fa1f 	bl	8005d6c <_scanf_chars>
 800592e:	2801      	cmp	r0, #1
 8005930:	f000 8089 	beq.w	8005a46 <__ssvfiscanf_r+0x28a>
 8005934:	2802      	cmp	r0, #2
 8005936:	f47f af71 	bne.w	800581c <__ssvfiscanf_r+0x60>
 800593a:	e01d      	b.n	8005978 <__ssvfiscanf_r+0x1bc>
 800593c:	2b75      	cmp	r3, #117	; 0x75
 800593e:	d0d1      	beq.n	80058e4 <__ssvfiscanf_r+0x128>
 8005940:	2b78      	cmp	r3, #120	; 0x78
 8005942:	d0c0      	beq.n	80058c6 <__ssvfiscanf_r+0x10a>
 8005944:	2b73      	cmp	r3, #115	; 0x73
 8005946:	d1af      	bne.n	80058a8 <__ssvfiscanf_r+0xec>
 8005948:	2302      	movs	r3, #2
 800594a:	e7d8      	b.n	80058fe <__ssvfiscanf_r+0x142>
 800594c:	6863      	ldr	r3, [r4, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	dd0c      	ble.n	800596c <__ssvfiscanf_r+0x1b0>
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	781a      	ldrb	r2, [r3, #0]
 8005956:	455a      	cmp	r2, fp
 8005958:	d175      	bne.n	8005a46 <__ssvfiscanf_r+0x28a>
 800595a:	3301      	adds	r3, #1
 800595c:	6862      	ldr	r2, [r4, #4]
 800595e:	6023      	str	r3, [r4, #0]
 8005960:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005962:	3a01      	subs	r2, #1
 8005964:	3301      	adds	r3, #1
 8005966:	6062      	str	r2, [r4, #4]
 8005968:	9345      	str	r3, [sp, #276]	; 0x114
 800596a:	e757      	b.n	800581c <__ssvfiscanf_r+0x60>
 800596c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800596e:	4621      	mov	r1, r4
 8005970:	4630      	mov	r0, r6
 8005972:	4798      	blx	r3
 8005974:	2800      	cmp	r0, #0
 8005976:	d0ec      	beq.n	8005952 <__ssvfiscanf_r+0x196>
 8005978:	9844      	ldr	r0, [sp, #272]	; 0x110
 800597a:	2800      	cmp	r0, #0
 800597c:	d159      	bne.n	8005a32 <__ssvfiscanf_r+0x276>
 800597e:	f04f 30ff 	mov.w	r0, #4294967295
 8005982:	e05c      	b.n	8005a3e <__ssvfiscanf_r+0x282>
 8005984:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005986:	f042 0220 	orr.w	r2, r2, #32
 800598a:	9241      	str	r2, [sp, #260]	; 0x104
 800598c:	e79b      	b.n	80058c6 <__ssvfiscanf_r+0x10a>
 800598e:	2308      	movs	r3, #8
 8005990:	9342      	str	r3, [sp, #264]	; 0x108
 8005992:	2304      	movs	r3, #4
 8005994:	e7b3      	b.n	80058fe <__ssvfiscanf_r+0x142>
 8005996:	4629      	mov	r1, r5
 8005998:	4640      	mov	r0, r8
 800599a:	f000 fb3f 	bl	800601c <__sccl>
 800599e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80059a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059a4:	9341      	str	r3, [sp, #260]	; 0x104
 80059a6:	4605      	mov	r5, r0
 80059a8:	2301      	movs	r3, #1
 80059aa:	e7a8      	b.n	80058fe <__ssvfiscanf_r+0x142>
 80059ac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80059ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059b2:	9341      	str	r3, [sp, #260]	; 0x104
 80059b4:	2300      	movs	r3, #0
 80059b6:	e7a2      	b.n	80058fe <__ssvfiscanf_r+0x142>
 80059b8:	9841      	ldr	r0, [sp, #260]	; 0x104
 80059ba:	06c3      	lsls	r3, r0, #27
 80059bc:	f53f af2e 	bmi.w	800581c <__ssvfiscanf_r+0x60>
 80059c0:	9b00      	ldr	r3, [sp, #0]
 80059c2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80059c4:	1d19      	adds	r1, r3, #4
 80059c6:	9100      	str	r1, [sp, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	07c0      	lsls	r0, r0, #31
 80059cc:	bf4c      	ite	mi
 80059ce:	801a      	strhmi	r2, [r3, #0]
 80059d0:	601a      	strpl	r2, [r3, #0]
 80059d2:	e723      	b.n	800581c <__ssvfiscanf_r+0x60>
 80059d4:	2305      	movs	r3, #5
 80059d6:	e792      	b.n	80058fe <__ssvfiscanf_r+0x142>
 80059d8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80059da:	4621      	mov	r1, r4
 80059dc:	4630      	mov	r0, r6
 80059de:	4798      	blx	r3
 80059e0:	2800      	cmp	r0, #0
 80059e2:	d090      	beq.n	8005906 <__ssvfiscanf_r+0x14a>
 80059e4:	e7c8      	b.n	8005978 <__ssvfiscanf_r+0x1bc>
 80059e6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80059e8:	3201      	adds	r2, #1
 80059ea:	9245      	str	r2, [sp, #276]	; 0x114
 80059ec:	6862      	ldr	r2, [r4, #4]
 80059ee:	3a01      	subs	r2, #1
 80059f0:	2a00      	cmp	r2, #0
 80059f2:	6062      	str	r2, [r4, #4]
 80059f4:	dd02      	ble.n	80059fc <__ssvfiscanf_r+0x240>
 80059f6:	3301      	adds	r3, #1
 80059f8:	6023      	str	r3, [r4, #0]
 80059fa:	e787      	b.n	800590c <__ssvfiscanf_r+0x150>
 80059fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80059fe:	4621      	mov	r1, r4
 8005a00:	4630      	mov	r0, r6
 8005a02:	4798      	blx	r3
 8005a04:	2800      	cmp	r0, #0
 8005a06:	d081      	beq.n	800590c <__ssvfiscanf_r+0x150>
 8005a08:	e7b6      	b.n	8005978 <__ssvfiscanf_r+0x1bc>
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	dc06      	bgt.n	8005a1c <__ssvfiscanf_r+0x260>
 8005a0e:	466b      	mov	r3, sp
 8005a10:	4622      	mov	r2, r4
 8005a12:	a941      	add	r1, sp, #260	; 0x104
 8005a14:	4630      	mov	r0, r6
 8005a16:	f000 fa0d 	bl	8005e34 <_scanf_i>
 8005a1a:	e788      	b.n	800592e <__ssvfiscanf_r+0x172>
 8005a1c:	4b0e      	ldr	r3, [pc, #56]	; (8005a58 <__ssvfiscanf_r+0x29c>)
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f43f aefc 	beq.w	800581c <__ssvfiscanf_r+0x60>
 8005a24:	466b      	mov	r3, sp
 8005a26:	4622      	mov	r2, r4
 8005a28:	a941      	add	r1, sp, #260	; 0x104
 8005a2a:	4630      	mov	r0, r6
 8005a2c:	f3af 8000 	nop.w
 8005a30:	e77d      	b.n	800592e <__ssvfiscanf_r+0x172>
 8005a32:	89a3      	ldrh	r3, [r4, #12]
 8005a34:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005a38:	bf18      	it	ne
 8005a3a:	f04f 30ff 	movne.w	r0, #4294967295
 8005a3e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8005a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a46:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005a48:	e7f9      	b.n	8005a3e <__ssvfiscanf_r+0x282>
 8005a4a:	bf00      	nop
 8005a4c:	08005709 	.word	0x08005709
 8005a50:	08005783 	.word	0x08005783
 8005a54:	08007752 	.word	0x08007752
 8005a58:	00000000 	.word	0x00000000

08005a5c <_printf_common>:
 8005a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a60:	4691      	mov	r9, r2
 8005a62:	461f      	mov	r7, r3
 8005a64:	688a      	ldr	r2, [r1, #8]
 8005a66:	690b      	ldr	r3, [r1, #16]
 8005a68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	bfb8      	it	lt
 8005a70:	4613      	movlt	r3, r2
 8005a72:	f8c9 3000 	str.w	r3, [r9]
 8005a76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a7a:	4606      	mov	r6, r0
 8005a7c:	460c      	mov	r4, r1
 8005a7e:	b112      	cbz	r2, 8005a86 <_printf_common+0x2a>
 8005a80:	3301      	adds	r3, #1
 8005a82:	f8c9 3000 	str.w	r3, [r9]
 8005a86:	6823      	ldr	r3, [r4, #0]
 8005a88:	0699      	lsls	r1, r3, #26
 8005a8a:	bf42      	ittt	mi
 8005a8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005a90:	3302      	addmi	r3, #2
 8005a92:	f8c9 3000 	strmi.w	r3, [r9]
 8005a96:	6825      	ldr	r5, [r4, #0]
 8005a98:	f015 0506 	ands.w	r5, r5, #6
 8005a9c:	d107      	bne.n	8005aae <_printf_common+0x52>
 8005a9e:	f104 0a19 	add.w	sl, r4, #25
 8005aa2:	68e3      	ldr	r3, [r4, #12]
 8005aa4:	f8d9 2000 	ldr.w	r2, [r9]
 8005aa8:	1a9b      	subs	r3, r3, r2
 8005aaa:	42ab      	cmp	r3, r5
 8005aac:	dc28      	bgt.n	8005b00 <_printf_common+0xa4>
 8005aae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005ab2:	6822      	ldr	r2, [r4, #0]
 8005ab4:	3300      	adds	r3, #0
 8005ab6:	bf18      	it	ne
 8005ab8:	2301      	movne	r3, #1
 8005aba:	0692      	lsls	r2, r2, #26
 8005abc:	d42d      	bmi.n	8005b1a <_printf_common+0xbe>
 8005abe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ac2:	4639      	mov	r1, r7
 8005ac4:	4630      	mov	r0, r6
 8005ac6:	47c0      	blx	r8
 8005ac8:	3001      	adds	r0, #1
 8005aca:	d020      	beq.n	8005b0e <_printf_common+0xb2>
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	68e5      	ldr	r5, [r4, #12]
 8005ad0:	f8d9 2000 	ldr.w	r2, [r9]
 8005ad4:	f003 0306 	and.w	r3, r3, #6
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	bf08      	it	eq
 8005adc:	1aad      	subeq	r5, r5, r2
 8005ade:	68a3      	ldr	r3, [r4, #8]
 8005ae0:	6922      	ldr	r2, [r4, #16]
 8005ae2:	bf0c      	ite	eq
 8005ae4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ae8:	2500      	movne	r5, #0
 8005aea:	4293      	cmp	r3, r2
 8005aec:	bfc4      	itt	gt
 8005aee:	1a9b      	subgt	r3, r3, r2
 8005af0:	18ed      	addgt	r5, r5, r3
 8005af2:	f04f 0900 	mov.w	r9, #0
 8005af6:	341a      	adds	r4, #26
 8005af8:	454d      	cmp	r5, r9
 8005afa:	d11a      	bne.n	8005b32 <_printf_common+0xd6>
 8005afc:	2000      	movs	r0, #0
 8005afe:	e008      	b.n	8005b12 <_printf_common+0xb6>
 8005b00:	2301      	movs	r3, #1
 8005b02:	4652      	mov	r2, sl
 8005b04:	4639      	mov	r1, r7
 8005b06:	4630      	mov	r0, r6
 8005b08:	47c0      	blx	r8
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	d103      	bne.n	8005b16 <_printf_common+0xba>
 8005b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b16:	3501      	adds	r5, #1
 8005b18:	e7c3      	b.n	8005aa2 <_printf_common+0x46>
 8005b1a:	18e1      	adds	r1, r4, r3
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	2030      	movs	r0, #48	; 0x30
 8005b20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b24:	4422      	add	r2, r4
 8005b26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b2e:	3302      	adds	r3, #2
 8005b30:	e7c5      	b.n	8005abe <_printf_common+0x62>
 8005b32:	2301      	movs	r3, #1
 8005b34:	4622      	mov	r2, r4
 8005b36:	4639      	mov	r1, r7
 8005b38:	4630      	mov	r0, r6
 8005b3a:	47c0      	blx	r8
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	d0e6      	beq.n	8005b0e <_printf_common+0xb2>
 8005b40:	f109 0901 	add.w	r9, r9, #1
 8005b44:	e7d8      	b.n	8005af8 <_printf_common+0x9c>
	...

08005b48 <_printf_i>:
 8005b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b4c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005b50:	460c      	mov	r4, r1
 8005b52:	7e09      	ldrb	r1, [r1, #24]
 8005b54:	b085      	sub	sp, #20
 8005b56:	296e      	cmp	r1, #110	; 0x6e
 8005b58:	4617      	mov	r7, r2
 8005b5a:	4606      	mov	r6, r0
 8005b5c:	4698      	mov	r8, r3
 8005b5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b60:	f000 80b3 	beq.w	8005cca <_printf_i+0x182>
 8005b64:	d822      	bhi.n	8005bac <_printf_i+0x64>
 8005b66:	2963      	cmp	r1, #99	; 0x63
 8005b68:	d036      	beq.n	8005bd8 <_printf_i+0x90>
 8005b6a:	d80a      	bhi.n	8005b82 <_printf_i+0x3a>
 8005b6c:	2900      	cmp	r1, #0
 8005b6e:	f000 80b9 	beq.w	8005ce4 <_printf_i+0x19c>
 8005b72:	2958      	cmp	r1, #88	; 0x58
 8005b74:	f000 8083 	beq.w	8005c7e <_printf_i+0x136>
 8005b78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b7c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005b80:	e032      	b.n	8005be8 <_printf_i+0xa0>
 8005b82:	2964      	cmp	r1, #100	; 0x64
 8005b84:	d001      	beq.n	8005b8a <_printf_i+0x42>
 8005b86:	2969      	cmp	r1, #105	; 0x69
 8005b88:	d1f6      	bne.n	8005b78 <_printf_i+0x30>
 8005b8a:	6820      	ldr	r0, [r4, #0]
 8005b8c:	6813      	ldr	r3, [r2, #0]
 8005b8e:	0605      	lsls	r5, r0, #24
 8005b90:	f103 0104 	add.w	r1, r3, #4
 8005b94:	d52a      	bpl.n	8005bec <_printf_i+0xa4>
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6011      	str	r1, [r2, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	da03      	bge.n	8005ba6 <_printf_i+0x5e>
 8005b9e:	222d      	movs	r2, #45	; 0x2d
 8005ba0:	425b      	negs	r3, r3
 8005ba2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005ba6:	486f      	ldr	r0, [pc, #444]	; (8005d64 <_printf_i+0x21c>)
 8005ba8:	220a      	movs	r2, #10
 8005baa:	e039      	b.n	8005c20 <_printf_i+0xd8>
 8005bac:	2973      	cmp	r1, #115	; 0x73
 8005bae:	f000 809d 	beq.w	8005cec <_printf_i+0x1a4>
 8005bb2:	d808      	bhi.n	8005bc6 <_printf_i+0x7e>
 8005bb4:	296f      	cmp	r1, #111	; 0x6f
 8005bb6:	d020      	beq.n	8005bfa <_printf_i+0xb2>
 8005bb8:	2970      	cmp	r1, #112	; 0x70
 8005bba:	d1dd      	bne.n	8005b78 <_printf_i+0x30>
 8005bbc:	6823      	ldr	r3, [r4, #0]
 8005bbe:	f043 0320 	orr.w	r3, r3, #32
 8005bc2:	6023      	str	r3, [r4, #0]
 8005bc4:	e003      	b.n	8005bce <_printf_i+0x86>
 8005bc6:	2975      	cmp	r1, #117	; 0x75
 8005bc8:	d017      	beq.n	8005bfa <_printf_i+0xb2>
 8005bca:	2978      	cmp	r1, #120	; 0x78
 8005bcc:	d1d4      	bne.n	8005b78 <_printf_i+0x30>
 8005bce:	2378      	movs	r3, #120	; 0x78
 8005bd0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005bd4:	4864      	ldr	r0, [pc, #400]	; (8005d68 <_printf_i+0x220>)
 8005bd6:	e055      	b.n	8005c84 <_printf_i+0x13c>
 8005bd8:	6813      	ldr	r3, [r2, #0]
 8005bda:	1d19      	adds	r1, r3, #4
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6011      	str	r1, [r2, #0]
 8005be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005be4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005be8:	2301      	movs	r3, #1
 8005bea:	e08c      	b.n	8005d06 <_printf_i+0x1be>
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6011      	str	r1, [r2, #0]
 8005bf0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005bf4:	bf18      	it	ne
 8005bf6:	b21b      	sxthne	r3, r3
 8005bf8:	e7cf      	b.n	8005b9a <_printf_i+0x52>
 8005bfa:	6813      	ldr	r3, [r2, #0]
 8005bfc:	6825      	ldr	r5, [r4, #0]
 8005bfe:	1d18      	adds	r0, r3, #4
 8005c00:	6010      	str	r0, [r2, #0]
 8005c02:	0628      	lsls	r0, r5, #24
 8005c04:	d501      	bpl.n	8005c0a <_printf_i+0xc2>
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	e002      	b.n	8005c10 <_printf_i+0xc8>
 8005c0a:	0668      	lsls	r0, r5, #25
 8005c0c:	d5fb      	bpl.n	8005c06 <_printf_i+0xbe>
 8005c0e:	881b      	ldrh	r3, [r3, #0]
 8005c10:	4854      	ldr	r0, [pc, #336]	; (8005d64 <_printf_i+0x21c>)
 8005c12:	296f      	cmp	r1, #111	; 0x6f
 8005c14:	bf14      	ite	ne
 8005c16:	220a      	movne	r2, #10
 8005c18:	2208      	moveq	r2, #8
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c20:	6865      	ldr	r5, [r4, #4]
 8005c22:	60a5      	str	r5, [r4, #8]
 8005c24:	2d00      	cmp	r5, #0
 8005c26:	f2c0 8095 	blt.w	8005d54 <_printf_i+0x20c>
 8005c2a:	6821      	ldr	r1, [r4, #0]
 8005c2c:	f021 0104 	bic.w	r1, r1, #4
 8005c30:	6021      	str	r1, [r4, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d13d      	bne.n	8005cb2 <_printf_i+0x16a>
 8005c36:	2d00      	cmp	r5, #0
 8005c38:	f040 808e 	bne.w	8005d58 <_printf_i+0x210>
 8005c3c:	4665      	mov	r5, ip
 8005c3e:	2a08      	cmp	r2, #8
 8005c40:	d10b      	bne.n	8005c5a <_printf_i+0x112>
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	07db      	lsls	r3, r3, #31
 8005c46:	d508      	bpl.n	8005c5a <_printf_i+0x112>
 8005c48:	6923      	ldr	r3, [r4, #16]
 8005c4a:	6862      	ldr	r2, [r4, #4]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	bfde      	ittt	le
 8005c50:	2330      	movle	r3, #48	; 0x30
 8005c52:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c56:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c5a:	ebac 0305 	sub.w	r3, ip, r5
 8005c5e:	6123      	str	r3, [r4, #16]
 8005c60:	f8cd 8000 	str.w	r8, [sp]
 8005c64:	463b      	mov	r3, r7
 8005c66:	aa03      	add	r2, sp, #12
 8005c68:	4621      	mov	r1, r4
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	f7ff fef6 	bl	8005a5c <_printf_common>
 8005c70:	3001      	adds	r0, #1
 8005c72:	d14d      	bne.n	8005d10 <_printf_i+0x1c8>
 8005c74:	f04f 30ff 	mov.w	r0, #4294967295
 8005c78:	b005      	add	sp, #20
 8005c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c7e:	4839      	ldr	r0, [pc, #228]	; (8005d64 <_printf_i+0x21c>)
 8005c80:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005c84:	6813      	ldr	r3, [r2, #0]
 8005c86:	6821      	ldr	r1, [r4, #0]
 8005c88:	1d1d      	adds	r5, r3, #4
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6015      	str	r5, [r2, #0]
 8005c8e:	060a      	lsls	r2, r1, #24
 8005c90:	d50b      	bpl.n	8005caa <_printf_i+0x162>
 8005c92:	07ca      	lsls	r2, r1, #31
 8005c94:	bf44      	itt	mi
 8005c96:	f041 0120 	orrmi.w	r1, r1, #32
 8005c9a:	6021      	strmi	r1, [r4, #0]
 8005c9c:	b91b      	cbnz	r3, 8005ca6 <_printf_i+0x15e>
 8005c9e:	6822      	ldr	r2, [r4, #0]
 8005ca0:	f022 0220 	bic.w	r2, r2, #32
 8005ca4:	6022      	str	r2, [r4, #0]
 8005ca6:	2210      	movs	r2, #16
 8005ca8:	e7b7      	b.n	8005c1a <_printf_i+0xd2>
 8005caa:	064d      	lsls	r5, r1, #25
 8005cac:	bf48      	it	mi
 8005cae:	b29b      	uxthmi	r3, r3
 8005cb0:	e7ef      	b.n	8005c92 <_printf_i+0x14a>
 8005cb2:	4665      	mov	r5, ip
 8005cb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005cb8:	fb02 3311 	mls	r3, r2, r1, r3
 8005cbc:	5cc3      	ldrb	r3, [r0, r3]
 8005cbe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	2900      	cmp	r1, #0
 8005cc6:	d1f5      	bne.n	8005cb4 <_printf_i+0x16c>
 8005cc8:	e7b9      	b.n	8005c3e <_printf_i+0xf6>
 8005cca:	6813      	ldr	r3, [r2, #0]
 8005ccc:	6825      	ldr	r5, [r4, #0]
 8005cce:	6961      	ldr	r1, [r4, #20]
 8005cd0:	1d18      	adds	r0, r3, #4
 8005cd2:	6010      	str	r0, [r2, #0]
 8005cd4:	0628      	lsls	r0, r5, #24
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	d501      	bpl.n	8005cde <_printf_i+0x196>
 8005cda:	6019      	str	r1, [r3, #0]
 8005cdc:	e002      	b.n	8005ce4 <_printf_i+0x19c>
 8005cde:	066a      	lsls	r2, r5, #25
 8005ce0:	d5fb      	bpl.n	8005cda <_printf_i+0x192>
 8005ce2:	8019      	strh	r1, [r3, #0]
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	6123      	str	r3, [r4, #16]
 8005ce8:	4665      	mov	r5, ip
 8005cea:	e7b9      	b.n	8005c60 <_printf_i+0x118>
 8005cec:	6813      	ldr	r3, [r2, #0]
 8005cee:	1d19      	adds	r1, r3, #4
 8005cf0:	6011      	str	r1, [r2, #0]
 8005cf2:	681d      	ldr	r5, [r3, #0]
 8005cf4:	6862      	ldr	r2, [r4, #4]
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	f7fa faa1 	bl	8000240 <memchr>
 8005cfe:	b108      	cbz	r0, 8005d04 <_printf_i+0x1bc>
 8005d00:	1b40      	subs	r0, r0, r5
 8005d02:	6060      	str	r0, [r4, #4]
 8005d04:	6863      	ldr	r3, [r4, #4]
 8005d06:	6123      	str	r3, [r4, #16]
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d0e:	e7a7      	b.n	8005c60 <_printf_i+0x118>
 8005d10:	6923      	ldr	r3, [r4, #16]
 8005d12:	462a      	mov	r2, r5
 8005d14:	4639      	mov	r1, r7
 8005d16:	4630      	mov	r0, r6
 8005d18:	47c0      	blx	r8
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	d0aa      	beq.n	8005c74 <_printf_i+0x12c>
 8005d1e:	6823      	ldr	r3, [r4, #0]
 8005d20:	079b      	lsls	r3, r3, #30
 8005d22:	d413      	bmi.n	8005d4c <_printf_i+0x204>
 8005d24:	68e0      	ldr	r0, [r4, #12]
 8005d26:	9b03      	ldr	r3, [sp, #12]
 8005d28:	4298      	cmp	r0, r3
 8005d2a:	bfb8      	it	lt
 8005d2c:	4618      	movlt	r0, r3
 8005d2e:	e7a3      	b.n	8005c78 <_printf_i+0x130>
 8005d30:	2301      	movs	r3, #1
 8005d32:	464a      	mov	r2, r9
 8005d34:	4639      	mov	r1, r7
 8005d36:	4630      	mov	r0, r6
 8005d38:	47c0      	blx	r8
 8005d3a:	3001      	adds	r0, #1
 8005d3c:	d09a      	beq.n	8005c74 <_printf_i+0x12c>
 8005d3e:	3501      	adds	r5, #1
 8005d40:	68e3      	ldr	r3, [r4, #12]
 8005d42:	9a03      	ldr	r2, [sp, #12]
 8005d44:	1a9b      	subs	r3, r3, r2
 8005d46:	42ab      	cmp	r3, r5
 8005d48:	dcf2      	bgt.n	8005d30 <_printf_i+0x1e8>
 8005d4a:	e7eb      	b.n	8005d24 <_printf_i+0x1dc>
 8005d4c:	2500      	movs	r5, #0
 8005d4e:	f104 0919 	add.w	r9, r4, #25
 8005d52:	e7f5      	b.n	8005d40 <_printf_i+0x1f8>
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1ac      	bne.n	8005cb2 <_printf_i+0x16a>
 8005d58:	7803      	ldrb	r3, [r0, #0]
 8005d5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d5e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d62:	e76c      	b.n	8005c3e <_printf_i+0xf6>
 8005d64:	0800775d 	.word	0x0800775d
 8005d68:	0800776e 	.word	0x0800776e

08005d6c <_scanf_chars>:
 8005d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d70:	4615      	mov	r5, r2
 8005d72:	688a      	ldr	r2, [r1, #8]
 8005d74:	4680      	mov	r8, r0
 8005d76:	460c      	mov	r4, r1
 8005d78:	b932      	cbnz	r2, 8005d88 <_scanf_chars+0x1c>
 8005d7a:	698a      	ldr	r2, [r1, #24]
 8005d7c:	2a00      	cmp	r2, #0
 8005d7e:	bf14      	ite	ne
 8005d80:	f04f 32ff 	movne.w	r2, #4294967295
 8005d84:	2201      	moveq	r2, #1
 8005d86:	608a      	str	r2, [r1, #8]
 8005d88:	6822      	ldr	r2, [r4, #0]
 8005d8a:	06d1      	lsls	r1, r2, #27
 8005d8c:	bf5f      	itttt	pl
 8005d8e:	681a      	ldrpl	r2, [r3, #0]
 8005d90:	1d11      	addpl	r1, r2, #4
 8005d92:	6019      	strpl	r1, [r3, #0]
 8005d94:	6817      	ldrpl	r7, [r2, #0]
 8005d96:	2600      	movs	r6, #0
 8005d98:	69a3      	ldr	r3, [r4, #24]
 8005d9a:	b1db      	cbz	r3, 8005dd4 <_scanf_chars+0x68>
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d107      	bne.n	8005db0 <_scanf_chars+0x44>
 8005da0:	682b      	ldr	r3, [r5, #0]
 8005da2:	6962      	ldr	r2, [r4, #20]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	5cd3      	ldrb	r3, [r2, r3]
 8005da8:	b9a3      	cbnz	r3, 8005dd4 <_scanf_chars+0x68>
 8005daa:	2e00      	cmp	r6, #0
 8005dac:	d132      	bne.n	8005e14 <_scanf_chars+0xa8>
 8005dae:	e006      	b.n	8005dbe <_scanf_chars+0x52>
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d007      	beq.n	8005dc4 <_scanf_chars+0x58>
 8005db4:	2e00      	cmp	r6, #0
 8005db6:	d12d      	bne.n	8005e14 <_scanf_chars+0xa8>
 8005db8:	69a3      	ldr	r3, [r4, #24]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d12a      	bne.n	8005e14 <_scanf_chars+0xa8>
 8005dbe:	2001      	movs	r0, #1
 8005dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dc4:	f000 fab4 	bl	8006330 <__locale_ctype_ptr>
 8005dc8:	682b      	ldr	r3, [r5, #0]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	4418      	add	r0, r3
 8005dce:	7843      	ldrb	r3, [r0, #1]
 8005dd0:	071b      	lsls	r3, r3, #28
 8005dd2:	d4ef      	bmi.n	8005db4 <_scanf_chars+0x48>
 8005dd4:	6823      	ldr	r3, [r4, #0]
 8005dd6:	06da      	lsls	r2, r3, #27
 8005dd8:	bf5e      	ittt	pl
 8005dda:	682b      	ldrpl	r3, [r5, #0]
 8005ddc:	781b      	ldrbpl	r3, [r3, #0]
 8005dde:	703b      	strbpl	r3, [r7, #0]
 8005de0:	682a      	ldr	r2, [r5, #0]
 8005de2:	686b      	ldr	r3, [r5, #4]
 8005de4:	f102 0201 	add.w	r2, r2, #1
 8005de8:	602a      	str	r2, [r5, #0]
 8005dea:	68a2      	ldr	r2, [r4, #8]
 8005dec:	f103 33ff 	add.w	r3, r3, #4294967295
 8005df0:	f102 32ff 	add.w	r2, r2, #4294967295
 8005df4:	606b      	str	r3, [r5, #4]
 8005df6:	f106 0601 	add.w	r6, r6, #1
 8005dfa:	bf58      	it	pl
 8005dfc:	3701      	addpl	r7, #1
 8005dfe:	60a2      	str	r2, [r4, #8]
 8005e00:	b142      	cbz	r2, 8005e14 <_scanf_chars+0xa8>
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	dcc8      	bgt.n	8005d98 <_scanf_chars+0x2c>
 8005e06:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005e0a:	4629      	mov	r1, r5
 8005e0c:	4640      	mov	r0, r8
 8005e0e:	4798      	blx	r3
 8005e10:	2800      	cmp	r0, #0
 8005e12:	d0c1      	beq.n	8005d98 <_scanf_chars+0x2c>
 8005e14:	6823      	ldr	r3, [r4, #0]
 8005e16:	f013 0310 	ands.w	r3, r3, #16
 8005e1a:	d105      	bne.n	8005e28 <_scanf_chars+0xbc>
 8005e1c:	68e2      	ldr	r2, [r4, #12]
 8005e1e:	3201      	adds	r2, #1
 8005e20:	60e2      	str	r2, [r4, #12]
 8005e22:	69a2      	ldr	r2, [r4, #24]
 8005e24:	b102      	cbz	r2, 8005e28 <_scanf_chars+0xbc>
 8005e26:	703b      	strb	r3, [r7, #0]
 8005e28:	6923      	ldr	r3, [r4, #16]
 8005e2a:	441e      	add	r6, r3
 8005e2c:	6126      	str	r6, [r4, #16]
 8005e2e:	2000      	movs	r0, #0
 8005e30:	e7c6      	b.n	8005dc0 <_scanf_chars+0x54>
	...

08005e34 <_scanf_i>:
 8005e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e38:	469a      	mov	sl, r3
 8005e3a:	4b74      	ldr	r3, [pc, #464]	; (800600c <_scanf_i+0x1d8>)
 8005e3c:	460c      	mov	r4, r1
 8005e3e:	4683      	mov	fp, r0
 8005e40:	4616      	mov	r6, r2
 8005e42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e46:	b087      	sub	sp, #28
 8005e48:	ab03      	add	r3, sp, #12
 8005e4a:	68a7      	ldr	r7, [r4, #8]
 8005e4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005e50:	4b6f      	ldr	r3, [pc, #444]	; (8006010 <_scanf_i+0x1dc>)
 8005e52:	69a1      	ldr	r1, [r4, #24]
 8005e54:	4a6f      	ldr	r2, [pc, #444]	; (8006014 <_scanf_i+0x1e0>)
 8005e56:	2903      	cmp	r1, #3
 8005e58:	bf08      	it	eq
 8005e5a:	461a      	moveq	r2, r3
 8005e5c:	1e7b      	subs	r3, r7, #1
 8005e5e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8005e62:	bf84      	itt	hi
 8005e64:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005e68:	60a3      	strhi	r3, [r4, #8]
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	9200      	str	r2, [sp, #0]
 8005e6e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005e72:	bf88      	it	hi
 8005e74:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005e78:	f104 091c 	add.w	r9, r4, #28
 8005e7c:	6023      	str	r3, [r4, #0]
 8005e7e:	bf8c      	ite	hi
 8005e80:	197f      	addhi	r7, r7, r5
 8005e82:	2700      	movls	r7, #0
 8005e84:	464b      	mov	r3, r9
 8005e86:	f04f 0800 	mov.w	r8, #0
 8005e8a:	9301      	str	r3, [sp, #4]
 8005e8c:	6831      	ldr	r1, [r6, #0]
 8005e8e:	ab03      	add	r3, sp, #12
 8005e90:	2202      	movs	r2, #2
 8005e92:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005e96:	7809      	ldrb	r1, [r1, #0]
 8005e98:	f7fa f9d2 	bl	8000240 <memchr>
 8005e9c:	9b01      	ldr	r3, [sp, #4]
 8005e9e:	b330      	cbz	r0, 8005eee <_scanf_i+0xba>
 8005ea0:	f1b8 0f01 	cmp.w	r8, #1
 8005ea4:	d15a      	bne.n	8005f5c <_scanf_i+0x128>
 8005ea6:	6862      	ldr	r2, [r4, #4]
 8005ea8:	b92a      	cbnz	r2, 8005eb6 <_scanf_i+0x82>
 8005eaa:	6822      	ldr	r2, [r4, #0]
 8005eac:	2108      	movs	r1, #8
 8005eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eb2:	6061      	str	r1, [r4, #4]
 8005eb4:	6022      	str	r2, [r4, #0]
 8005eb6:	6822      	ldr	r2, [r4, #0]
 8005eb8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005ebc:	6022      	str	r2, [r4, #0]
 8005ebe:	68a2      	ldr	r2, [r4, #8]
 8005ec0:	1e51      	subs	r1, r2, #1
 8005ec2:	60a1      	str	r1, [r4, #8]
 8005ec4:	b19a      	cbz	r2, 8005eee <_scanf_i+0xba>
 8005ec6:	6832      	ldr	r2, [r6, #0]
 8005ec8:	1c51      	adds	r1, r2, #1
 8005eca:	6031      	str	r1, [r6, #0]
 8005ecc:	7812      	ldrb	r2, [r2, #0]
 8005ece:	701a      	strb	r2, [r3, #0]
 8005ed0:	1c5d      	adds	r5, r3, #1
 8005ed2:	6873      	ldr	r3, [r6, #4]
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	6073      	str	r3, [r6, #4]
 8005eda:	dc07      	bgt.n	8005eec <_scanf_i+0xb8>
 8005edc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005ee0:	4631      	mov	r1, r6
 8005ee2:	4658      	mov	r0, fp
 8005ee4:	4798      	blx	r3
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	f040 8086 	bne.w	8005ff8 <_scanf_i+0x1c4>
 8005eec:	462b      	mov	r3, r5
 8005eee:	f108 0801 	add.w	r8, r8, #1
 8005ef2:	f1b8 0f03 	cmp.w	r8, #3
 8005ef6:	d1c8      	bne.n	8005e8a <_scanf_i+0x56>
 8005ef8:	6862      	ldr	r2, [r4, #4]
 8005efa:	b90a      	cbnz	r2, 8005f00 <_scanf_i+0xcc>
 8005efc:	220a      	movs	r2, #10
 8005efe:	6062      	str	r2, [r4, #4]
 8005f00:	6862      	ldr	r2, [r4, #4]
 8005f02:	4945      	ldr	r1, [pc, #276]	; (8006018 <_scanf_i+0x1e4>)
 8005f04:	6960      	ldr	r0, [r4, #20]
 8005f06:	9301      	str	r3, [sp, #4]
 8005f08:	1a89      	subs	r1, r1, r2
 8005f0a:	f000 f887 	bl	800601c <__sccl>
 8005f0e:	9b01      	ldr	r3, [sp, #4]
 8005f10:	f04f 0800 	mov.w	r8, #0
 8005f14:	461d      	mov	r5, r3
 8005f16:	68a3      	ldr	r3, [r4, #8]
 8005f18:	6822      	ldr	r2, [r4, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d03a      	beq.n	8005f94 <_scanf_i+0x160>
 8005f1e:	6831      	ldr	r1, [r6, #0]
 8005f20:	6960      	ldr	r0, [r4, #20]
 8005f22:	f891 c000 	ldrb.w	ip, [r1]
 8005f26:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005f2a:	2800      	cmp	r0, #0
 8005f2c:	d032      	beq.n	8005f94 <_scanf_i+0x160>
 8005f2e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005f32:	d121      	bne.n	8005f78 <_scanf_i+0x144>
 8005f34:	0510      	lsls	r0, r2, #20
 8005f36:	d51f      	bpl.n	8005f78 <_scanf_i+0x144>
 8005f38:	f108 0801 	add.w	r8, r8, #1
 8005f3c:	b117      	cbz	r7, 8005f44 <_scanf_i+0x110>
 8005f3e:	3301      	adds	r3, #1
 8005f40:	3f01      	subs	r7, #1
 8005f42:	60a3      	str	r3, [r4, #8]
 8005f44:	6873      	ldr	r3, [r6, #4]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	6073      	str	r3, [r6, #4]
 8005f4c:	dd1b      	ble.n	8005f86 <_scanf_i+0x152>
 8005f4e:	6833      	ldr	r3, [r6, #0]
 8005f50:	3301      	adds	r3, #1
 8005f52:	6033      	str	r3, [r6, #0]
 8005f54:	68a3      	ldr	r3, [r4, #8]
 8005f56:	3b01      	subs	r3, #1
 8005f58:	60a3      	str	r3, [r4, #8]
 8005f5a:	e7dc      	b.n	8005f16 <_scanf_i+0xe2>
 8005f5c:	f1b8 0f02 	cmp.w	r8, #2
 8005f60:	d1ad      	bne.n	8005ebe <_scanf_i+0x8a>
 8005f62:	6822      	ldr	r2, [r4, #0]
 8005f64:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005f68:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005f6c:	d1bf      	bne.n	8005eee <_scanf_i+0xba>
 8005f6e:	2110      	movs	r1, #16
 8005f70:	6061      	str	r1, [r4, #4]
 8005f72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f76:	e7a1      	b.n	8005ebc <_scanf_i+0x88>
 8005f78:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005f7c:	6022      	str	r2, [r4, #0]
 8005f7e:	780b      	ldrb	r3, [r1, #0]
 8005f80:	702b      	strb	r3, [r5, #0]
 8005f82:	3501      	adds	r5, #1
 8005f84:	e7de      	b.n	8005f44 <_scanf_i+0x110>
 8005f86:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	4658      	mov	r0, fp
 8005f8e:	4798      	blx	r3
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d0df      	beq.n	8005f54 <_scanf_i+0x120>
 8005f94:	6823      	ldr	r3, [r4, #0]
 8005f96:	05d9      	lsls	r1, r3, #23
 8005f98:	d50c      	bpl.n	8005fb4 <_scanf_i+0x180>
 8005f9a:	454d      	cmp	r5, r9
 8005f9c:	d908      	bls.n	8005fb0 <_scanf_i+0x17c>
 8005f9e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005fa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fa6:	4632      	mov	r2, r6
 8005fa8:	4658      	mov	r0, fp
 8005faa:	4798      	blx	r3
 8005fac:	1e6f      	subs	r7, r5, #1
 8005fae:	463d      	mov	r5, r7
 8005fb0:	454d      	cmp	r5, r9
 8005fb2:	d029      	beq.n	8006008 <_scanf_i+0x1d4>
 8005fb4:	6822      	ldr	r2, [r4, #0]
 8005fb6:	f012 0210 	ands.w	r2, r2, #16
 8005fba:	d113      	bne.n	8005fe4 <_scanf_i+0x1b0>
 8005fbc:	702a      	strb	r2, [r5, #0]
 8005fbe:	6863      	ldr	r3, [r4, #4]
 8005fc0:	9e00      	ldr	r6, [sp, #0]
 8005fc2:	4649      	mov	r1, r9
 8005fc4:	4658      	mov	r0, fp
 8005fc6:	47b0      	blx	r6
 8005fc8:	f8da 3000 	ldr.w	r3, [sl]
 8005fcc:	6821      	ldr	r1, [r4, #0]
 8005fce:	1d1a      	adds	r2, r3, #4
 8005fd0:	f8ca 2000 	str.w	r2, [sl]
 8005fd4:	f011 0f20 	tst.w	r1, #32
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	d010      	beq.n	8005ffe <_scanf_i+0x1ca>
 8005fdc:	6018      	str	r0, [r3, #0]
 8005fde:	68e3      	ldr	r3, [r4, #12]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	60e3      	str	r3, [r4, #12]
 8005fe4:	eba5 0509 	sub.w	r5, r5, r9
 8005fe8:	44a8      	add	r8, r5
 8005fea:	6925      	ldr	r5, [r4, #16]
 8005fec:	4445      	add	r5, r8
 8005fee:	6125      	str	r5, [r4, #16]
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	b007      	add	sp, #28
 8005ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff8:	f04f 0800 	mov.w	r8, #0
 8005ffc:	e7ca      	b.n	8005f94 <_scanf_i+0x160>
 8005ffe:	07ca      	lsls	r2, r1, #31
 8006000:	bf4c      	ite	mi
 8006002:	8018      	strhmi	r0, [r3, #0]
 8006004:	6018      	strpl	r0, [r3, #0]
 8006006:	e7ea      	b.n	8005fde <_scanf_i+0x1aa>
 8006008:	2001      	movs	r0, #1
 800600a:	e7f2      	b.n	8005ff2 <_scanf_i+0x1be>
 800600c:	08007720 	.word	0x08007720
 8006010:	08006179 	.word	0x08006179
 8006014:	08006291 	.word	0x08006291
 8006018:	0800778f 	.word	0x0800778f

0800601c <__sccl>:
 800601c:	b570      	push	{r4, r5, r6, lr}
 800601e:	780b      	ldrb	r3, [r1, #0]
 8006020:	2b5e      	cmp	r3, #94	; 0x5e
 8006022:	bf13      	iteet	ne
 8006024:	1c4a      	addne	r2, r1, #1
 8006026:	1c8a      	addeq	r2, r1, #2
 8006028:	784b      	ldrbeq	r3, [r1, #1]
 800602a:	2100      	movne	r1, #0
 800602c:	bf08      	it	eq
 800602e:	2101      	moveq	r1, #1
 8006030:	1e44      	subs	r4, r0, #1
 8006032:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8006036:	f804 1f01 	strb.w	r1, [r4, #1]!
 800603a:	42ac      	cmp	r4, r5
 800603c:	d1fb      	bne.n	8006036 <__sccl+0x1a>
 800603e:	b913      	cbnz	r3, 8006046 <__sccl+0x2a>
 8006040:	3a01      	subs	r2, #1
 8006042:	4610      	mov	r0, r2
 8006044:	bd70      	pop	{r4, r5, r6, pc}
 8006046:	f081 0401 	eor.w	r4, r1, #1
 800604a:	54c4      	strb	r4, [r0, r3]
 800604c:	1c51      	adds	r1, r2, #1
 800604e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8006052:	2d2d      	cmp	r5, #45	; 0x2d
 8006054:	f101 36ff 	add.w	r6, r1, #4294967295
 8006058:	460a      	mov	r2, r1
 800605a:	d006      	beq.n	800606a <__sccl+0x4e>
 800605c:	2d5d      	cmp	r5, #93	; 0x5d
 800605e:	d0f0      	beq.n	8006042 <__sccl+0x26>
 8006060:	b90d      	cbnz	r5, 8006066 <__sccl+0x4a>
 8006062:	4632      	mov	r2, r6
 8006064:	e7ed      	b.n	8006042 <__sccl+0x26>
 8006066:	462b      	mov	r3, r5
 8006068:	e7ef      	b.n	800604a <__sccl+0x2e>
 800606a:	780e      	ldrb	r6, [r1, #0]
 800606c:	2e5d      	cmp	r6, #93	; 0x5d
 800606e:	d0fa      	beq.n	8006066 <__sccl+0x4a>
 8006070:	42b3      	cmp	r3, r6
 8006072:	dcf8      	bgt.n	8006066 <__sccl+0x4a>
 8006074:	3301      	adds	r3, #1
 8006076:	429e      	cmp	r6, r3
 8006078:	54c4      	strb	r4, [r0, r3]
 800607a:	dcfb      	bgt.n	8006074 <__sccl+0x58>
 800607c:	3102      	adds	r1, #2
 800607e:	e7e6      	b.n	800604e <__sccl+0x32>

08006080 <_strtol_l.isra.0>:
 8006080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006084:	4680      	mov	r8, r0
 8006086:	4689      	mov	r9, r1
 8006088:	4692      	mov	sl, r2
 800608a:	461e      	mov	r6, r3
 800608c:	460f      	mov	r7, r1
 800608e:	463d      	mov	r5, r7
 8006090:	9808      	ldr	r0, [sp, #32]
 8006092:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006096:	f000 f947 	bl	8006328 <__locale_ctype_ptr_l>
 800609a:	4420      	add	r0, r4
 800609c:	7843      	ldrb	r3, [r0, #1]
 800609e:	f013 0308 	ands.w	r3, r3, #8
 80060a2:	d132      	bne.n	800610a <_strtol_l.isra.0+0x8a>
 80060a4:	2c2d      	cmp	r4, #45	; 0x2d
 80060a6:	d132      	bne.n	800610e <_strtol_l.isra.0+0x8e>
 80060a8:	787c      	ldrb	r4, [r7, #1]
 80060aa:	1cbd      	adds	r5, r7, #2
 80060ac:	2201      	movs	r2, #1
 80060ae:	2e00      	cmp	r6, #0
 80060b0:	d05d      	beq.n	800616e <_strtol_l.isra.0+0xee>
 80060b2:	2e10      	cmp	r6, #16
 80060b4:	d109      	bne.n	80060ca <_strtol_l.isra.0+0x4a>
 80060b6:	2c30      	cmp	r4, #48	; 0x30
 80060b8:	d107      	bne.n	80060ca <_strtol_l.isra.0+0x4a>
 80060ba:	782b      	ldrb	r3, [r5, #0]
 80060bc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80060c0:	2b58      	cmp	r3, #88	; 0x58
 80060c2:	d14f      	bne.n	8006164 <_strtol_l.isra.0+0xe4>
 80060c4:	786c      	ldrb	r4, [r5, #1]
 80060c6:	2610      	movs	r6, #16
 80060c8:	3502      	adds	r5, #2
 80060ca:	2a00      	cmp	r2, #0
 80060cc:	bf14      	ite	ne
 80060ce:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80060d2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80060d6:	2700      	movs	r7, #0
 80060d8:	fbb1 fcf6 	udiv	ip, r1, r6
 80060dc:	4638      	mov	r0, r7
 80060de:	fb06 1e1c 	mls	lr, r6, ip, r1
 80060e2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80060e6:	2b09      	cmp	r3, #9
 80060e8:	d817      	bhi.n	800611a <_strtol_l.isra.0+0x9a>
 80060ea:	461c      	mov	r4, r3
 80060ec:	42a6      	cmp	r6, r4
 80060ee:	dd23      	ble.n	8006138 <_strtol_l.isra.0+0xb8>
 80060f0:	1c7b      	adds	r3, r7, #1
 80060f2:	d007      	beq.n	8006104 <_strtol_l.isra.0+0x84>
 80060f4:	4584      	cmp	ip, r0
 80060f6:	d31c      	bcc.n	8006132 <_strtol_l.isra.0+0xb2>
 80060f8:	d101      	bne.n	80060fe <_strtol_l.isra.0+0x7e>
 80060fa:	45a6      	cmp	lr, r4
 80060fc:	db19      	blt.n	8006132 <_strtol_l.isra.0+0xb2>
 80060fe:	fb00 4006 	mla	r0, r0, r6, r4
 8006102:	2701      	movs	r7, #1
 8006104:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006108:	e7eb      	b.n	80060e2 <_strtol_l.isra.0+0x62>
 800610a:	462f      	mov	r7, r5
 800610c:	e7bf      	b.n	800608e <_strtol_l.isra.0+0xe>
 800610e:	2c2b      	cmp	r4, #43	; 0x2b
 8006110:	bf04      	itt	eq
 8006112:	1cbd      	addeq	r5, r7, #2
 8006114:	787c      	ldrbeq	r4, [r7, #1]
 8006116:	461a      	mov	r2, r3
 8006118:	e7c9      	b.n	80060ae <_strtol_l.isra.0+0x2e>
 800611a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800611e:	2b19      	cmp	r3, #25
 8006120:	d801      	bhi.n	8006126 <_strtol_l.isra.0+0xa6>
 8006122:	3c37      	subs	r4, #55	; 0x37
 8006124:	e7e2      	b.n	80060ec <_strtol_l.isra.0+0x6c>
 8006126:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800612a:	2b19      	cmp	r3, #25
 800612c:	d804      	bhi.n	8006138 <_strtol_l.isra.0+0xb8>
 800612e:	3c57      	subs	r4, #87	; 0x57
 8006130:	e7dc      	b.n	80060ec <_strtol_l.isra.0+0x6c>
 8006132:	f04f 37ff 	mov.w	r7, #4294967295
 8006136:	e7e5      	b.n	8006104 <_strtol_l.isra.0+0x84>
 8006138:	1c7b      	adds	r3, r7, #1
 800613a:	d108      	bne.n	800614e <_strtol_l.isra.0+0xce>
 800613c:	2322      	movs	r3, #34	; 0x22
 800613e:	f8c8 3000 	str.w	r3, [r8]
 8006142:	4608      	mov	r0, r1
 8006144:	f1ba 0f00 	cmp.w	sl, #0
 8006148:	d107      	bne.n	800615a <_strtol_l.isra.0+0xda>
 800614a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800614e:	b102      	cbz	r2, 8006152 <_strtol_l.isra.0+0xd2>
 8006150:	4240      	negs	r0, r0
 8006152:	f1ba 0f00 	cmp.w	sl, #0
 8006156:	d0f8      	beq.n	800614a <_strtol_l.isra.0+0xca>
 8006158:	b10f      	cbz	r7, 800615e <_strtol_l.isra.0+0xde>
 800615a:	f105 39ff 	add.w	r9, r5, #4294967295
 800615e:	f8ca 9000 	str.w	r9, [sl]
 8006162:	e7f2      	b.n	800614a <_strtol_l.isra.0+0xca>
 8006164:	2430      	movs	r4, #48	; 0x30
 8006166:	2e00      	cmp	r6, #0
 8006168:	d1af      	bne.n	80060ca <_strtol_l.isra.0+0x4a>
 800616a:	2608      	movs	r6, #8
 800616c:	e7ad      	b.n	80060ca <_strtol_l.isra.0+0x4a>
 800616e:	2c30      	cmp	r4, #48	; 0x30
 8006170:	d0a3      	beq.n	80060ba <_strtol_l.isra.0+0x3a>
 8006172:	260a      	movs	r6, #10
 8006174:	e7a9      	b.n	80060ca <_strtol_l.isra.0+0x4a>
	...

08006178 <_strtol_r>:
 8006178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800617a:	4c06      	ldr	r4, [pc, #24]	; (8006194 <_strtol_r+0x1c>)
 800617c:	4d06      	ldr	r5, [pc, #24]	; (8006198 <_strtol_r+0x20>)
 800617e:	6824      	ldr	r4, [r4, #0]
 8006180:	6a24      	ldr	r4, [r4, #32]
 8006182:	2c00      	cmp	r4, #0
 8006184:	bf08      	it	eq
 8006186:	462c      	moveq	r4, r5
 8006188:	9400      	str	r4, [sp, #0]
 800618a:	f7ff ff79 	bl	8006080 <_strtol_l.isra.0>
 800618e:	b003      	add	sp, #12
 8006190:	bd30      	pop	{r4, r5, pc}
 8006192:	bf00      	nop
 8006194:	20000010 	.word	0x20000010
 8006198:	20000074 	.word	0x20000074

0800619c <_strtoul_l.isra.0>:
 800619c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061a0:	4680      	mov	r8, r0
 80061a2:	4689      	mov	r9, r1
 80061a4:	4692      	mov	sl, r2
 80061a6:	461e      	mov	r6, r3
 80061a8:	460f      	mov	r7, r1
 80061aa:	463d      	mov	r5, r7
 80061ac:	9808      	ldr	r0, [sp, #32]
 80061ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80061b2:	f000 f8b9 	bl	8006328 <__locale_ctype_ptr_l>
 80061b6:	4420      	add	r0, r4
 80061b8:	7843      	ldrb	r3, [r0, #1]
 80061ba:	f013 0308 	ands.w	r3, r3, #8
 80061be:	d130      	bne.n	8006222 <_strtoul_l.isra.0+0x86>
 80061c0:	2c2d      	cmp	r4, #45	; 0x2d
 80061c2:	d130      	bne.n	8006226 <_strtoul_l.isra.0+0x8a>
 80061c4:	787c      	ldrb	r4, [r7, #1]
 80061c6:	1cbd      	adds	r5, r7, #2
 80061c8:	2101      	movs	r1, #1
 80061ca:	2e00      	cmp	r6, #0
 80061cc:	d05c      	beq.n	8006288 <_strtoul_l.isra.0+0xec>
 80061ce:	2e10      	cmp	r6, #16
 80061d0:	d109      	bne.n	80061e6 <_strtoul_l.isra.0+0x4a>
 80061d2:	2c30      	cmp	r4, #48	; 0x30
 80061d4:	d107      	bne.n	80061e6 <_strtoul_l.isra.0+0x4a>
 80061d6:	782b      	ldrb	r3, [r5, #0]
 80061d8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80061dc:	2b58      	cmp	r3, #88	; 0x58
 80061de:	d14e      	bne.n	800627e <_strtoul_l.isra.0+0xe2>
 80061e0:	786c      	ldrb	r4, [r5, #1]
 80061e2:	2610      	movs	r6, #16
 80061e4:	3502      	adds	r5, #2
 80061e6:	f04f 32ff 	mov.w	r2, #4294967295
 80061ea:	2300      	movs	r3, #0
 80061ec:	fbb2 f2f6 	udiv	r2, r2, r6
 80061f0:	fb06 fc02 	mul.w	ip, r6, r2
 80061f4:	ea6f 0c0c 	mvn.w	ip, ip
 80061f8:	4618      	mov	r0, r3
 80061fa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80061fe:	2f09      	cmp	r7, #9
 8006200:	d817      	bhi.n	8006232 <_strtoul_l.isra.0+0x96>
 8006202:	463c      	mov	r4, r7
 8006204:	42a6      	cmp	r6, r4
 8006206:	dd23      	ble.n	8006250 <_strtoul_l.isra.0+0xb4>
 8006208:	2b00      	cmp	r3, #0
 800620a:	db1e      	blt.n	800624a <_strtoul_l.isra.0+0xae>
 800620c:	4282      	cmp	r2, r0
 800620e:	d31c      	bcc.n	800624a <_strtoul_l.isra.0+0xae>
 8006210:	d101      	bne.n	8006216 <_strtoul_l.isra.0+0x7a>
 8006212:	45a4      	cmp	ip, r4
 8006214:	db19      	blt.n	800624a <_strtoul_l.isra.0+0xae>
 8006216:	fb00 4006 	mla	r0, r0, r6, r4
 800621a:	2301      	movs	r3, #1
 800621c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006220:	e7eb      	b.n	80061fa <_strtoul_l.isra.0+0x5e>
 8006222:	462f      	mov	r7, r5
 8006224:	e7c1      	b.n	80061aa <_strtoul_l.isra.0+0xe>
 8006226:	2c2b      	cmp	r4, #43	; 0x2b
 8006228:	bf04      	itt	eq
 800622a:	1cbd      	addeq	r5, r7, #2
 800622c:	787c      	ldrbeq	r4, [r7, #1]
 800622e:	4619      	mov	r1, r3
 8006230:	e7cb      	b.n	80061ca <_strtoul_l.isra.0+0x2e>
 8006232:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006236:	2f19      	cmp	r7, #25
 8006238:	d801      	bhi.n	800623e <_strtoul_l.isra.0+0xa2>
 800623a:	3c37      	subs	r4, #55	; 0x37
 800623c:	e7e2      	b.n	8006204 <_strtoul_l.isra.0+0x68>
 800623e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006242:	2f19      	cmp	r7, #25
 8006244:	d804      	bhi.n	8006250 <_strtoul_l.isra.0+0xb4>
 8006246:	3c57      	subs	r4, #87	; 0x57
 8006248:	e7dc      	b.n	8006204 <_strtoul_l.isra.0+0x68>
 800624a:	f04f 33ff 	mov.w	r3, #4294967295
 800624e:	e7e5      	b.n	800621c <_strtoul_l.isra.0+0x80>
 8006250:	2b00      	cmp	r3, #0
 8006252:	da09      	bge.n	8006268 <_strtoul_l.isra.0+0xcc>
 8006254:	2322      	movs	r3, #34	; 0x22
 8006256:	f8c8 3000 	str.w	r3, [r8]
 800625a:	f04f 30ff 	mov.w	r0, #4294967295
 800625e:	f1ba 0f00 	cmp.w	sl, #0
 8006262:	d107      	bne.n	8006274 <_strtoul_l.isra.0+0xd8>
 8006264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006268:	b101      	cbz	r1, 800626c <_strtoul_l.isra.0+0xd0>
 800626a:	4240      	negs	r0, r0
 800626c:	f1ba 0f00 	cmp.w	sl, #0
 8006270:	d0f8      	beq.n	8006264 <_strtoul_l.isra.0+0xc8>
 8006272:	b10b      	cbz	r3, 8006278 <_strtoul_l.isra.0+0xdc>
 8006274:	f105 39ff 	add.w	r9, r5, #4294967295
 8006278:	f8ca 9000 	str.w	r9, [sl]
 800627c:	e7f2      	b.n	8006264 <_strtoul_l.isra.0+0xc8>
 800627e:	2430      	movs	r4, #48	; 0x30
 8006280:	2e00      	cmp	r6, #0
 8006282:	d1b0      	bne.n	80061e6 <_strtoul_l.isra.0+0x4a>
 8006284:	2608      	movs	r6, #8
 8006286:	e7ae      	b.n	80061e6 <_strtoul_l.isra.0+0x4a>
 8006288:	2c30      	cmp	r4, #48	; 0x30
 800628a:	d0a4      	beq.n	80061d6 <_strtoul_l.isra.0+0x3a>
 800628c:	260a      	movs	r6, #10
 800628e:	e7aa      	b.n	80061e6 <_strtoul_l.isra.0+0x4a>

08006290 <_strtoul_r>:
 8006290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006292:	4c06      	ldr	r4, [pc, #24]	; (80062ac <_strtoul_r+0x1c>)
 8006294:	4d06      	ldr	r5, [pc, #24]	; (80062b0 <_strtoul_r+0x20>)
 8006296:	6824      	ldr	r4, [r4, #0]
 8006298:	6a24      	ldr	r4, [r4, #32]
 800629a:	2c00      	cmp	r4, #0
 800629c:	bf08      	it	eq
 800629e:	462c      	moveq	r4, r5
 80062a0:	9400      	str	r4, [sp, #0]
 80062a2:	f7ff ff7b 	bl	800619c <_strtoul_l.isra.0>
 80062a6:	b003      	add	sp, #12
 80062a8:	bd30      	pop	{r4, r5, pc}
 80062aa:	bf00      	nop
 80062ac:	20000010 	.word	0x20000010
 80062b0:	20000074 	.word	0x20000074

080062b4 <__submore>:
 80062b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062b8:	460c      	mov	r4, r1
 80062ba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80062bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062c0:	4299      	cmp	r1, r3
 80062c2:	d11d      	bne.n	8006300 <__submore+0x4c>
 80062c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80062c8:	f000 f8c4 	bl	8006454 <_malloc_r>
 80062cc:	b918      	cbnz	r0, 80062d6 <__submore+0x22>
 80062ce:	f04f 30ff 	mov.w	r0, #4294967295
 80062d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062da:	63a3      	str	r3, [r4, #56]	; 0x38
 80062dc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80062e0:	6360      	str	r0, [r4, #52]	; 0x34
 80062e2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80062e6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80062ea:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80062ee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80062f2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80062f6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80062fa:	6020      	str	r0, [r4, #0]
 80062fc:	2000      	movs	r0, #0
 80062fe:	e7e8      	b.n	80062d2 <__submore+0x1e>
 8006300:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006302:	0077      	lsls	r7, r6, #1
 8006304:	463a      	mov	r2, r7
 8006306:	f000 f8ff 	bl	8006508 <_realloc_r>
 800630a:	4605      	mov	r5, r0
 800630c:	2800      	cmp	r0, #0
 800630e:	d0de      	beq.n	80062ce <__submore+0x1a>
 8006310:	eb00 0806 	add.w	r8, r0, r6
 8006314:	4601      	mov	r1, r0
 8006316:	4632      	mov	r2, r6
 8006318:	4640      	mov	r0, r8
 800631a:	f000 f829 	bl	8006370 <memcpy>
 800631e:	f8c4 8000 	str.w	r8, [r4]
 8006322:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006326:	e7e9      	b.n	80062fc <__submore+0x48>

08006328 <__locale_ctype_ptr_l>:
 8006328:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800632c:	4770      	bx	lr
	...

08006330 <__locale_ctype_ptr>:
 8006330:	4b04      	ldr	r3, [pc, #16]	; (8006344 <__locale_ctype_ptr+0x14>)
 8006332:	4a05      	ldr	r2, [pc, #20]	; (8006348 <__locale_ctype_ptr+0x18>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6a1b      	ldr	r3, [r3, #32]
 8006338:	2b00      	cmp	r3, #0
 800633a:	bf08      	it	eq
 800633c:	4613      	moveq	r3, r2
 800633e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8006342:	4770      	bx	lr
 8006344:	20000010 	.word	0x20000010
 8006348:	20000074 	.word	0x20000074

0800634c <__ascii_mbtowc>:
 800634c:	b082      	sub	sp, #8
 800634e:	b901      	cbnz	r1, 8006352 <__ascii_mbtowc+0x6>
 8006350:	a901      	add	r1, sp, #4
 8006352:	b142      	cbz	r2, 8006366 <__ascii_mbtowc+0x1a>
 8006354:	b14b      	cbz	r3, 800636a <__ascii_mbtowc+0x1e>
 8006356:	7813      	ldrb	r3, [r2, #0]
 8006358:	600b      	str	r3, [r1, #0]
 800635a:	7812      	ldrb	r2, [r2, #0]
 800635c:	1c10      	adds	r0, r2, #0
 800635e:	bf18      	it	ne
 8006360:	2001      	movne	r0, #1
 8006362:	b002      	add	sp, #8
 8006364:	4770      	bx	lr
 8006366:	4610      	mov	r0, r2
 8006368:	e7fb      	b.n	8006362 <__ascii_mbtowc+0x16>
 800636a:	f06f 0001 	mvn.w	r0, #1
 800636e:	e7f8      	b.n	8006362 <__ascii_mbtowc+0x16>

08006370 <memcpy>:
 8006370:	b510      	push	{r4, lr}
 8006372:	1e43      	subs	r3, r0, #1
 8006374:	440a      	add	r2, r1
 8006376:	4291      	cmp	r1, r2
 8006378:	d100      	bne.n	800637c <memcpy+0xc>
 800637a:	bd10      	pop	{r4, pc}
 800637c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006380:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006384:	e7f7      	b.n	8006376 <memcpy+0x6>

08006386 <memmove>:
 8006386:	4288      	cmp	r0, r1
 8006388:	b510      	push	{r4, lr}
 800638a:	eb01 0302 	add.w	r3, r1, r2
 800638e:	d807      	bhi.n	80063a0 <memmove+0x1a>
 8006390:	1e42      	subs	r2, r0, #1
 8006392:	4299      	cmp	r1, r3
 8006394:	d00a      	beq.n	80063ac <memmove+0x26>
 8006396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800639a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800639e:	e7f8      	b.n	8006392 <memmove+0xc>
 80063a0:	4283      	cmp	r3, r0
 80063a2:	d9f5      	bls.n	8006390 <memmove+0xa>
 80063a4:	1881      	adds	r1, r0, r2
 80063a6:	1ad2      	subs	r2, r2, r3
 80063a8:	42d3      	cmn	r3, r2
 80063aa:	d100      	bne.n	80063ae <memmove+0x28>
 80063ac:	bd10      	pop	{r4, pc}
 80063ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063b2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80063b6:	e7f7      	b.n	80063a8 <memmove+0x22>

080063b8 <_free_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	4605      	mov	r5, r0
 80063bc:	2900      	cmp	r1, #0
 80063be:	d045      	beq.n	800644c <_free_r+0x94>
 80063c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063c4:	1f0c      	subs	r4, r1, #4
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	bfb8      	it	lt
 80063ca:	18e4      	addlt	r4, r4, r3
 80063cc:	f000 f8df 	bl	800658e <__malloc_lock>
 80063d0:	4a1f      	ldr	r2, [pc, #124]	; (8006450 <_free_r+0x98>)
 80063d2:	6813      	ldr	r3, [r2, #0]
 80063d4:	4610      	mov	r0, r2
 80063d6:	b933      	cbnz	r3, 80063e6 <_free_r+0x2e>
 80063d8:	6063      	str	r3, [r4, #4]
 80063da:	6014      	str	r4, [r2, #0]
 80063dc:	4628      	mov	r0, r5
 80063de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063e2:	f000 b8d5 	b.w	8006590 <__malloc_unlock>
 80063e6:	42a3      	cmp	r3, r4
 80063e8:	d90c      	bls.n	8006404 <_free_r+0x4c>
 80063ea:	6821      	ldr	r1, [r4, #0]
 80063ec:	1862      	adds	r2, r4, r1
 80063ee:	4293      	cmp	r3, r2
 80063f0:	bf04      	itt	eq
 80063f2:	681a      	ldreq	r2, [r3, #0]
 80063f4:	685b      	ldreq	r3, [r3, #4]
 80063f6:	6063      	str	r3, [r4, #4]
 80063f8:	bf04      	itt	eq
 80063fa:	1852      	addeq	r2, r2, r1
 80063fc:	6022      	streq	r2, [r4, #0]
 80063fe:	6004      	str	r4, [r0, #0]
 8006400:	e7ec      	b.n	80063dc <_free_r+0x24>
 8006402:	4613      	mov	r3, r2
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	b10a      	cbz	r2, 800640c <_free_r+0x54>
 8006408:	42a2      	cmp	r2, r4
 800640a:	d9fa      	bls.n	8006402 <_free_r+0x4a>
 800640c:	6819      	ldr	r1, [r3, #0]
 800640e:	1858      	adds	r0, r3, r1
 8006410:	42a0      	cmp	r0, r4
 8006412:	d10b      	bne.n	800642c <_free_r+0x74>
 8006414:	6820      	ldr	r0, [r4, #0]
 8006416:	4401      	add	r1, r0
 8006418:	1858      	adds	r0, r3, r1
 800641a:	4282      	cmp	r2, r0
 800641c:	6019      	str	r1, [r3, #0]
 800641e:	d1dd      	bne.n	80063dc <_free_r+0x24>
 8006420:	6810      	ldr	r0, [r2, #0]
 8006422:	6852      	ldr	r2, [r2, #4]
 8006424:	605a      	str	r2, [r3, #4]
 8006426:	4401      	add	r1, r0
 8006428:	6019      	str	r1, [r3, #0]
 800642a:	e7d7      	b.n	80063dc <_free_r+0x24>
 800642c:	d902      	bls.n	8006434 <_free_r+0x7c>
 800642e:	230c      	movs	r3, #12
 8006430:	602b      	str	r3, [r5, #0]
 8006432:	e7d3      	b.n	80063dc <_free_r+0x24>
 8006434:	6820      	ldr	r0, [r4, #0]
 8006436:	1821      	adds	r1, r4, r0
 8006438:	428a      	cmp	r2, r1
 800643a:	bf04      	itt	eq
 800643c:	6811      	ldreq	r1, [r2, #0]
 800643e:	6852      	ldreq	r2, [r2, #4]
 8006440:	6062      	str	r2, [r4, #4]
 8006442:	bf04      	itt	eq
 8006444:	1809      	addeq	r1, r1, r0
 8006446:	6021      	streq	r1, [r4, #0]
 8006448:	605c      	str	r4, [r3, #4]
 800644a:	e7c7      	b.n	80063dc <_free_r+0x24>
 800644c:	bd38      	pop	{r3, r4, r5, pc}
 800644e:	bf00      	nop
 8006450:	200003b4 	.word	0x200003b4

08006454 <_malloc_r>:
 8006454:	b570      	push	{r4, r5, r6, lr}
 8006456:	1ccd      	adds	r5, r1, #3
 8006458:	f025 0503 	bic.w	r5, r5, #3
 800645c:	3508      	adds	r5, #8
 800645e:	2d0c      	cmp	r5, #12
 8006460:	bf38      	it	cc
 8006462:	250c      	movcc	r5, #12
 8006464:	2d00      	cmp	r5, #0
 8006466:	4606      	mov	r6, r0
 8006468:	db01      	blt.n	800646e <_malloc_r+0x1a>
 800646a:	42a9      	cmp	r1, r5
 800646c:	d903      	bls.n	8006476 <_malloc_r+0x22>
 800646e:	230c      	movs	r3, #12
 8006470:	6033      	str	r3, [r6, #0]
 8006472:	2000      	movs	r0, #0
 8006474:	bd70      	pop	{r4, r5, r6, pc}
 8006476:	f000 f88a 	bl	800658e <__malloc_lock>
 800647a:	4a21      	ldr	r2, [pc, #132]	; (8006500 <_malloc_r+0xac>)
 800647c:	6814      	ldr	r4, [r2, #0]
 800647e:	4621      	mov	r1, r4
 8006480:	b991      	cbnz	r1, 80064a8 <_malloc_r+0x54>
 8006482:	4c20      	ldr	r4, [pc, #128]	; (8006504 <_malloc_r+0xb0>)
 8006484:	6823      	ldr	r3, [r4, #0]
 8006486:	b91b      	cbnz	r3, 8006490 <_malloc_r+0x3c>
 8006488:	4630      	mov	r0, r6
 800648a:	f000 f863 	bl	8006554 <_sbrk_r>
 800648e:	6020      	str	r0, [r4, #0]
 8006490:	4629      	mov	r1, r5
 8006492:	4630      	mov	r0, r6
 8006494:	f000 f85e 	bl	8006554 <_sbrk_r>
 8006498:	1c43      	adds	r3, r0, #1
 800649a:	d124      	bne.n	80064e6 <_malloc_r+0x92>
 800649c:	230c      	movs	r3, #12
 800649e:	6033      	str	r3, [r6, #0]
 80064a0:	4630      	mov	r0, r6
 80064a2:	f000 f875 	bl	8006590 <__malloc_unlock>
 80064a6:	e7e4      	b.n	8006472 <_malloc_r+0x1e>
 80064a8:	680b      	ldr	r3, [r1, #0]
 80064aa:	1b5b      	subs	r3, r3, r5
 80064ac:	d418      	bmi.n	80064e0 <_malloc_r+0x8c>
 80064ae:	2b0b      	cmp	r3, #11
 80064b0:	d90f      	bls.n	80064d2 <_malloc_r+0x7e>
 80064b2:	600b      	str	r3, [r1, #0]
 80064b4:	50cd      	str	r5, [r1, r3]
 80064b6:	18cc      	adds	r4, r1, r3
 80064b8:	4630      	mov	r0, r6
 80064ba:	f000 f869 	bl	8006590 <__malloc_unlock>
 80064be:	f104 000b 	add.w	r0, r4, #11
 80064c2:	1d23      	adds	r3, r4, #4
 80064c4:	f020 0007 	bic.w	r0, r0, #7
 80064c8:	1ac3      	subs	r3, r0, r3
 80064ca:	d0d3      	beq.n	8006474 <_malloc_r+0x20>
 80064cc:	425a      	negs	r2, r3
 80064ce:	50e2      	str	r2, [r4, r3]
 80064d0:	e7d0      	b.n	8006474 <_malloc_r+0x20>
 80064d2:	428c      	cmp	r4, r1
 80064d4:	684b      	ldr	r3, [r1, #4]
 80064d6:	bf16      	itet	ne
 80064d8:	6063      	strne	r3, [r4, #4]
 80064da:	6013      	streq	r3, [r2, #0]
 80064dc:	460c      	movne	r4, r1
 80064de:	e7eb      	b.n	80064b8 <_malloc_r+0x64>
 80064e0:	460c      	mov	r4, r1
 80064e2:	6849      	ldr	r1, [r1, #4]
 80064e4:	e7cc      	b.n	8006480 <_malloc_r+0x2c>
 80064e6:	1cc4      	adds	r4, r0, #3
 80064e8:	f024 0403 	bic.w	r4, r4, #3
 80064ec:	42a0      	cmp	r0, r4
 80064ee:	d005      	beq.n	80064fc <_malloc_r+0xa8>
 80064f0:	1a21      	subs	r1, r4, r0
 80064f2:	4630      	mov	r0, r6
 80064f4:	f000 f82e 	bl	8006554 <_sbrk_r>
 80064f8:	3001      	adds	r0, #1
 80064fa:	d0cf      	beq.n	800649c <_malloc_r+0x48>
 80064fc:	6025      	str	r5, [r4, #0]
 80064fe:	e7db      	b.n	80064b8 <_malloc_r+0x64>
 8006500:	200003b4 	.word	0x200003b4
 8006504:	200003b8 	.word	0x200003b8

08006508 <_realloc_r>:
 8006508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800650a:	4607      	mov	r7, r0
 800650c:	4614      	mov	r4, r2
 800650e:	460e      	mov	r6, r1
 8006510:	b921      	cbnz	r1, 800651c <_realloc_r+0x14>
 8006512:	4611      	mov	r1, r2
 8006514:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006518:	f7ff bf9c 	b.w	8006454 <_malloc_r>
 800651c:	b922      	cbnz	r2, 8006528 <_realloc_r+0x20>
 800651e:	f7ff ff4b 	bl	80063b8 <_free_r>
 8006522:	4625      	mov	r5, r4
 8006524:	4628      	mov	r0, r5
 8006526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006528:	f000 f833 	bl	8006592 <_malloc_usable_size_r>
 800652c:	42a0      	cmp	r0, r4
 800652e:	d20f      	bcs.n	8006550 <_realloc_r+0x48>
 8006530:	4621      	mov	r1, r4
 8006532:	4638      	mov	r0, r7
 8006534:	f7ff ff8e 	bl	8006454 <_malloc_r>
 8006538:	4605      	mov	r5, r0
 800653a:	2800      	cmp	r0, #0
 800653c:	d0f2      	beq.n	8006524 <_realloc_r+0x1c>
 800653e:	4631      	mov	r1, r6
 8006540:	4622      	mov	r2, r4
 8006542:	f7ff ff15 	bl	8006370 <memcpy>
 8006546:	4631      	mov	r1, r6
 8006548:	4638      	mov	r0, r7
 800654a:	f7ff ff35 	bl	80063b8 <_free_r>
 800654e:	e7e9      	b.n	8006524 <_realloc_r+0x1c>
 8006550:	4635      	mov	r5, r6
 8006552:	e7e7      	b.n	8006524 <_realloc_r+0x1c>

08006554 <_sbrk_r>:
 8006554:	b538      	push	{r3, r4, r5, lr}
 8006556:	4c06      	ldr	r4, [pc, #24]	; (8006570 <_sbrk_r+0x1c>)
 8006558:	2300      	movs	r3, #0
 800655a:	4605      	mov	r5, r0
 800655c:	4608      	mov	r0, r1
 800655e:	6023      	str	r3, [r4, #0]
 8006560:	f7fb fba8 	bl	8001cb4 <_sbrk>
 8006564:	1c43      	adds	r3, r0, #1
 8006566:	d102      	bne.n	800656e <_sbrk_r+0x1a>
 8006568:	6823      	ldr	r3, [r4, #0]
 800656a:	b103      	cbz	r3, 800656e <_sbrk_r+0x1a>
 800656c:	602b      	str	r3, [r5, #0]
 800656e:	bd38      	pop	{r3, r4, r5, pc}
 8006570:	20000d98 	.word	0x20000d98

08006574 <__ascii_wctomb>:
 8006574:	b149      	cbz	r1, 800658a <__ascii_wctomb+0x16>
 8006576:	2aff      	cmp	r2, #255	; 0xff
 8006578:	bf85      	ittet	hi
 800657a:	238a      	movhi	r3, #138	; 0x8a
 800657c:	6003      	strhi	r3, [r0, #0]
 800657e:	700a      	strbls	r2, [r1, #0]
 8006580:	f04f 30ff 	movhi.w	r0, #4294967295
 8006584:	bf98      	it	ls
 8006586:	2001      	movls	r0, #1
 8006588:	4770      	bx	lr
 800658a:	4608      	mov	r0, r1
 800658c:	4770      	bx	lr

0800658e <__malloc_lock>:
 800658e:	4770      	bx	lr

08006590 <__malloc_unlock>:
 8006590:	4770      	bx	lr

08006592 <_malloc_usable_size_r>:
 8006592:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006596:	1f18      	subs	r0, r3, #4
 8006598:	2b00      	cmp	r3, #0
 800659a:	bfbc      	itt	lt
 800659c:	580b      	ldrlt	r3, [r1, r0]
 800659e:	18c0      	addlt	r0, r0, r3
 80065a0:	4770      	bx	lr
 80065a2:	0000      	movs	r0, r0
 80065a4:	0000      	movs	r0, r0
	...

080065a8 <ceil>:
 80065a8:	ec51 0b10 	vmov	r0, r1, d0
 80065ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065b0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80065b4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80065b8:	2e13      	cmp	r6, #19
 80065ba:	460c      	mov	r4, r1
 80065bc:	ee10 5a10 	vmov	r5, s0
 80065c0:	4680      	mov	r8, r0
 80065c2:	dc30      	bgt.n	8006626 <ceil+0x7e>
 80065c4:	2e00      	cmp	r6, #0
 80065c6:	da12      	bge.n	80065ee <ceil+0x46>
 80065c8:	a333      	add	r3, pc, #204	; (adr r3, 8006698 <ceil+0xf0>)
 80065ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ce:	f7f9 fe8d 	bl	80002ec <__adddf3>
 80065d2:	2200      	movs	r2, #0
 80065d4:	2300      	movs	r3, #0
 80065d6:	f7fa facf 	bl	8000b78 <__aeabi_dcmpgt>
 80065da:	b128      	cbz	r0, 80065e8 <ceil+0x40>
 80065dc:	2c00      	cmp	r4, #0
 80065de:	db55      	blt.n	800668c <ceil+0xe4>
 80065e0:	432c      	orrs	r4, r5
 80065e2:	d057      	beq.n	8006694 <ceil+0xec>
 80065e4:	4c2e      	ldr	r4, [pc, #184]	; (80066a0 <ceil+0xf8>)
 80065e6:	2500      	movs	r5, #0
 80065e8:	4621      	mov	r1, r4
 80065ea:	4628      	mov	r0, r5
 80065ec:	e025      	b.n	800663a <ceil+0x92>
 80065ee:	4f2d      	ldr	r7, [pc, #180]	; (80066a4 <ceil+0xfc>)
 80065f0:	4137      	asrs	r7, r6
 80065f2:	ea01 0307 	and.w	r3, r1, r7
 80065f6:	4303      	orrs	r3, r0
 80065f8:	d01f      	beq.n	800663a <ceil+0x92>
 80065fa:	a327      	add	r3, pc, #156	; (adr r3, 8006698 <ceil+0xf0>)
 80065fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006600:	f7f9 fe74 	bl	80002ec <__adddf3>
 8006604:	2200      	movs	r2, #0
 8006606:	2300      	movs	r3, #0
 8006608:	f7fa fab6 	bl	8000b78 <__aeabi_dcmpgt>
 800660c:	2800      	cmp	r0, #0
 800660e:	d0eb      	beq.n	80065e8 <ceil+0x40>
 8006610:	2c00      	cmp	r4, #0
 8006612:	bfc2      	ittt	gt
 8006614:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8006618:	fa43 f606 	asrgt.w	r6, r3, r6
 800661c:	19a4      	addgt	r4, r4, r6
 800661e:	ea24 0407 	bic.w	r4, r4, r7
 8006622:	2500      	movs	r5, #0
 8006624:	e7e0      	b.n	80065e8 <ceil+0x40>
 8006626:	2e33      	cmp	r6, #51	; 0x33
 8006628:	dd0b      	ble.n	8006642 <ceil+0x9a>
 800662a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800662e:	d104      	bne.n	800663a <ceil+0x92>
 8006630:	ee10 2a10 	vmov	r2, s0
 8006634:	460b      	mov	r3, r1
 8006636:	f7f9 fe59 	bl	80002ec <__adddf3>
 800663a:	ec41 0b10 	vmov	d0, r0, r1
 800663e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006642:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006646:	f04f 33ff 	mov.w	r3, #4294967295
 800664a:	fa23 f707 	lsr.w	r7, r3, r7
 800664e:	4207      	tst	r7, r0
 8006650:	d0f3      	beq.n	800663a <ceil+0x92>
 8006652:	a311      	add	r3, pc, #68	; (adr r3, 8006698 <ceil+0xf0>)
 8006654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006658:	f7f9 fe48 	bl	80002ec <__adddf3>
 800665c:	2200      	movs	r2, #0
 800665e:	2300      	movs	r3, #0
 8006660:	f7fa fa8a 	bl	8000b78 <__aeabi_dcmpgt>
 8006664:	2800      	cmp	r0, #0
 8006666:	d0bf      	beq.n	80065e8 <ceil+0x40>
 8006668:	2c00      	cmp	r4, #0
 800666a:	dd02      	ble.n	8006672 <ceil+0xca>
 800666c:	2e14      	cmp	r6, #20
 800666e:	d103      	bne.n	8006678 <ceil+0xd0>
 8006670:	3401      	adds	r4, #1
 8006672:	ea25 0507 	bic.w	r5, r5, r7
 8006676:	e7b7      	b.n	80065e8 <ceil+0x40>
 8006678:	2301      	movs	r3, #1
 800667a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800667e:	fa03 f606 	lsl.w	r6, r3, r6
 8006682:	4435      	add	r5, r6
 8006684:	4545      	cmp	r5, r8
 8006686:	bf38      	it	cc
 8006688:	18e4      	addcc	r4, r4, r3
 800668a:	e7f2      	b.n	8006672 <ceil+0xca>
 800668c:	2500      	movs	r5, #0
 800668e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006692:	e7a9      	b.n	80065e8 <ceil+0x40>
 8006694:	4625      	mov	r5, r4
 8006696:	e7a7      	b.n	80065e8 <ceil+0x40>
 8006698:	8800759c 	.word	0x8800759c
 800669c:	7e37e43c 	.word	0x7e37e43c
 80066a0:	3ff00000 	.word	0x3ff00000
 80066a4:	000fffff 	.word	0x000fffff

080066a8 <sin>:
 80066a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80066aa:	ec51 0b10 	vmov	r0, r1, d0
 80066ae:	4a20      	ldr	r2, [pc, #128]	; (8006730 <sin+0x88>)
 80066b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80066b4:	4293      	cmp	r3, r2
 80066b6:	dc07      	bgt.n	80066c8 <sin+0x20>
 80066b8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8006728 <sin+0x80>
 80066bc:	2000      	movs	r0, #0
 80066be:	f000 fe37 	bl	8007330 <__kernel_sin>
 80066c2:	ec51 0b10 	vmov	r0, r1, d0
 80066c6:	e007      	b.n	80066d8 <sin+0x30>
 80066c8:	4a1a      	ldr	r2, [pc, #104]	; (8006734 <sin+0x8c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	dd09      	ble.n	80066e2 <sin+0x3a>
 80066ce:	ee10 2a10 	vmov	r2, s0
 80066d2:	460b      	mov	r3, r1
 80066d4:	f7f9 fe08 	bl	80002e8 <__aeabi_dsub>
 80066d8:	ec41 0b10 	vmov	d0, r0, r1
 80066dc:	b005      	add	sp, #20
 80066de:	f85d fb04 	ldr.w	pc, [sp], #4
 80066e2:	4668      	mov	r0, sp
 80066e4:	f000 f828 	bl	8006738 <__ieee754_rem_pio2>
 80066e8:	f000 0003 	and.w	r0, r0, #3
 80066ec:	2801      	cmp	r0, #1
 80066ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80066f2:	ed9d 0b00 	vldr	d0, [sp]
 80066f6:	d004      	beq.n	8006702 <sin+0x5a>
 80066f8:	2802      	cmp	r0, #2
 80066fa:	d005      	beq.n	8006708 <sin+0x60>
 80066fc:	b970      	cbnz	r0, 800671c <sin+0x74>
 80066fe:	2001      	movs	r0, #1
 8006700:	e7dd      	b.n	80066be <sin+0x16>
 8006702:	f000 fa0d 	bl	8006b20 <__kernel_cos>
 8006706:	e7dc      	b.n	80066c2 <sin+0x1a>
 8006708:	2001      	movs	r0, #1
 800670a:	f000 fe11 	bl	8007330 <__kernel_sin>
 800670e:	ec53 2b10 	vmov	r2, r3, d0
 8006712:	ee10 0a10 	vmov	r0, s0
 8006716:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800671a:	e7dd      	b.n	80066d8 <sin+0x30>
 800671c:	f000 fa00 	bl	8006b20 <__kernel_cos>
 8006720:	e7f5      	b.n	800670e <sin+0x66>
 8006722:	bf00      	nop
 8006724:	f3af 8000 	nop.w
	...
 8006730:	3fe921fb 	.word	0x3fe921fb
 8006734:	7fefffff 	.word	0x7fefffff

08006738 <__ieee754_rem_pio2>:
 8006738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800673c:	ec57 6b10 	vmov	r6, r7, d0
 8006740:	4bc3      	ldr	r3, [pc, #780]	; (8006a50 <__ieee754_rem_pio2+0x318>)
 8006742:	b08d      	sub	sp, #52	; 0x34
 8006744:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006748:	4598      	cmp	r8, r3
 800674a:	4604      	mov	r4, r0
 800674c:	9704      	str	r7, [sp, #16]
 800674e:	dc07      	bgt.n	8006760 <__ieee754_rem_pio2+0x28>
 8006750:	2200      	movs	r2, #0
 8006752:	2300      	movs	r3, #0
 8006754:	ed84 0b00 	vstr	d0, [r4]
 8006758:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800675c:	2500      	movs	r5, #0
 800675e:	e027      	b.n	80067b0 <__ieee754_rem_pio2+0x78>
 8006760:	4bbc      	ldr	r3, [pc, #752]	; (8006a54 <__ieee754_rem_pio2+0x31c>)
 8006762:	4598      	cmp	r8, r3
 8006764:	dc75      	bgt.n	8006852 <__ieee754_rem_pio2+0x11a>
 8006766:	9b04      	ldr	r3, [sp, #16]
 8006768:	4dbb      	ldr	r5, [pc, #748]	; (8006a58 <__ieee754_rem_pio2+0x320>)
 800676a:	2b00      	cmp	r3, #0
 800676c:	ee10 0a10 	vmov	r0, s0
 8006770:	a3a9      	add	r3, pc, #676	; (adr r3, 8006a18 <__ieee754_rem_pio2+0x2e0>)
 8006772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006776:	4639      	mov	r1, r7
 8006778:	dd36      	ble.n	80067e8 <__ieee754_rem_pio2+0xb0>
 800677a:	f7f9 fdb5 	bl	80002e8 <__aeabi_dsub>
 800677e:	45a8      	cmp	r8, r5
 8006780:	4606      	mov	r6, r0
 8006782:	460f      	mov	r7, r1
 8006784:	d018      	beq.n	80067b8 <__ieee754_rem_pio2+0x80>
 8006786:	a3a6      	add	r3, pc, #664	; (adr r3, 8006a20 <__ieee754_rem_pio2+0x2e8>)
 8006788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678c:	f7f9 fdac 	bl	80002e8 <__aeabi_dsub>
 8006790:	4602      	mov	r2, r0
 8006792:	460b      	mov	r3, r1
 8006794:	e9c4 2300 	strd	r2, r3, [r4]
 8006798:	4630      	mov	r0, r6
 800679a:	4639      	mov	r1, r7
 800679c:	f7f9 fda4 	bl	80002e8 <__aeabi_dsub>
 80067a0:	a39f      	add	r3, pc, #636	; (adr r3, 8006a20 <__ieee754_rem_pio2+0x2e8>)
 80067a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a6:	f7f9 fd9f 	bl	80002e8 <__aeabi_dsub>
 80067aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80067ae:	2501      	movs	r5, #1
 80067b0:	4628      	mov	r0, r5
 80067b2:	b00d      	add	sp, #52	; 0x34
 80067b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067b8:	a39b      	add	r3, pc, #620	; (adr r3, 8006a28 <__ieee754_rem_pio2+0x2f0>)
 80067ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067be:	f7f9 fd93 	bl	80002e8 <__aeabi_dsub>
 80067c2:	a39b      	add	r3, pc, #620	; (adr r3, 8006a30 <__ieee754_rem_pio2+0x2f8>)
 80067c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c8:	4606      	mov	r6, r0
 80067ca:	460f      	mov	r7, r1
 80067cc:	f7f9 fd8c 	bl	80002e8 <__aeabi_dsub>
 80067d0:	4602      	mov	r2, r0
 80067d2:	460b      	mov	r3, r1
 80067d4:	e9c4 2300 	strd	r2, r3, [r4]
 80067d8:	4630      	mov	r0, r6
 80067da:	4639      	mov	r1, r7
 80067dc:	f7f9 fd84 	bl	80002e8 <__aeabi_dsub>
 80067e0:	a393      	add	r3, pc, #588	; (adr r3, 8006a30 <__ieee754_rem_pio2+0x2f8>)
 80067e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e6:	e7de      	b.n	80067a6 <__ieee754_rem_pio2+0x6e>
 80067e8:	f7f9 fd80 	bl	80002ec <__adddf3>
 80067ec:	45a8      	cmp	r8, r5
 80067ee:	4606      	mov	r6, r0
 80067f0:	460f      	mov	r7, r1
 80067f2:	d016      	beq.n	8006822 <__ieee754_rem_pio2+0xea>
 80067f4:	a38a      	add	r3, pc, #552	; (adr r3, 8006a20 <__ieee754_rem_pio2+0x2e8>)
 80067f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fa:	f7f9 fd77 	bl	80002ec <__adddf3>
 80067fe:	4602      	mov	r2, r0
 8006800:	460b      	mov	r3, r1
 8006802:	e9c4 2300 	strd	r2, r3, [r4]
 8006806:	4630      	mov	r0, r6
 8006808:	4639      	mov	r1, r7
 800680a:	f7f9 fd6d 	bl	80002e8 <__aeabi_dsub>
 800680e:	a384      	add	r3, pc, #528	; (adr r3, 8006a20 <__ieee754_rem_pio2+0x2e8>)
 8006810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006814:	f7f9 fd6a 	bl	80002ec <__adddf3>
 8006818:	f04f 35ff 	mov.w	r5, #4294967295
 800681c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006820:	e7c6      	b.n	80067b0 <__ieee754_rem_pio2+0x78>
 8006822:	a381      	add	r3, pc, #516	; (adr r3, 8006a28 <__ieee754_rem_pio2+0x2f0>)
 8006824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006828:	f7f9 fd60 	bl	80002ec <__adddf3>
 800682c:	a380      	add	r3, pc, #512	; (adr r3, 8006a30 <__ieee754_rem_pio2+0x2f8>)
 800682e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006832:	4606      	mov	r6, r0
 8006834:	460f      	mov	r7, r1
 8006836:	f7f9 fd59 	bl	80002ec <__adddf3>
 800683a:	4602      	mov	r2, r0
 800683c:	460b      	mov	r3, r1
 800683e:	e9c4 2300 	strd	r2, r3, [r4]
 8006842:	4630      	mov	r0, r6
 8006844:	4639      	mov	r1, r7
 8006846:	f7f9 fd4f 	bl	80002e8 <__aeabi_dsub>
 800684a:	a379      	add	r3, pc, #484	; (adr r3, 8006a30 <__ieee754_rem_pio2+0x2f8>)
 800684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006850:	e7e0      	b.n	8006814 <__ieee754_rem_pio2+0xdc>
 8006852:	4b82      	ldr	r3, [pc, #520]	; (8006a5c <__ieee754_rem_pio2+0x324>)
 8006854:	4598      	cmp	r8, r3
 8006856:	f300 80d0 	bgt.w	80069fa <__ieee754_rem_pio2+0x2c2>
 800685a:	f000 fe23 	bl	80074a4 <fabs>
 800685e:	ec57 6b10 	vmov	r6, r7, d0
 8006862:	ee10 0a10 	vmov	r0, s0
 8006866:	a374      	add	r3, pc, #464	; (adr r3, 8006a38 <__ieee754_rem_pio2+0x300>)
 8006868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686c:	4639      	mov	r1, r7
 800686e:	f7f9 fef3 	bl	8000658 <__aeabi_dmul>
 8006872:	2200      	movs	r2, #0
 8006874:	4b7a      	ldr	r3, [pc, #488]	; (8006a60 <__ieee754_rem_pio2+0x328>)
 8006876:	f7f9 fd39 	bl	80002ec <__adddf3>
 800687a:	f7fa f987 	bl	8000b8c <__aeabi_d2iz>
 800687e:	4605      	mov	r5, r0
 8006880:	f7f9 fe80 	bl	8000584 <__aeabi_i2d>
 8006884:	a364      	add	r3, pc, #400	; (adr r3, 8006a18 <__ieee754_rem_pio2+0x2e0>)
 8006886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800688e:	f7f9 fee3 	bl	8000658 <__aeabi_dmul>
 8006892:	4602      	mov	r2, r0
 8006894:	460b      	mov	r3, r1
 8006896:	4630      	mov	r0, r6
 8006898:	4639      	mov	r1, r7
 800689a:	f7f9 fd25 	bl	80002e8 <__aeabi_dsub>
 800689e:	a360      	add	r3, pc, #384	; (adr r3, 8006a20 <__ieee754_rem_pio2+0x2e8>)
 80068a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a4:	4682      	mov	sl, r0
 80068a6:	468b      	mov	fp, r1
 80068a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068ac:	f7f9 fed4 	bl	8000658 <__aeabi_dmul>
 80068b0:	2d1f      	cmp	r5, #31
 80068b2:	4606      	mov	r6, r0
 80068b4:	460f      	mov	r7, r1
 80068b6:	dc0c      	bgt.n	80068d2 <__ieee754_rem_pio2+0x19a>
 80068b8:	1e6a      	subs	r2, r5, #1
 80068ba:	4b6a      	ldr	r3, [pc, #424]	; (8006a64 <__ieee754_rem_pio2+0x32c>)
 80068bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c0:	4543      	cmp	r3, r8
 80068c2:	d006      	beq.n	80068d2 <__ieee754_rem_pio2+0x19a>
 80068c4:	4632      	mov	r2, r6
 80068c6:	463b      	mov	r3, r7
 80068c8:	4650      	mov	r0, sl
 80068ca:	4659      	mov	r1, fp
 80068cc:	f7f9 fd0c 	bl	80002e8 <__aeabi_dsub>
 80068d0:	e00e      	b.n	80068f0 <__ieee754_rem_pio2+0x1b8>
 80068d2:	4632      	mov	r2, r6
 80068d4:	463b      	mov	r3, r7
 80068d6:	4650      	mov	r0, sl
 80068d8:	4659      	mov	r1, fp
 80068da:	f7f9 fd05 	bl	80002e8 <__aeabi_dsub>
 80068de:	ea4f 5328 	mov.w	r3, r8, asr #20
 80068e2:	9305      	str	r3, [sp, #20]
 80068e4:	9a05      	ldr	r2, [sp, #20]
 80068e6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	2b10      	cmp	r3, #16
 80068ee:	dc02      	bgt.n	80068f6 <__ieee754_rem_pio2+0x1be>
 80068f0:	e9c4 0100 	strd	r0, r1, [r4]
 80068f4:	e039      	b.n	800696a <__ieee754_rem_pio2+0x232>
 80068f6:	a34c      	add	r3, pc, #304	; (adr r3, 8006a28 <__ieee754_rem_pio2+0x2f0>)
 80068f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006900:	f7f9 feaa 	bl	8000658 <__aeabi_dmul>
 8006904:	4606      	mov	r6, r0
 8006906:	460f      	mov	r7, r1
 8006908:	4602      	mov	r2, r0
 800690a:	460b      	mov	r3, r1
 800690c:	4650      	mov	r0, sl
 800690e:	4659      	mov	r1, fp
 8006910:	f7f9 fcea 	bl	80002e8 <__aeabi_dsub>
 8006914:	4602      	mov	r2, r0
 8006916:	460b      	mov	r3, r1
 8006918:	4680      	mov	r8, r0
 800691a:	4689      	mov	r9, r1
 800691c:	4650      	mov	r0, sl
 800691e:	4659      	mov	r1, fp
 8006920:	f7f9 fce2 	bl	80002e8 <__aeabi_dsub>
 8006924:	4632      	mov	r2, r6
 8006926:	463b      	mov	r3, r7
 8006928:	f7f9 fcde 	bl	80002e8 <__aeabi_dsub>
 800692c:	a340      	add	r3, pc, #256	; (adr r3, 8006a30 <__ieee754_rem_pio2+0x2f8>)
 800692e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006932:	4606      	mov	r6, r0
 8006934:	460f      	mov	r7, r1
 8006936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800693a:	f7f9 fe8d 	bl	8000658 <__aeabi_dmul>
 800693e:	4632      	mov	r2, r6
 8006940:	463b      	mov	r3, r7
 8006942:	f7f9 fcd1 	bl	80002e8 <__aeabi_dsub>
 8006946:	4602      	mov	r2, r0
 8006948:	460b      	mov	r3, r1
 800694a:	4606      	mov	r6, r0
 800694c:	460f      	mov	r7, r1
 800694e:	4640      	mov	r0, r8
 8006950:	4649      	mov	r1, r9
 8006952:	f7f9 fcc9 	bl	80002e8 <__aeabi_dsub>
 8006956:	9a05      	ldr	r2, [sp, #20]
 8006958:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b31      	cmp	r3, #49	; 0x31
 8006960:	dc20      	bgt.n	80069a4 <__ieee754_rem_pio2+0x26c>
 8006962:	e9c4 0100 	strd	r0, r1, [r4]
 8006966:	46c2      	mov	sl, r8
 8006968:	46cb      	mov	fp, r9
 800696a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800696e:	4650      	mov	r0, sl
 8006970:	4642      	mov	r2, r8
 8006972:	464b      	mov	r3, r9
 8006974:	4659      	mov	r1, fp
 8006976:	f7f9 fcb7 	bl	80002e8 <__aeabi_dsub>
 800697a:	463b      	mov	r3, r7
 800697c:	4632      	mov	r2, r6
 800697e:	f7f9 fcb3 	bl	80002e8 <__aeabi_dsub>
 8006982:	9b04      	ldr	r3, [sp, #16]
 8006984:	2b00      	cmp	r3, #0
 8006986:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800698a:	f6bf af11 	bge.w	80067b0 <__ieee754_rem_pio2+0x78>
 800698e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006992:	6063      	str	r3, [r4, #4]
 8006994:	f8c4 8000 	str.w	r8, [r4]
 8006998:	60a0      	str	r0, [r4, #8]
 800699a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800699e:	60e3      	str	r3, [r4, #12]
 80069a0:	426d      	negs	r5, r5
 80069a2:	e705      	b.n	80067b0 <__ieee754_rem_pio2+0x78>
 80069a4:	a326      	add	r3, pc, #152	; (adr r3, 8006a40 <__ieee754_rem_pio2+0x308>)
 80069a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069ae:	f7f9 fe53 	bl	8000658 <__aeabi_dmul>
 80069b2:	4606      	mov	r6, r0
 80069b4:	460f      	mov	r7, r1
 80069b6:	4602      	mov	r2, r0
 80069b8:	460b      	mov	r3, r1
 80069ba:	4640      	mov	r0, r8
 80069bc:	4649      	mov	r1, r9
 80069be:	f7f9 fc93 	bl	80002e8 <__aeabi_dsub>
 80069c2:	4602      	mov	r2, r0
 80069c4:	460b      	mov	r3, r1
 80069c6:	4682      	mov	sl, r0
 80069c8:	468b      	mov	fp, r1
 80069ca:	4640      	mov	r0, r8
 80069cc:	4649      	mov	r1, r9
 80069ce:	f7f9 fc8b 	bl	80002e8 <__aeabi_dsub>
 80069d2:	4632      	mov	r2, r6
 80069d4:	463b      	mov	r3, r7
 80069d6:	f7f9 fc87 	bl	80002e8 <__aeabi_dsub>
 80069da:	a31b      	add	r3, pc, #108	; (adr r3, 8006a48 <__ieee754_rem_pio2+0x310>)
 80069dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e0:	4606      	mov	r6, r0
 80069e2:	460f      	mov	r7, r1
 80069e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069e8:	f7f9 fe36 	bl	8000658 <__aeabi_dmul>
 80069ec:	4632      	mov	r2, r6
 80069ee:	463b      	mov	r3, r7
 80069f0:	f7f9 fc7a 	bl	80002e8 <__aeabi_dsub>
 80069f4:	4606      	mov	r6, r0
 80069f6:	460f      	mov	r7, r1
 80069f8:	e764      	b.n	80068c4 <__ieee754_rem_pio2+0x18c>
 80069fa:	4b1b      	ldr	r3, [pc, #108]	; (8006a68 <__ieee754_rem_pio2+0x330>)
 80069fc:	4598      	cmp	r8, r3
 80069fe:	dd35      	ble.n	8006a6c <__ieee754_rem_pio2+0x334>
 8006a00:	ee10 2a10 	vmov	r2, s0
 8006a04:	463b      	mov	r3, r7
 8006a06:	4630      	mov	r0, r6
 8006a08:	4639      	mov	r1, r7
 8006a0a:	f7f9 fc6d 	bl	80002e8 <__aeabi_dsub>
 8006a0e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006a12:	e9c4 0100 	strd	r0, r1, [r4]
 8006a16:	e6a1      	b.n	800675c <__ieee754_rem_pio2+0x24>
 8006a18:	54400000 	.word	0x54400000
 8006a1c:	3ff921fb 	.word	0x3ff921fb
 8006a20:	1a626331 	.word	0x1a626331
 8006a24:	3dd0b461 	.word	0x3dd0b461
 8006a28:	1a600000 	.word	0x1a600000
 8006a2c:	3dd0b461 	.word	0x3dd0b461
 8006a30:	2e037073 	.word	0x2e037073
 8006a34:	3ba3198a 	.word	0x3ba3198a
 8006a38:	6dc9c883 	.word	0x6dc9c883
 8006a3c:	3fe45f30 	.word	0x3fe45f30
 8006a40:	2e000000 	.word	0x2e000000
 8006a44:	3ba3198a 	.word	0x3ba3198a
 8006a48:	252049c1 	.word	0x252049c1
 8006a4c:	397b839a 	.word	0x397b839a
 8006a50:	3fe921fb 	.word	0x3fe921fb
 8006a54:	4002d97b 	.word	0x4002d97b
 8006a58:	3ff921fb 	.word	0x3ff921fb
 8006a5c:	413921fb 	.word	0x413921fb
 8006a60:	3fe00000 	.word	0x3fe00000
 8006a64:	08007908 	.word	0x08007908
 8006a68:	7fefffff 	.word	0x7fefffff
 8006a6c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006a70:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8006a74:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006a78:	4630      	mov	r0, r6
 8006a7a:	460f      	mov	r7, r1
 8006a7c:	f7fa f886 	bl	8000b8c <__aeabi_d2iz>
 8006a80:	f7f9 fd80 	bl	8000584 <__aeabi_i2d>
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4630      	mov	r0, r6
 8006a8a:	4639      	mov	r1, r7
 8006a8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a90:	f7f9 fc2a 	bl	80002e8 <__aeabi_dsub>
 8006a94:	2200      	movs	r2, #0
 8006a96:	4b1f      	ldr	r3, [pc, #124]	; (8006b14 <__ieee754_rem_pio2+0x3dc>)
 8006a98:	f7f9 fdde 	bl	8000658 <__aeabi_dmul>
 8006a9c:	460f      	mov	r7, r1
 8006a9e:	4606      	mov	r6, r0
 8006aa0:	f7fa f874 	bl	8000b8c <__aeabi_d2iz>
 8006aa4:	f7f9 fd6e 	bl	8000584 <__aeabi_i2d>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	4630      	mov	r0, r6
 8006aae:	4639      	mov	r1, r7
 8006ab0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006ab4:	f7f9 fc18 	bl	80002e8 <__aeabi_dsub>
 8006ab8:	2200      	movs	r2, #0
 8006aba:	4b16      	ldr	r3, [pc, #88]	; (8006b14 <__ieee754_rem_pio2+0x3dc>)
 8006abc:	f7f9 fdcc 	bl	8000658 <__aeabi_dmul>
 8006ac0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006ac4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8006ac8:	f04f 0803 	mov.w	r8, #3
 8006acc:	2600      	movs	r6, #0
 8006ace:	2700      	movs	r7, #0
 8006ad0:	4632      	mov	r2, r6
 8006ad2:	463b      	mov	r3, r7
 8006ad4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006ad8:	f108 3aff 	add.w	sl, r8, #4294967295
 8006adc:	f7fa f824 	bl	8000b28 <__aeabi_dcmpeq>
 8006ae0:	b9b0      	cbnz	r0, 8006b10 <__ieee754_rem_pio2+0x3d8>
 8006ae2:	4b0d      	ldr	r3, [pc, #52]	; (8006b18 <__ieee754_rem_pio2+0x3e0>)
 8006ae4:	9301      	str	r3, [sp, #4]
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	462a      	mov	r2, r5
 8006aec:	4643      	mov	r3, r8
 8006aee:	4621      	mov	r1, r4
 8006af0:	a806      	add	r0, sp, #24
 8006af2:	f000 f8dd 	bl	8006cb0 <__kernel_rem_pio2>
 8006af6:	9b04      	ldr	r3, [sp, #16]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	4605      	mov	r5, r0
 8006afc:	f6bf ae58 	bge.w	80067b0 <__ieee754_rem_pio2+0x78>
 8006b00:	6863      	ldr	r3, [r4, #4]
 8006b02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006b06:	6063      	str	r3, [r4, #4]
 8006b08:	68e3      	ldr	r3, [r4, #12]
 8006b0a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006b0e:	e746      	b.n	800699e <__ieee754_rem_pio2+0x266>
 8006b10:	46d0      	mov	r8, sl
 8006b12:	e7dd      	b.n	8006ad0 <__ieee754_rem_pio2+0x398>
 8006b14:	41700000 	.word	0x41700000
 8006b18:	08007988 	.word	0x08007988
 8006b1c:	00000000 	.word	0x00000000

08006b20 <__kernel_cos>:
 8006b20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b24:	ec59 8b10 	vmov	r8, r9, d0
 8006b28:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8006b2c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8006b30:	ed2d 8b02 	vpush	{d8}
 8006b34:	eeb0 8a41 	vmov.f32	s16, s2
 8006b38:	eef0 8a61 	vmov.f32	s17, s3
 8006b3c:	da07      	bge.n	8006b4e <__kernel_cos+0x2e>
 8006b3e:	ee10 0a10 	vmov	r0, s0
 8006b42:	4649      	mov	r1, r9
 8006b44:	f7fa f822 	bl	8000b8c <__aeabi_d2iz>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	f000 8089 	beq.w	8006c60 <__kernel_cos+0x140>
 8006b4e:	4642      	mov	r2, r8
 8006b50:	464b      	mov	r3, r9
 8006b52:	4640      	mov	r0, r8
 8006b54:	4649      	mov	r1, r9
 8006b56:	f7f9 fd7f 	bl	8000658 <__aeabi_dmul>
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	4b4e      	ldr	r3, [pc, #312]	; (8006c98 <__kernel_cos+0x178>)
 8006b5e:	4604      	mov	r4, r0
 8006b60:	460d      	mov	r5, r1
 8006b62:	f7f9 fd79 	bl	8000658 <__aeabi_dmul>
 8006b66:	a340      	add	r3, pc, #256	; (adr r3, 8006c68 <__kernel_cos+0x148>)
 8006b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6c:	4682      	mov	sl, r0
 8006b6e:	468b      	mov	fp, r1
 8006b70:	4620      	mov	r0, r4
 8006b72:	4629      	mov	r1, r5
 8006b74:	f7f9 fd70 	bl	8000658 <__aeabi_dmul>
 8006b78:	a33d      	add	r3, pc, #244	; (adr r3, 8006c70 <__kernel_cos+0x150>)
 8006b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7e:	f7f9 fbb5 	bl	80002ec <__adddf3>
 8006b82:	4622      	mov	r2, r4
 8006b84:	462b      	mov	r3, r5
 8006b86:	f7f9 fd67 	bl	8000658 <__aeabi_dmul>
 8006b8a:	a33b      	add	r3, pc, #236	; (adr r3, 8006c78 <__kernel_cos+0x158>)
 8006b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b90:	f7f9 fbaa 	bl	80002e8 <__aeabi_dsub>
 8006b94:	4622      	mov	r2, r4
 8006b96:	462b      	mov	r3, r5
 8006b98:	f7f9 fd5e 	bl	8000658 <__aeabi_dmul>
 8006b9c:	a338      	add	r3, pc, #224	; (adr r3, 8006c80 <__kernel_cos+0x160>)
 8006b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba2:	f7f9 fba3 	bl	80002ec <__adddf3>
 8006ba6:	4622      	mov	r2, r4
 8006ba8:	462b      	mov	r3, r5
 8006baa:	f7f9 fd55 	bl	8000658 <__aeabi_dmul>
 8006bae:	a336      	add	r3, pc, #216	; (adr r3, 8006c88 <__kernel_cos+0x168>)
 8006bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb4:	f7f9 fb98 	bl	80002e8 <__aeabi_dsub>
 8006bb8:	4622      	mov	r2, r4
 8006bba:	462b      	mov	r3, r5
 8006bbc:	f7f9 fd4c 	bl	8000658 <__aeabi_dmul>
 8006bc0:	a333      	add	r3, pc, #204	; (adr r3, 8006c90 <__kernel_cos+0x170>)
 8006bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc6:	f7f9 fb91 	bl	80002ec <__adddf3>
 8006bca:	4622      	mov	r2, r4
 8006bcc:	462b      	mov	r3, r5
 8006bce:	f7f9 fd43 	bl	8000658 <__aeabi_dmul>
 8006bd2:	4622      	mov	r2, r4
 8006bd4:	462b      	mov	r3, r5
 8006bd6:	f7f9 fd3f 	bl	8000658 <__aeabi_dmul>
 8006bda:	ec53 2b18 	vmov	r2, r3, d8
 8006bde:	4604      	mov	r4, r0
 8006be0:	460d      	mov	r5, r1
 8006be2:	4640      	mov	r0, r8
 8006be4:	4649      	mov	r1, r9
 8006be6:	f7f9 fd37 	bl	8000658 <__aeabi_dmul>
 8006bea:	460b      	mov	r3, r1
 8006bec:	4602      	mov	r2, r0
 8006bee:	4629      	mov	r1, r5
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	f7f9 fb79 	bl	80002e8 <__aeabi_dsub>
 8006bf6:	4b29      	ldr	r3, [pc, #164]	; (8006c9c <__kernel_cos+0x17c>)
 8006bf8:	429e      	cmp	r6, r3
 8006bfa:	4680      	mov	r8, r0
 8006bfc:	4689      	mov	r9, r1
 8006bfe:	dc11      	bgt.n	8006c24 <__kernel_cos+0x104>
 8006c00:	4602      	mov	r2, r0
 8006c02:	460b      	mov	r3, r1
 8006c04:	4650      	mov	r0, sl
 8006c06:	4659      	mov	r1, fp
 8006c08:	f7f9 fb6e 	bl	80002e8 <__aeabi_dsub>
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	4924      	ldr	r1, [pc, #144]	; (8006ca0 <__kernel_cos+0x180>)
 8006c10:	4602      	mov	r2, r0
 8006c12:	2000      	movs	r0, #0
 8006c14:	f7f9 fb68 	bl	80002e8 <__aeabi_dsub>
 8006c18:	ecbd 8b02 	vpop	{d8}
 8006c1c:	ec41 0b10 	vmov	d0, r0, r1
 8006c20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c24:	4b1f      	ldr	r3, [pc, #124]	; (8006ca4 <__kernel_cos+0x184>)
 8006c26:	491e      	ldr	r1, [pc, #120]	; (8006ca0 <__kernel_cos+0x180>)
 8006c28:	429e      	cmp	r6, r3
 8006c2a:	bfcc      	ite	gt
 8006c2c:	4d1e      	ldrgt	r5, [pc, #120]	; (8006ca8 <__kernel_cos+0x188>)
 8006c2e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8006c32:	2400      	movs	r4, #0
 8006c34:	4622      	mov	r2, r4
 8006c36:	462b      	mov	r3, r5
 8006c38:	2000      	movs	r0, #0
 8006c3a:	f7f9 fb55 	bl	80002e8 <__aeabi_dsub>
 8006c3e:	4622      	mov	r2, r4
 8006c40:	4606      	mov	r6, r0
 8006c42:	460f      	mov	r7, r1
 8006c44:	462b      	mov	r3, r5
 8006c46:	4650      	mov	r0, sl
 8006c48:	4659      	mov	r1, fp
 8006c4a:	f7f9 fb4d 	bl	80002e8 <__aeabi_dsub>
 8006c4e:	4642      	mov	r2, r8
 8006c50:	464b      	mov	r3, r9
 8006c52:	f7f9 fb49 	bl	80002e8 <__aeabi_dsub>
 8006c56:	4602      	mov	r2, r0
 8006c58:	460b      	mov	r3, r1
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	4639      	mov	r1, r7
 8006c5e:	e7d9      	b.n	8006c14 <__kernel_cos+0xf4>
 8006c60:	2000      	movs	r0, #0
 8006c62:	490f      	ldr	r1, [pc, #60]	; (8006ca0 <__kernel_cos+0x180>)
 8006c64:	e7d8      	b.n	8006c18 <__kernel_cos+0xf8>
 8006c66:	bf00      	nop
 8006c68:	be8838d4 	.word	0xbe8838d4
 8006c6c:	bda8fae9 	.word	0xbda8fae9
 8006c70:	bdb4b1c4 	.word	0xbdb4b1c4
 8006c74:	3e21ee9e 	.word	0x3e21ee9e
 8006c78:	809c52ad 	.word	0x809c52ad
 8006c7c:	3e927e4f 	.word	0x3e927e4f
 8006c80:	19cb1590 	.word	0x19cb1590
 8006c84:	3efa01a0 	.word	0x3efa01a0
 8006c88:	16c15177 	.word	0x16c15177
 8006c8c:	3f56c16c 	.word	0x3f56c16c
 8006c90:	5555554c 	.word	0x5555554c
 8006c94:	3fa55555 	.word	0x3fa55555
 8006c98:	3fe00000 	.word	0x3fe00000
 8006c9c:	3fd33332 	.word	0x3fd33332
 8006ca0:	3ff00000 	.word	0x3ff00000
 8006ca4:	3fe90000 	.word	0x3fe90000
 8006ca8:	3fd20000 	.word	0x3fd20000
 8006cac:	00000000 	.word	0x00000000

08006cb0 <__kernel_rem_pio2>:
 8006cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb4:	ed2d 8b02 	vpush	{d8}
 8006cb8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006cbc:	1ed4      	subs	r4, r2, #3
 8006cbe:	9308      	str	r3, [sp, #32]
 8006cc0:	9101      	str	r1, [sp, #4]
 8006cc2:	4bc5      	ldr	r3, [pc, #788]	; (8006fd8 <__kernel_rem_pio2+0x328>)
 8006cc4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8006cc6:	9009      	str	r0, [sp, #36]	; 0x24
 8006cc8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006ccc:	9304      	str	r3, [sp, #16]
 8006cce:	9b08      	ldr	r3, [sp, #32]
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	9307      	str	r3, [sp, #28]
 8006cd4:	2318      	movs	r3, #24
 8006cd6:	fb94 f4f3 	sdiv	r4, r4, r3
 8006cda:	f06f 0317 	mvn.w	r3, #23
 8006cde:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8006ce2:	fb04 3303 	mla	r3, r4, r3, r3
 8006ce6:	eb03 0a02 	add.w	sl, r3, r2
 8006cea:	9b04      	ldr	r3, [sp, #16]
 8006cec:	9a07      	ldr	r2, [sp, #28]
 8006cee:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8006fc8 <__kernel_rem_pio2+0x318>
 8006cf2:	eb03 0802 	add.w	r8, r3, r2
 8006cf6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006cf8:	1aa7      	subs	r7, r4, r2
 8006cfa:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006cfe:	ae22      	add	r6, sp, #136	; 0x88
 8006d00:	2500      	movs	r5, #0
 8006d02:	4545      	cmp	r5, r8
 8006d04:	dd13      	ble.n	8006d2e <__kernel_rem_pio2+0x7e>
 8006d06:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8006fc8 <__kernel_rem_pio2+0x318>
 8006d0a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8006d0e:	2600      	movs	r6, #0
 8006d10:	9b04      	ldr	r3, [sp, #16]
 8006d12:	429e      	cmp	r6, r3
 8006d14:	dc32      	bgt.n	8006d7c <__kernel_rem_pio2+0xcc>
 8006d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d18:	9302      	str	r3, [sp, #8]
 8006d1a:	9b08      	ldr	r3, [sp, #32]
 8006d1c:	199d      	adds	r5, r3, r6
 8006d1e:	ab22      	add	r3, sp, #136	; 0x88
 8006d20:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006d24:	9306      	str	r3, [sp, #24]
 8006d26:	ec59 8b18 	vmov	r8, r9, d8
 8006d2a:	2700      	movs	r7, #0
 8006d2c:	e01f      	b.n	8006d6e <__kernel_rem_pio2+0xbe>
 8006d2e:	42ef      	cmn	r7, r5
 8006d30:	d407      	bmi.n	8006d42 <__kernel_rem_pio2+0x92>
 8006d32:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006d36:	f7f9 fc25 	bl	8000584 <__aeabi_i2d>
 8006d3a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006d3e:	3501      	adds	r5, #1
 8006d40:	e7df      	b.n	8006d02 <__kernel_rem_pio2+0x52>
 8006d42:	ec51 0b18 	vmov	r0, r1, d8
 8006d46:	e7f8      	b.n	8006d3a <__kernel_rem_pio2+0x8a>
 8006d48:	9906      	ldr	r1, [sp, #24]
 8006d4a:	9d02      	ldr	r5, [sp, #8]
 8006d4c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8006d50:	9106      	str	r1, [sp, #24]
 8006d52:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8006d56:	9502      	str	r5, [sp, #8]
 8006d58:	f7f9 fc7e 	bl	8000658 <__aeabi_dmul>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4640      	mov	r0, r8
 8006d62:	4649      	mov	r1, r9
 8006d64:	f7f9 fac2 	bl	80002ec <__adddf3>
 8006d68:	3701      	adds	r7, #1
 8006d6a:	4680      	mov	r8, r0
 8006d6c:	4689      	mov	r9, r1
 8006d6e:	9b07      	ldr	r3, [sp, #28]
 8006d70:	429f      	cmp	r7, r3
 8006d72:	dde9      	ble.n	8006d48 <__kernel_rem_pio2+0x98>
 8006d74:	e8eb 8902 	strd	r8, r9, [fp], #8
 8006d78:	3601      	adds	r6, #1
 8006d7a:	e7c9      	b.n	8006d10 <__kernel_rem_pio2+0x60>
 8006d7c:	9b04      	ldr	r3, [sp, #16]
 8006d7e:	aa0e      	add	r2, sp, #56	; 0x38
 8006d80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006d84:	930c      	str	r3, [sp, #48]	; 0x30
 8006d86:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006d88:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006d8c:	9c04      	ldr	r4, [sp, #16]
 8006d8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d90:	ab9a      	add	r3, sp, #616	; 0x268
 8006d92:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8006d96:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d9e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8006da2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8006da6:	ab9a      	add	r3, sp, #616	; 0x268
 8006da8:	445b      	add	r3, fp
 8006daa:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8006dae:	2500      	movs	r5, #0
 8006db0:	1b63      	subs	r3, r4, r5
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	dc78      	bgt.n	8006ea8 <__kernel_rem_pio2+0x1f8>
 8006db6:	4650      	mov	r0, sl
 8006db8:	ec49 8b10 	vmov	d0, r8, r9
 8006dbc:	f000 fc00 	bl	80075c0 <scalbn>
 8006dc0:	ec57 6b10 	vmov	r6, r7, d0
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006dca:	ee10 0a10 	vmov	r0, s0
 8006dce:	4639      	mov	r1, r7
 8006dd0:	f7f9 fc42 	bl	8000658 <__aeabi_dmul>
 8006dd4:	ec41 0b10 	vmov	d0, r0, r1
 8006dd8:	f000 fb6e 	bl	80074b8 <floor>
 8006ddc:	2200      	movs	r2, #0
 8006dde:	ec51 0b10 	vmov	r0, r1, d0
 8006de2:	4b7e      	ldr	r3, [pc, #504]	; (8006fdc <__kernel_rem_pio2+0x32c>)
 8006de4:	f7f9 fc38 	bl	8000658 <__aeabi_dmul>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	4630      	mov	r0, r6
 8006dee:	4639      	mov	r1, r7
 8006df0:	f7f9 fa7a 	bl	80002e8 <__aeabi_dsub>
 8006df4:	460f      	mov	r7, r1
 8006df6:	4606      	mov	r6, r0
 8006df8:	f7f9 fec8 	bl	8000b8c <__aeabi_d2iz>
 8006dfc:	9006      	str	r0, [sp, #24]
 8006dfe:	f7f9 fbc1 	bl	8000584 <__aeabi_i2d>
 8006e02:	4602      	mov	r2, r0
 8006e04:	460b      	mov	r3, r1
 8006e06:	4630      	mov	r0, r6
 8006e08:	4639      	mov	r1, r7
 8006e0a:	f7f9 fa6d 	bl	80002e8 <__aeabi_dsub>
 8006e0e:	f1ba 0f00 	cmp.w	sl, #0
 8006e12:	4606      	mov	r6, r0
 8006e14:	460f      	mov	r7, r1
 8006e16:	dd6c      	ble.n	8006ef2 <__kernel_rem_pio2+0x242>
 8006e18:	1e62      	subs	r2, r4, #1
 8006e1a:	ab0e      	add	r3, sp, #56	; 0x38
 8006e1c:	f1ca 0118 	rsb	r1, sl, #24
 8006e20:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006e24:	9d06      	ldr	r5, [sp, #24]
 8006e26:	fa40 f301 	asr.w	r3, r0, r1
 8006e2a:	441d      	add	r5, r3
 8006e2c:	408b      	lsls	r3, r1
 8006e2e:	1ac0      	subs	r0, r0, r3
 8006e30:	ab0e      	add	r3, sp, #56	; 0x38
 8006e32:	9506      	str	r5, [sp, #24]
 8006e34:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006e38:	f1ca 0317 	rsb	r3, sl, #23
 8006e3c:	fa40 f303 	asr.w	r3, r0, r3
 8006e40:	9302      	str	r3, [sp, #8]
 8006e42:	9b02      	ldr	r3, [sp, #8]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	dd62      	ble.n	8006f0e <__kernel_rem_pio2+0x25e>
 8006e48:	9b06      	ldr	r3, [sp, #24]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	9306      	str	r3, [sp, #24]
 8006e50:	4615      	mov	r5, r2
 8006e52:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006e56:	4294      	cmp	r4, r2
 8006e58:	f300 8095 	bgt.w	8006f86 <__kernel_rem_pio2+0x2d6>
 8006e5c:	f1ba 0f00 	cmp.w	sl, #0
 8006e60:	dd07      	ble.n	8006e72 <__kernel_rem_pio2+0x1c2>
 8006e62:	f1ba 0f01 	cmp.w	sl, #1
 8006e66:	f000 80a2 	beq.w	8006fae <__kernel_rem_pio2+0x2fe>
 8006e6a:	f1ba 0f02 	cmp.w	sl, #2
 8006e6e:	f000 80c1 	beq.w	8006ff4 <__kernel_rem_pio2+0x344>
 8006e72:	9b02      	ldr	r3, [sp, #8]
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d14a      	bne.n	8006f0e <__kernel_rem_pio2+0x25e>
 8006e78:	4632      	mov	r2, r6
 8006e7a:	463b      	mov	r3, r7
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	4958      	ldr	r1, [pc, #352]	; (8006fe0 <__kernel_rem_pio2+0x330>)
 8006e80:	f7f9 fa32 	bl	80002e8 <__aeabi_dsub>
 8006e84:	4606      	mov	r6, r0
 8006e86:	460f      	mov	r7, r1
 8006e88:	2d00      	cmp	r5, #0
 8006e8a:	d040      	beq.n	8006f0e <__kernel_rem_pio2+0x25e>
 8006e8c:	4650      	mov	r0, sl
 8006e8e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006fd0 <__kernel_rem_pio2+0x320>
 8006e92:	f000 fb95 	bl	80075c0 <scalbn>
 8006e96:	4630      	mov	r0, r6
 8006e98:	4639      	mov	r1, r7
 8006e9a:	ec53 2b10 	vmov	r2, r3, d0
 8006e9e:	f7f9 fa23 	bl	80002e8 <__aeabi_dsub>
 8006ea2:	4606      	mov	r6, r0
 8006ea4:	460f      	mov	r7, r1
 8006ea6:	e032      	b.n	8006f0e <__kernel_rem_pio2+0x25e>
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	4b4e      	ldr	r3, [pc, #312]	; (8006fe4 <__kernel_rem_pio2+0x334>)
 8006eac:	4640      	mov	r0, r8
 8006eae:	4649      	mov	r1, r9
 8006eb0:	f7f9 fbd2 	bl	8000658 <__aeabi_dmul>
 8006eb4:	f7f9 fe6a 	bl	8000b8c <__aeabi_d2iz>
 8006eb8:	f7f9 fb64 	bl	8000584 <__aeabi_i2d>
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	4b4a      	ldr	r3, [pc, #296]	; (8006fe8 <__kernel_rem_pio2+0x338>)
 8006ec0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ec4:	f7f9 fbc8 	bl	8000658 <__aeabi_dmul>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	460b      	mov	r3, r1
 8006ecc:	4640      	mov	r0, r8
 8006ece:	4649      	mov	r1, r9
 8006ed0:	f7f9 fa0a 	bl	80002e8 <__aeabi_dsub>
 8006ed4:	f7f9 fe5a 	bl	8000b8c <__aeabi_d2iz>
 8006ed8:	ab0e      	add	r3, sp, #56	; 0x38
 8006eda:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8006ede:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006ee2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ee6:	f7f9 fa01 	bl	80002ec <__adddf3>
 8006eea:	3501      	adds	r5, #1
 8006eec:	4680      	mov	r8, r0
 8006eee:	4689      	mov	r9, r1
 8006ef0:	e75e      	b.n	8006db0 <__kernel_rem_pio2+0x100>
 8006ef2:	d105      	bne.n	8006f00 <__kernel_rem_pio2+0x250>
 8006ef4:	1e63      	subs	r3, r4, #1
 8006ef6:	aa0e      	add	r2, sp, #56	; 0x38
 8006ef8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006efc:	15c3      	asrs	r3, r0, #23
 8006efe:	e79f      	b.n	8006e40 <__kernel_rem_pio2+0x190>
 8006f00:	2200      	movs	r2, #0
 8006f02:	4b3a      	ldr	r3, [pc, #232]	; (8006fec <__kernel_rem_pio2+0x33c>)
 8006f04:	f7f9 fe2e 	bl	8000b64 <__aeabi_dcmpge>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	d139      	bne.n	8006f80 <__kernel_rem_pio2+0x2d0>
 8006f0c:	9002      	str	r0, [sp, #8]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	2300      	movs	r3, #0
 8006f12:	4630      	mov	r0, r6
 8006f14:	4639      	mov	r1, r7
 8006f16:	f7f9 fe07 	bl	8000b28 <__aeabi_dcmpeq>
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	f000 80c7 	beq.w	80070ae <__kernel_rem_pio2+0x3fe>
 8006f20:	1e65      	subs	r5, r4, #1
 8006f22:	462b      	mov	r3, r5
 8006f24:	2200      	movs	r2, #0
 8006f26:	9904      	ldr	r1, [sp, #16]
 8006f28:	428b      	cmp	r3, r1
 8006f2a:	da6a      	bge.n	8007002 <__kernel_rem_pio2+0x352>
 8006f2c:	2a00      	cmp	r2, #0
 8006f2e:	f000 8088 	beq.w	8007042 <__kernel_rem_pio2+0x392>
 8006f32:	ab0e      	add	r3, sp, #56	; 0x38
 8006f34:	f1aa 0a18 	sub.w	sl, sl, #24
 8006f38:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 80b4 	beq.w	80070aa <__kernel_rem_pio2+0x3fa>
 8006f42:	4650      	mov	r0, sl
 8006f44:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8006fd0 <__kernel_rem_pio2+0x320>
 8006f48:	f000 fb3a 	bl	80075c0 <scalbn>
 8006f4c:	00ec      	lsls	r4, r5, #3
 8006f4e:	ab72      	add	r3, sp, #456	; 0x1c8
 8006f50:	191e      	adds	r6, r3, r4
 8006f52:	ec59 8b10 	vmov	r8, r9, d0
 8006f56:	f106 0a08 	add.w	sl, r6, #8
 8006f5a:	462f      	mov	r7, r5
 8006f5c:	2f00      	cmp	r7, #0
 8006f5e:	f280 80df 	bge.w	8007120 <__kernel_rem_pio2+0x470>
 8006f62:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8006fc8 <__kernel_rem_pio2+0x318>
 8006f66:	f04f 0a00 	mov.w	sl, #0
 8006f6a:	eba5 030a 	sub.w	r3, r5, sl
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f2c0 810a 	blt.w	8007188 <__kernel_rem_pio2+0x4d8>
 8006f74:	f8df b078 	ldr.w	fp, [pc, #120]	; 8006ff0 <__kernel_rem_pio2+0x340>
 8006f78:	ec59 8b18 	vmov	r8, r9, d8
 8006f7c:	2700      	movs	r7, #0
 8006f7e:	e0f5      	b.n	800716c <__kernel_rem_pio2+0x4bc>
 8006f80:	2302      	movs	r3, #2
 8006f82:	9302      	str	r3, [sp, #8]
 8006f84:	e760      	b.n	8006e48 <__kernel_rem_pio2+0x198>
 8006f86:	ab0e      	add	r3, sp, #56	; 0x38
 8006f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f8c:	b94d      	cbnz	r5, 8006fa2 <__kernel_rem_pio2+0x2f2>
 8006f8e:	b12b      	cbz	r3, 8006f9c <__kernel_rem_pio2+0x2ec>
 8006f90:	a80e      	add	r0, sp, #56	; 0x38
 8006f92:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006f96:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	3201      	adds	r2, #1
 8006f9e:	461d      	mov	r5, r3
 8006fa0:	e759      	b.n	8006e56 <__kernel_rem_pio2+0x1a6>
 8006fa2:	a80e      	add	r0, sp, #56	; 0x38
 8006fa4:	1acb      	subs	r3, r1, r3
 8006fa6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006faa:	462b      	mov	r3, r5
 8006fac:	e7f6      	b.n	8006f9c <__kernel_rem_pio2+0x2ec>
 8006fae:	1e62      	subs	r2, r4, #1
 8006fb0:	ab0e      	add	r3, sp, #56	; 0x38
 8006fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006fba:	a90e      	add	r1, sp, #56	; 0x38
 8006fbc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006fc0:	e757      	b.n	8006e72 <__kernel_rem_pio2+0x1c2>
 8006fc2:	bf00      	nop
 8006fc4:	f3af 8000 	nop.w
	...
 8006fd4:	3ff00000 	.word	0x3ff00000
 8006fd8:	08007ad0 	.word	0x08007ad0
 8006fdc:	40200000 	.word	0x40200000
 8006fe0:	3ff00000 	.word	0x3ff00000
 8006fe4:	3e700000 	.word	0x3e700000
 8006fe8:	41700000 	.word	0x41700000
 8006fec:	3fe00000 	.word	0x3fe00000
 8006ff0:	08007a90 	.word	0x08007a90
 8006ff4:	1e62      	subs	r2, r4, #1
 8006ff6:	ab0e      	add	r3, sp, #56	; 0x38
 8006ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007000:	e7db      	b.n	8006fba <__kernel_rem_pio2+0x30a>
 8007002:	a90e      	add	r1, sp, #56	; 0x38
 8007004:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007008:	3b01      	subs	r3, #1
 800700a:	430a      	orrs	r2, r1
 800700c:	e78b      	b.n	8006f26 <__kernel_rem_pio2+0x276>
 800700e:	3301      	adds	r3, #1
 8007010:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007014:	2900      	cmp	r1, #0
 8007016:	d0fa      	beq.n	800700e <__kernel_rem_pio2+0x35e>
 8007018:	9a08      	ldr	r2, [sp, #32]
 800701a:	4422      	add	r2, r4
 800701c:	00d2      	lsls	r2, r2, #3
 800701e:	a922      	add	r1, sp, #136	; 0x88
 8007020:	18e3      	adds	r3, r4, r3
 8007022:	9206      	str	r2, [sp, #24]
 8007024:	440a      	add	r2, r1
 8007026:	9302      	str	r3, [sp, #8]
 8007028:	f10b 0108 	add.w	r1, fp, #8
 800702c:	f102 0308 	add.w	r3, r2, #8
 8007030:	1c66      	adds	r6, r4, #1
 8007032:	910a      	str	r1, [sp, #40]	; 0x28
 8007034:	2500      	movs	r5, #0
 8007036:	930d      	str	r3, [sp, #52]	; 0x34
 8007038:	9b02      	ldr	r3, [sp, #8]
 800703a:	42b3      	cmp	r3, r6
 800703c:	da04      	bge.n	8007048 <__kernel_rem_pio2+0x398>
 800703e:	461c      	mov	r4, r3
 8007040:	e6a6      	b.n	8006d90 <__kernel_rem_pio2+0xe0>
 8007042:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007044:	2301      	movs	r3, #1
 8007046:	e7e3      	b.n	8007010 <__kernel_rem_pio2+0x360>
 8007048:	9b06      	ldr	r3, [sp, #24]
 800704a:	18ef      	adds	r7, r5, r3
 800704c:	ab22      	add	r3, sp, #136	; 0x88
 800704e:	441f      	add	r7, r3
 8007050:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007052:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007056:	f7f9 fa95 	bl	8000584 <__aeabi_i2d>
 800705a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800705c:	461c      	mov	r4, r3
 800705e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007060:	e9c7 0100 	strd	r0, r1, [r7]
 8007064:	eb03 0b05 	add.w	fp, r3, r5
 8007068:	2700      	movs	r7, #0
 800706a:	f04f 0800 	mov.w	r8, #0
 800706e:	f04f 0900 	mov.w	r9, #0
 8007072:	9b07      	ldr	r3, [sp, #28]
 8007074:	429f      	cmp	r7, r3
 8007076:	dd08      	ble.n	800708a <__kernel_rem_pio2+0x3da>
 8007078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800707a:	aa72      	add	r2, sp, #456	; 0x1c8
 800707c:	18eb      	adds	r3, r5, r3
 800707e:	4413      	add	r3, r2
 8007080:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8007084:	3601      	adds	r6, #1
 8007086:	3508      	adds	r5, #8
 8007088:	e7d6      	b.n	8007038 <__kernel_rem_pio2+0x388>
 800708a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800708e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007092:	f7f9 fae1 	bl	8000658 <__aeabi_dmul>
 8007096:	4602      	mov	r2, r0
 8007098:	460b      	mov	r3, r1
 800709a:	4640      	mov	r0, r8
 800709c:	4649      	mov	r1, r9
 800709e:	f7f9 f925 	bl	80002ec <__adddf3>
 80070a2:	3701      	adds	r7, #1
 80070a4:	4680      	mov	r8, r0
 80070a6:	4689      	mov	r9, r1
 80070a8:	e7e3      	b.n	8007072 <__kernel_rem_pio2+0x3c2>
 80070aa:	3d01      	subs	r5, #1
 80070ac:	e741      	b.n	8006f32 <__kernel_rem_pio2+0x282>
 80070ae:	f1ca 0000 	rsb	r0, sl, #0
 80070b2:	ec47 6b10 	vmov	d0, r6, r7
 80070b6:	f000 fa83 	bl	80075c0 <scalbn>
 80070ba:	ec57 6b10 	vmov	r6, r7, d0
 80070be:	2200      	movs	r2, #0
 80070c0:	4b99      	ldr	r3, [pc, #612]	; (8007328 <__kernel_rem_pio2+0x678>)
 80070c2:	ee10 0a10 	vmov	r0, s0
 80070c6:	4639      	mov	r1, r7
 80070c8:	f7f9 fd4c 	bl	8000b64 <__aeabi_dcmpge>
 80070cc:	b1f8      	cbz	r0, 800710e <__kernel_rem_pio2+0x45e>
 80070ce:	2200      	movs	r2, #0
 80070d0:	4b96      	ldr	r3, [pc, #600]	; (800732c <__kernel_rem_pio2+0x67c>)
 80070d2:	4630      	mov	r0, r6
 80070d4:	4639      	mov	r1, r7
 80070d6:	f7f9 fabf 	bl	8000658 <__aeabi_dmul>
 80070da:	f7f9 fd57 	bl	8000b8c <__aeabi_d2iz>
 80070de:	4680      	mov	r8, r0
 80070e0:	f7f9 fa50 	bl	8000584 <__aeabi_i2d>
 80070e4:	2200      	movs	r2, #0
 80070e6:	4b90      	ldr	r3, [pc, #576]	; (8007328 <__kernel_rem_pio2+0x678>)
 80070e8:	f7f9 fab6 	bl	8000658 <__aeabi_dmul>
 80070ec:	460b      	mov	r3, r1
 80070ee:	4602      	mov	r2, r0
 80070f0:	4639      	mov	r1, r7
 80070f2:	4630      	mov	r0, r6
 80070f4:	f7f9 f8f8 	bl	80002e8 <__aeabi_dsub>
 80070f8:	f7f9 fd48 	bl	8000b8c <__aeabi_d2iz>
 80070fc:	1c65      	adds	r5, r4, #1
 80070fe:	ab0e      	add	r3, sp, #56	; 0x38
 8007100:	f10a 0a18 	add.w	sl, sl, #24
 8007104:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007108:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800710c:	e719      	b.n	8006f42 <__kernel_rem_pio2+0x292>
 800710e:	4630      	mov	r0, r6
 8007110:	4639      	mov	r1, r7
 8007112:	f7f9 fd3b 	bl	8000b8c <__aeabi_d2iz>
 8007116:	ab0e      	add	r3, sp, #56	; 0x38
 8007118:	4625      	mov	r5, r4
 800711a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800711e:	e710      	b.n	8006f42 <__kernel_rem_pio2+0x292>
 8007120:	ab0e      	add	r3, sp, #56	; 0x38
 8007122:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8007126:	f7f9 fa2d 	bl	8000584 <__aeabi_i2d>
 800712a:	4642      	mov	r2, r8
 800712c:	464b      	mov	r3, r9
 800712e:	f7f9 fa93 	bl	8000658 <__aeabi_dmul>
 8007132:	2200      	movs	r2, #0
 8007134:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8007138:	4b7c      	ldr	r3, [pc, #496]	; (800732c <__kernel_rem_pio2+0x67c>)
 800713a:	4640      	mov	r0, r8
 800713c:	4649      	mov	r1, r9
 800713e:	f7f9 fa8b 	bl	8000658 <__aeabi_dmul>
 8007142:	3f01      	subs	r7, #1
 8007144:	4680      	mov	r8, r0
 8007146:	4689      	mov	r9, r1
 8007148:	e708      	b.n	8006f5c <__kernel_rem_pio2+0x2ac>
 800714a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800714e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007152:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8007156:	f7f9 fa7f 	bl	8000658 <__aeabi_dmul>
 800715a:	4602      	mov	r2, r0
 800715c:	460b      	mov	r3, r1
 800715e:	4640      	mov	r0, r8
 8007160:	4649      	mov	r1, r9
 8007162:	f7f9 f8c3 	bl	80002ec <__adddf3>
 8007166:	3701      	adds	r7, #1
 8007168:	4680      	mov	r8, r0
 800716a:	4689      	mov	r9, r1
 800716c:	9b04      	ldr	r3, [sp, #16]
 800716e:	429f      	cmp	r7, r3
 8007170:	dc01      	bgt.n	8007176 <__kernel_rem_pio2+0x4c6>
 8007172:	45ba      	cmp	sl, r7
 8007174:	dae9      	bge.n	800714a <__kernel_rem_pio2+0x49a>
 8007176:	ab4a      	add	r3, sp, #296	; 0x128
 8007178:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800717c:	e9c3 8900 	strd	r8, r9, [r3]
 8007180:	f10a 0a01 	add.w	sl, sl, #1
 8007184:	3e08      	subs	r6, #8
 8007186:	e6f0      	b.n	8006f6a <__kernel_rem_pio2+0x2ba>
 8007188:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800718a:	2b03      	cmp	r3, #3
 800718c:	d85b      	bhi.n	8007246 <__kernel_rem_pio2+0x596>
 800718e:	e8df f003 	tbb	[pc, r3]
 8007192:	264a      	.short	0x264a
 8007194:	0226      	.short	0x0226
 8007196:	ab9a      	add	r3, sp, #616	; 0x268
 8007198:	441c      	add	r4, r3
 800719a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800719e:	46a2      	mov	sl, r4
 80071a0:	46ab      	mov	fp, r5
 80071a2:	f1bb 0f00 	cmp.w	fp, #0
 80071a6:	dc6c      	bgt.n	8007282 <__kernel_rem_pio2+0x5d2>
 80071a8:	46a2      	mov	sl, r4
 80071aa:	46ab      	mov	fp, r5
 80071ac:	f1bb 0f01 	cmp.w	fp, #1
 80071b0:	f300 8086 	bgt.w	80072c0 <__kernel_rem_pio2+0x610>
 80071b4:	2000      	movs	r0, #0
 80071b6:	2100      	movs	r1, #0
 80071b8:	2d01      	cmp	r5, #1
 80071ba:	f300 80a0 	bgt.w	80072fe <__kernel_rem_pio2+0x64e>
 80071be:	9b02      	ldr	r3, [sp, #8]
 80071c0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80071c4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f040 809e 	bne.w	800730a <__kernel_rem_pio2+0x65a>
 80071ce:	9b01      	ldr	r3, [sp, #4]
 80071d0:	e9c3 7800 	strd	r7, r8, [r3]
 80071d4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80071d8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80071dc:	e033      	b.n	8007246 <__kernel_rem_pio2+0x596>
 80071de:	3408      	adds	r4, #8
 80071e0:	ab4a      	add	r3, sp, #296	; 0x128
 80071e2:	441c      	add	r4, r3
 80071e4:	462e      	mov	r6, r5
 80071e6:	2000      	movs	r0, #0
 80071e8:	2100      	movs	r1, #0
 80071ea:	2e00      	cmp	r6, #0
 80071ec:	da3a      	bge.n	8007264 <__kernel_rem_pio2+0x5b4>
 80071ee:	9b02      	ldr	r3, [sp, #8]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d03d      	beq.n	8007270 <__kernel_rem_pio2+0x5c0>
 80071f4:	4602      	mov	r2, r0
 80071f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071fa:	9c01      	ldr	r4, [sp, #4]
 80071fc:	e9c4 2300 	strd	r2, r3, [r4]
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007208:	f7f9 f86e 	bl	80002e8 <__aeabi_dsub>
 800720c:	ae4c      	add	r6, sp, #304	; 0x130
 800720e:	2401      	movs	r4, #1
 8007210:	42a5      	cmp	r5, r4
 8007212:	da30      	bge.n	8007276 <__kernel_rem_pio2+0x5c6>
 8007214:	9b02      	ldr	r3, [sp, #8]
 8007216:	b113      	cbz	r3, 800721e <__kernel_rem_pio2+0x56e>
 8007218:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800721c:	4619      	mov	r1, r3
 800721e:	9b01      	ldr	r3, [sp, #4]
 8007220:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007224:	e00f      	b.n	8007246 <__kernel_rem_pio2+0x596>
 8007226:	ab9a      	add	r3, sp, #616	; 0x268
 8007228:	441c      	add	r4, r3
 800722a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800722e:	2000      	movs	r0, #0
 8007230:	2100      	movs	r1, #0
 8007232:	2d00      	cmp	r5, #0
 8007234:	da10      	bge.n	8007258 <__kernel_rem_pio2+0x5a8>
 8007236:	9b02      	ldr	r3, [sp, #8]
 8007238:	b113      	cbz	r3, 8007240 <__kernel_rem_pio2+0x590>
 800723a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800723e:	4619      	mov	r1, r3
 8007240:	9b01      	ldr	r3, [sp, #4]
 8007242:	e9c3 0100 	strd	r0, r1, [r3]
 8007246:	9b06      	ldr	r3, [sp, #24]
 8007248:	f003 0007 	and.w	r0, r3, #7
 800724c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007250:	ecbd 8b02 	vpop	{d8}
 8007254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007258:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800725c:	f7f9 f846 	bl	80002ec <__adddf3>
 8007260:	3d01      	subs	r5, #1
 8007262:	e7e6      	b.n	8007232 <__kernel_rem_pio2+0x582>
 8007264:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007268:	f7f9 f840 	bl	80002ec <__adddf3>
 800726c:	3e01      	subs	r6, #1
 800726e:	e7bc      	b.n	80071ea <__kernel_rem_pio2+0x53a>
 8007270:	4602      	mov	r2, r0
 8007272:	460b      	mov	r3, r1
 8007274:	e7c1      	b.n	80071fa <__kernel_rem_pio2+0x54a>
 8007276:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800727a:	f7f9 f837 	bl	80002ec <__adddf3>
 800727e:	3401      	adds	r4, #1
 8007280:	e7c6      	b.n	8007210 <__kernel_rem_pio2+0x560>
 8007282:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8007286:	ed3a 7b02 	vldmdb	sl!, {d7}
 800728a:	4640      	mov	r0, r8
 800728c:	ec53 2b17 	vmov	r2, r3, d7
 8007290:	4649      	mov	r1, r9
 8007292:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007296:	f7f9 f829 	bl	80002ec <__adddf3>
 800729a:	4602      	mov	r2, r0
 800729c:	460b      	mov	r3, r1
 800729e:	4606      	mov	r6, r0
 80072a0:	460f      	mov	r7, r1
 80072a2:	4640      	mov	r0, r8
 80072a4:	4649      	mov	r1, r9
 80072a6:	f7f9 f81f 	bl	80002e8 <__aeabi_dsub>
 80072aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072ae:	f7f9 f81d 	bl	80002ec <__adddf3>
 80072b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80072b6:	e9ca 0100 	strd	r0, r1, [sl]
 80072ba:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80072be:	e770      	b.n	80071a2 <__kernel_rem_pio2+0x4f2>
 80072c0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80072c4:	ed3a 7b02 	vldmdb	sl!, {d7}
 80072c8:	4630      	mov	r0, r6
 80072ca:	ec53 2b17 	vmov	r2, r3, d7
 80072ce:	4639      	mov	r1, r7
 80072d0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80072d4:	f7f9 f80a 	bl	80002ec <__adddf3>
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	4680      	mov	r8, r0
 80072de:	4689      	mov	r9, r1
 80072e0:	4630      	mov	r0, r6
 80072e2:	4639      	mov	r1, r7
 80072e4:	f7f9 f800 	bl	80002e8 <__aeabi_dsub>
 80072e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072ec:	f7f8 fffe 	bl	80002ec <__adddf3>
 80072f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80072f4:	e9ca 0100 	strd	r0, r1, [sl]
 80072f8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80072fc:	e756      	b.n	80071ac <__kernel_rem_pio2+0x4fc>
 80072fe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007302:	f7f8 fff3 	bl	80002ec <__adddf3>
 8007306:	3d01      	subs	r5, #1
 8007308:	e756      	b.n	80071b8 <__kernel_rem_pio2+0x508>
 800730a:	9b01      	ldr	r3, [sp, #4]
 800730c:	9a01      	ldr	r2, [sp, #4]
 800730e:	601f      	str	r7, [r3, #0]
 8007310:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007314:	605c      	str	r4, [r3, #4]
 8007316:	609d      	str	r5, [r3, #8]
 8007318:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800731c:	60d3      	str	r3, [r2, #12]
 800731e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007322:	6110      	str	r0, [r2, #16]
 8007324:	6153      	str	r3, [r2, #20]
 8007326:	e78e      	b.n	8007246 <__kernel_rem_pio2+0x596>
 8007328:	41700000 	.word	0x41700000
 800732c:	3e700000 	.word	0x3e700000

08007330 <__kernel_sin>:
 8007330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007334:	ec55 4b10 	vmov	r4, r5, d0
 8007338:	b085      	sub	sp, #20
 800733a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800733e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007342:	ed8d 1b00 	vstr	d1, [sp]
 8007346:	9002      	str	r0, [sp, #8]
 8007348:	da06      	bge.n	8007358 <__kernel_sin+0x28>
 800734a:	ee10 0a10 	vmov	r0, s0
 800734e:	4629      	mov	r1, r5
 8007350:	f7f9 fc1c 	bl	8000b8c <__aeabi_d2iz>
 8007354:	2800      	cmp	r0, #0
 8007356:	d051      	beq.n	80073fc <__kernel_sin+0xcc>
 8007358:	4622      	mov	r2, r4
 800735a:	462b      	mov	r3, r5
 800735c:	4620      	mov	r0, r4
 800735e:	4629      	mov	r1, r5
 8007360:	f7f9 f97a 	bl	8000658 <__aeabi_dmul>
 8007364:	4682      	mov	sl, r0
 8007366:	468b      	mov	fp, r1
 8007368:	4602      	mov	r2, r0
 800736a:	460b      	mov	r3, r1
 800736c:	4620      	mov	r0, r4
 800736e:	4629      	mov	r1, r5
 8007370:	f7f9 f972 	bl	8000658 <__aeabi_dmul>
 8007374:	a341      	add	r3, pc, #260	; (adr r3, 800747c <__kernel_sin+0x14c>)
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	4680      	mov	r8, r0
 800737c:	4689      	mov	r9, r1
 800737e:	4650      	mov	r0, sl
 8007380:	4659      	mov	r1, fp
 8007382:	f7f9 f969 	bl	8000658 <__aeabi_dmul>
 8007386:	a33f      	add	r3, pc, #252	; (adr r3, 8007484 <__kernel_sin+0x154>)
 8007388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738c:	f7f8 ffac 	bl	80002e8 <__aeabi_dsub>
 8007390:	4652      	mov	r2, sl
 8007392:	465b      	mov	r3, fp
 8007394:	f7f9 f960 	bl	8000658 <__aeabi_dmul>
 8007398:	a33c      	add	r3, pc, #240	; (adr r3, 800748c <__kernel_sin+0x15c>)
 800739a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739e:	f7f8 ffa5 	bl	80002ec <__adddf3>
 80073a2:	4652      	mov	r2, sl
 80073a4:	465b      	mov	r3, fp
 80073a6:	f7f9 f957 	bl	8000658 <__aeabi_dmul>
 80073aa:	a33a      	add	r3, pc, #232	; (adr r3, 8007494 <__kernel_sin+0x164>)
 80073ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b0:	f7f8 ff9a 	bl	80002e8 <__aeabi_dsub>
 80073b4:	4652      	mov	r2, sl
 80073b6:	465b      	mov	r3, fp
 80073b8:	f7f9 f94e 	bl	8000658 <__aeabi_dmul>
 80073bc:	a337      	add	r3, pc, #220	; (adr r3, 800749c <__kernel_sin+0x16c>)
 80073be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c2:	f7f8 ff93 	bl	80002ec <__adddf3>
 80073c6:	9b02      	ldr	r3, [sp, #8]
 80073c8:	4606      	mov	r6, r0
 80073ca:	460f      	mov	r7, r1
 80073cc:	b9db      	cbnz	r3, 8007406 <__kernel_sin+0xd6>
 80073ce:	4602      	mov	r2, r0
 80073d0:	460b      	mov	r3, r1
 80073d2:	4650      	mov	r0, sl
 80073d4:	4659      	mov	r1, fp
 80073d6:	f7f9 f93f 	bl	8000658 <__aeabi_dmul>
 80073da:	a325      	add	r3, pc, #148	; (adr r3, 8007470 <__kernel_sin+0x140>)
 80073dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e0:	f7f8 ff82 	bl	80002e8 <__aeabi_dsub>
 80073e4:	4642      	mov	r2, r8
 80073e6:	464b      	mov	r3, r9
 80073e8:	f7f9 f936 	bl	8000658 <__aeabi_dmul>
 80073ec:	4602      	mov	r2, r0
 80073ee:	460b      	mov	r3, r1
 80073f0:	4620      	mov	r0, r4
 80073f2:	4629      	mov	r1, r5
 80073f4:	f7f8 ff7a 	bl	80002ec <__adddf3>
 80073f8:	4604      	mov	r4, r0
 80073fa:	460d      	mov	r5, r1
 80073fc:	ec45 4b10 	vmov	d0, r4, r5
 8007400:	b005      	add	sp, #20
 8007402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007406:	2200      	movs	r2, #0
 8007408:	4b1b      	ldr	r3, [pc, #108]	; (8007478 <__kernel_sin+0x148>)
 800740a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800740e:	f7f9 f923 	bl	8000658 <__aeabi_dmul>
 8007412:	4632      	mov	r2, r6
 8007414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007418:	463b      	mov	r3, r7
 800741a:	4640      	mov	r0, r8
 800741c:	4649      	mov	r1, r9
 800741e:	f7f9 f91b 	bl	8000658 <__aeabi_dmul>
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800742a:	f7f8 ff5d 	bl	80002e8 <__aeabi_dsub>
 800742e:	4652      	mov	r2, sl
 8007430:	465b      	mov	r3, fp
 8007432:	f7f9 f911 	bl	8000658 <__aeabi_dmul>
 8007436:	e9dd 2300 	ldrd	r2, r3, [sp]
 800743a:	f7f8 ff55 	bl	80002e8 <__aeabi_dsub>
 800743e:	a30c      	add	r3, pc, #48	; (adr r3, 8007470 <__kernel_sin+0x140>)
 8007440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007444:	4606      	mov	r6, r0
 8007446:	460f      	mov	r7, r1
 8007448:	4640      	mov	r0, r8
 800744a:	4649      	mov	r1, r9
 800744c:	f7f9 f904 	bl	8000658 <__aeabi_dmul>
 8007450:	4602      	mov	r2, r0
 8007452:	460b      	mov	r3, r1
 8007454:	4630      	mov	r0, r6
 8007456:	4639      	mov	r1, r7
 8007458:	f7f8 ff48 	bl	80002ec <__adddf3>
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	4620      	mov	r0, r4
 8007462:	4629      	mov	r1, r5
 8007464:	f7f8 ff40 	bl	80002e8 <__aeabi_dsub>
 8007468:	e7c6      	b.n	80073f8 <__kernel_sin+0xc8>
 800746a:	bf00      	nop
 800746c:	f3af 8000 	nop.w
 8007470:	55555549 	.word	0x55555549
 8007474:	3fc55555 	.word	0x3fc55555
 8007478:	3fe00000 	.word	0x3fe00000
 800747c:	5acfd57c 	.word	0x5acfd57c
 8007480:	3de5d93a 	.word	0x3de5d93a
 8007484:	8a2b9ceb 	.word	0x8a2b9ceb
 8007488:	3e5ae5e6 	.word	0x3e5ae5e6
 800748c:	57b1fe7d 	.word	0x57b1fe7d
 8007490:	3ec71de3 	.word	0x3ec71de3
 8007494:	19c161d5 	.word	0x19c161d5
 8007498:	3f2a01a0 	.word	0x3f2a01a0
 800749c:	1110f8a6 	.word	0x1110f8a6
 80074a0:	3f811111 	.word	0x3f811111

080074a4 <fabs>:
 80074a4:	ec51 0b10 	vmov	r0, r1, d0
 80074a8:	ee10 2a10 	vmov	r2, s0
 80074ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80074b0:	ec43 2b10 	vmov	d0, r2, r3
 80074b4:	4770      	bx	lr
	...

080074b8 <floor>:
 80074b8:	ec51 0b10 	vmov	r0, r1, d0
 80074bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80074c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80074c8:	2e13      	cmp	r6, #19
 80074ca:	460c      	mov	r4, r1
 80074cc:	ee10 5a10 	vmov	r5, s0
 80074d0:	4680      	mov	r8, r0
 80074d2:	dc34      	bgt.n	800753e <floor+0x86>
 80074d4:	2e00      	cmp	r6, #0
 80074d6:	da16      	bge.n	8007506 <floor+0x4e>
 80074d8:	a335      	add	r3, pc, #212	; (adr r3, 80075b0 <floor+0xf8>)
 80074da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074de:	f7f8 ff05 	bl	80002ec <__adddf3>
 80074e2:	2200      	movs	r2, #0
 80074e4:	2300      	movs	r3, #0
 80074e6:	f7f9 fb47 	bl	8000b78 <__aeabi_dcmpgt>
 80074ea:	b148      	cbz	r0, 8007500 <floor+0x48>
 80074ec:	2c00      	cmp	r4, #0
 80074ee:	da59      	bge.n	80075a4 <floor+0xec>
 80074f0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80074f4:	4a30      	ldr	r2, [pc, #192]	; (80075b8 <floor+0x100>)
 80074f6:	432b      	orrs	r3, r5
 80074f8:	2500      	movs	r5, #0
 80074fa:	42ab      	cmp	r3, r5
 80074fc:	bf18      	it	ne
 80074fe:	4614      	movne	r4, r2
 8007500:	4621      	mov	r1, r4
 8007502:	4628      	mov	r0, r5
 8007504:	e025      	b.n	8007552 <floor+0x9a>
 8007506:	4f2d      	ldr	r7, [pc, #180]	; (80075bc <floor+0x104>)
 8007508:	4137      	asrs	r7, r6
 800750a:	ea01 0307 	and.w	r3, r1, r7
 800750e:	4303      	orrs	r3, r0
 8007510:	d01f      	beq.n	8007552 <floor+0x9a>
 8007512:	a327      	add	r3, pc, #156	; (adr r3, 80075b0 <floor+0xf8>)
 8007514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007518:	f7f8 fee8 	bl	80002ec <__adddf3>
 800751c:	2200      	movs	r2, #0
 800751e:	2300      	movs	r3, #0
 8007520:	f7f9 fb2a 	bl	8000b78 <__aeabi_dcmpgt>
 8007524:	2800      	cmp	r0, #0
 8007526:	d0eb      	beq.n	8007500 <floor+0x48>
 8007528:	2c00      	cmp	r4, #0
 800752a:	bfbe      	ittt	lt
 800752c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007530:	fa43 f606 	asrlt.w	r6, r3, r6
 8007534:	19a4      	addlt	r4, r4, r6
 8007536:	ea24 0407 	bic.w	r4, r4, r7
 800753a:	2500      	movs	r5, #0
 800753c:	e7e0      	b.n	8007500 <floor+0x48>
 800753e:	2e33      	cmp	r6, #51	; 0x33
 8007540:	dd0b      	ble.n	800755a <floor+0xa2>
 8007542:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007546:	d104      	bne.n	8007552 <floor+0x9a>
 8007548:	ee10 2a10 	vmov	r2, s0
 800754c:	460b      	mov	r3, r1
 800754e:	f7f8 fecd 	bl	80002ec <__adddf3>
 8007552:	ec41 0b10 	vmov	d0, r0, r1
 8007556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800755a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800755e:	f04f 33ff 	mov.w	r3, #4294967295
 8007562:	fa23 f707 	lsr.w	r7, r3, r7
 8007566:	4207      	tst	r7, r0
 8007568:	d0f3      	beq.n	8007552 <floor+0x9a>
 800756a:	a311      	add	r3, pc, #68	; (adr r3, 80075b0 <floor+0xf8>)
 800756c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007570:	f7f8 febc 	bl	80002ec <__adddf3>
 8007574:	2200      	movs	r2, #0
 8007576:	2300      	movs	r3, #0
 8007578:	f7f9 fafe 	bl	8000b78 <__aeabi_dcmpgt>
 800757c:	2800      	cmp	r0, #0
 800757e:	d0bf      	beq.n	8007500 <floor+0x48>
 8007580:	2c00      	cmp	r4, #0
 8007582:	da02      	bge.n	800758a <floor+0xd2>
 8007584:	2e14      	cmp	r6, #20
 8007586:	d103      	bne.n	8007590 <floor+0xd8>
 8007588:	3401      	adds	r4, #1
 800758a:	ea25 0507 	bic.w	r5, r5, r7
 800758e:	e7b7      	b.n	8007500 <floor+0x48>
 8007590:	2301      	movs	r3, #1
 8007592:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007596:	fa03 f606 	lsl.w	r6, r3, r6
 800759a:	4435      	add	r5, r6
 800759c:	4545      	cmp	r5, r8
 800759e:	bf38      	it	cc
 80075a0:	18e4      	addcc	r4, r4, r3
 80075a2:	e7f2      	b.n	800758a <floor+0xd2>
 80075a4:	2500      	movs	r5, #0
 80075a6:	462c      	mov	r4, r5
 80075a8:	e7aa      	b.n	8007500 <floor+0x48>
 80075aa:	bf00      	nop
 80075ac:	f3af 8000 	nop.w
 80075b0:	8800759c 	.word	0x8800759c
 80075b4:	7e37e43c 	.word	0x7e37e43c
 80075b8:	bff00000 	.word	0xbff00000
 80075bc:	000fffff 	.word	0x000fffff

080075c0 <scalbn>:
 80075c0:	b570      	push	{r4, r5, r6, lr}
 80075c2:	ec55 4b10 	vmov	r4, r5, d0
 80075c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80075ca:	4606      	mov	r6, r0
 80075cc:	462b      	mov	r3, r5
 80075ce:	b9aa      	cbnz	r2, 80075fc <scalbn+0x3c>
 80075d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80075d4:	4323      	orrs	r3, r4
 80075d6:	d03b      	beq.n	8007650 <scalbn+0x90>
 80075d8:	4b31      	ldr	r3, [pc, #196]	; (80076a0 <scalbn+0xe0>)
 80075da:	4629      	mov	r1, r5
 80075dc:	2200      	movs	r2, #0
 80075de:	ee10 0a10 	vmov	r0, s0
 80075e2:	f7f9 f839 	bl	8000658 <__aeabi_dmul>
 80075e6:	4b2f      	ldr	r3, [pc, #188]	; (80076a4 <scalbn+0xe4>)
 80075e8:	429e      	cmp	r6, r3
 80075ea:	4604      	mov	r4, r0
 80075ec:	460d      	mov	r5, r1
 80075ee:	da12      	bge.n	8007616 <scalbn+0x56>
 80075f0:	a327      	add	r3, pc, #156	; (adr r3, 8007690 <scalbn+0xd0>)
 80075f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f6:	f7f9 f82f 	bl	8000658 <__aeabi_dmul>
 80075fa:	e009      	b.n	8007610 <scalbn+0x50>
 80075fc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007600:	428a      	cmp	r2, r1
 8007602:	d10c      	bne.n	800761e <scalbn+0x5e>
 8007604:	ee10 2a10 	vmov	r2, s0
 8007608:	4620      	mov	r0, r4
 800760a:	4629      	mov	r1, r5
 800760c:	f7f8 fe6e 	bl	80002ec <__adddf3>
 8007610:	4604      	mov	r4, r0
 8007612:	460d      	mov	r5, r1
 8007614:	e01c      	b.n	8007650 <scalbn+0x90>
 8007616:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800761a:	460b      	mov	r3, r1
 800761c:	3a36      	subs	r2, #54	; 0x36
 800761e:	4432      	add	r2, r6
 8007620:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007624:	428a      	cmp	r2, r1
 8007626:	dd0b      	ble.n	8007640 <scalbn+0x80>
 8007628:	ec45 4b11 	vmov	d1, r4, r5
 800762c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007698 <scalbn+0xd8>
 8007630:	f000 f83c 	bl	80076ac <copysign>
 8007634:	a318      	add	r3, pc, #96	; (adr r3, 8007698 <scalbn+0xd8>)
 8007636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763a:	ec51 0b10 	vmov	r0, r1, d0
 800763e:	e7da      	b.n	80075f6 <scalbn+0x36>
 8007640:	2a00      	cmp	r2, #0
 8007642:	dd08      	ble.n	8007656 <scalbn+0x96>
 8007644:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007648:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800764c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007650:	ec45 4b10 	vmov	d0, r4, r5
 8007654:	bd70      	pop	{r4, r5, r6, pc}
 8007656:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800765a:	da0d      	bge.n	8007678 <scalbn+0xb8>
 800765c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007660:	429e      	cmp	r6, r3
 8007662:	ec45 4b11 	vmov	d1, r4, r5
 8007666:	dce1      	bgt.n	800762c <scalbn+0x6c>
 8007668:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007690 <scalbn+0xd0>
 800766c:	f000 f81e 	bl	80076ac <copysign>
 8007670:	a307      	add	r3, pc, #28	; (adr r3, 8007690 <scalbn+0xd0>)
 8007672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007676:	e7e0      	b.n	800763a <scalbn+0x7a>
 8007678:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800767c:	3236      	adds	r2, #54	; 0x36
 800767e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007682:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007686:	4620      	mov	r0, r4
 8007688:	4629      	mov	r1, r5
 800768a:	2200      	movs	r2, #0
 800768c:	4b06      	ldr	r3, [pc, #24]	; (80076a8 <scalbn+0xe8>)
 800768e:	e7b2      	b.n	80075f6 <scalbn+0x36>
 8007690:	c2f8f359 	.word	0xc2f8f359
 8007694:	01a56e1f 	.word	0x01a56e1f
 8007698:	8800759c 	.word	0x8800759c
 800769c:	7e37e43c 	.word	0x7e37e43c
 80076a0:	43500000 	.word	0x43500000
 80076a4:	ffff3cb0 	.word	0xffff3cb0
 80076a8:	3c900000 	.word	0x3c900000

080076ac <copysign>:
 80076ac:	ec51 0b10 	vmov	r0, r1, d0
 80076b0:	ee11 0a90 	vmov	r0, s3
 80076b4:	ee10 2a10 	vmov	r2, s0
 80076b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80076bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80076c0:	ea41 0300 	orr.w	r3, r1, r0
 80076c4:	ec43 2b10 	vmov	d0, r2, r3
 80076c8:	4770      	bx	lr
	...

080076cc <_init>:
 80076cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ce:	bf00      	nop
 80076d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076d2:	bc08      	pop	{r3}
 80076d4:	469e      	mov	lr, r3
 80076d6:	4770      	bx	lr

080076d8 <_fini>:
 80076d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076da:	bf00      	nop
 80076dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076de:	bc08      	pop	{r3}
 80076e0:	469e      	mov	lr, r3
 80076e2:	4770      	bx	lr
